###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         21/Apr/2021  17:19:42 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ              #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\Source\ #
#                          SampleApp.c                                        #
#    Command line       =  -f "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ          #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\Tools\CC2530DB\f8wEndev.cfg"            #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f "F:\CC2530\CC2530-2019£¨ÖØÒ #
#                          ª£©45\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_Èë #
#                          ÍøÁ÷³Ì\ZStack-2.5.1a\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cf #
#                          g" (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0   #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "F:\CC2530\CC2530-2019£¨ÖØÒ #
#                          ª£©45\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_Èë #
#                          ÍøÁ÷³Ì\ZStack-2.5.1a\Projects\zstack\Samples\Sampl #
#                          eApp\Source\SampleApp.c" -D NWK_AUTO_POLL -D       #
#                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC  #
#                          -D LCD_SUPPORTED=DEBUG -D HOLD_AUTO_START -D       #
#                          NV_INIT -D NV_RESTORE=1 -lC                        #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\EndDeviceEB\List\" -lA                           #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\EndDeviceEB\List\" --diag_suppress Pe001,Pa010   #
#                          -o "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ          #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\EndDeviceEB\Obj\" -e --no_code_motion --debug    #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "F:\CC2530\CC2530-2019£¨ÖØ #
#                          Òª£©45\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_È #
#                          ëÍøÁ÷³Ì\ZStack-2.5.1a\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\" -I "F:\CC2530\CC2530-2019£¨ÖØÒª£© #
#                          45\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ #
#                          ÷³Ì\ZStack-2.5.1a\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\Source\" -I                          #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\ZMain\TI2530DB\" -I                     #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\hal\include\" -I       #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\hal\target\CC2530EB\"  #
#                          -I "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ          #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\mac\include\" -I       #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\mac\high_level\" -I    #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\mac\low_level\srf04\"  #
#                          -I "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ          #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\mac\low_level\srf04\si #
#                          ngle_chip\" -I "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ #
#                          5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\Z #
#                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\..\..\..\..\..\Components\mt\" -I            #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\osal\include\" -I      #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\services\saddr\" -I    #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\services\sdata\" -I    #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\af\" -I          #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\nwk\" -I         #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\sapi\" -I        #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\sec\" -I         #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\sys\" -I         #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\zdo\" -I         #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\zmac\" -I              #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\zmac\f8w\" -Ohz        #
#                          --require_prototypes                               #
#    List file          =  F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ              #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\EndDeviceEB\List\SampleApp.lst                   #
#    Object file        =  F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ              #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\EndDeviceEB\Obj\SampleApp.r51                    #
#                                                                             #
#                                                                             #
###############################################################################

F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          
     78          #include "OSAL_Nv.h"
     79          #include "AddrMgr.h"
     80          
     81          /*********************************************************************
     82           * MACROS
     83           */
     84          
     85          /*********************************************************************
     86           * CONSTANTS
     87           */
     88          
     89          /*********************************************************************
     90           * TYPEDEFS
     91           */
     92          
     93          /*********************************************************************
     94           * GLOBAL VARIABLES
     95           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
     96          uint8 AppTitle[] = "ALD2530 P2P"; //Ó¦ÓÃ³ÌĞòÃû³Æ
   \                     AppTitle:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for AppTitle>`
   \   00000C                REQUIRE __INIT_XDATA_I
     97          
     98          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     99          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0300         DW 3
   \   000006   0400         DW 4
    100          {
    101            SAMPLEAPP_PERIODIC_CLUSTERID,
    102            SAMPLEAPP_FLASH_CLUSTERID,
    103            SAMPLEAPP_P2P_CLUSTERID,
    104            SAMPLEAPP_CONTROL_CLUSTERID
    105          };
    106          

   \                                 In  segment XDATA_ROM_C, align 1
    107          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   04           DB 4
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   04           DB 4
   \   00000A   ....         DW SampleApp_ClusterList
    108          {
    109            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    110            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    111            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    112            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    113            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    114            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    115            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    116            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    117            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    118          };
    119          
    120          // This is the Endpoint/Interface description.  It is defined here, but
    121          // filled-in in SampleApp_Init().  Another way to go would be to fill
    122          // in the structure here and make it a "const" (in code space).  The
    123          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    124          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    125          
    126          /*********************************************************************
    127           * EXTERNAL VARIABLES
    128           */
    129          
    130          /*********************************************************************
    131           * EXTERNAL FUNCTIONS
    132           */
    133          
    134          /*********************************************************************
    135           * LOCAL VARIABLES
    136           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    138                                    // This variable will be received when
    139                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    141          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          afAddrType_t SampleApp_Periodic_DstAddr; //¹ã²¥
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          afAddrType_t SampleApp_Flash_DstAddr;    //×é²¥
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          afAddrType_t SampleApp_P2P_DstAddr;      //µã²¥
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          afAddrType_t SampleApp_Control_DstAddr;      //µã²¥
   \                     SampleApp_Control_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    148          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    150          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    153          
    154          
    155          /*********************************************************************
    156           * LOCAL FUNCTIONS
    157           */
    158          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    159          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    160          void SampleApp_SendPeriodicMessage( void );
    161          void SampleApp_SendFlashMessage( uint16 flashTime );
    162          void SampleApp_Send_P2P_Message(void);
    163          //void SampleApp_Send_Control_Message(void);
    164          /*********************************************************************
    165           * NETWORK LAYER CALLBACKS
    166           */
    167          
    168          /*********************************************************************
    169           * PUBLIC FUNCTIONS
    170           */
    171          
    172          /*********************************************************************
    173           * @fn      SampleApp_Init
    174           *
    175           * @brief   Initialization function for the Generic App Task.
    176           *          This is called during initialization and should contain
    177           *          any application specific initialization (ie. hardware
    178           *          initialization/setup, table initialization, power up
    179           *          notificaiton ... ).
    180           *
    181           * @param   task_id - the ID assigned by OSAL.  This ID should be
    182           *                    used to send messages and set timers.
    183           *
    184           * @return  none
    185           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    186          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    187          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    188            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    189            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    190            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    191            
    192            MT_UartInit();                  //´®¿Ú³õÊ¼»¯
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    193            MT_UartRegisterTaskID(task_id); //×¢²á´®¿ÚÈÎÎñ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    194          
    195            
    196            // Device hardware initialization can be added here or in main() (Zmain.c).
    197            // If the hardware is application specific - add it here.
    198            // If the hardware is other parts of the device add it in main().
    199          
    200           #if defined ( BUILD_ALL_DEVICES )
    201            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    202            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    203            // together - if they are - we will start up a coordinator. Otherwise,
    204            // the device will start as a router.
    205            if ( readCoordinatorJumper() )
    206              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    207            else
    208              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    209          #endif // BUILD_ALL_DEVICES
    210          
    211          #if defined ( HOLD_AUTO_START)
    212            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    213            //  from starting the device and wait for the application to
    214            //  start the device.
    215            // ZDOInitDevice(0);
    216          #endif
    217          
    218            // Setup for the periodic message's destination address
    219            // Broadcast to everyone
    220            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//¹ã²¥
   \   00001E   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000021   740F         MOV     A,#0xf
   \   000023   12....       LCALL   ??Subroutine4_0 & 0xFFFF
    221            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
    222            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \                     ??CrossCallReturnLabel_8:
   \   000026   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000029   74FF         MOV     A,#-0x1
   \   00002B   F0           MOVX    @DPTR,A
   \   00002C   A3           INC     DPTR
   \   00002D   F0           MOVX    @DPTR,A
    223          
    224            // Setup for the flash command's destination address - Group 1
    225            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;//×é²¥
   \   00002E   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000031   7401         MOV     A,#0x1
   \   000033   12....       LCALL   ??Subroutine4_0 & 0xFFFF
    226            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
    227            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \                     ??CrossCallReturnLabel_9:
   \   000036   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000039   7401         MOV     A,#0x1
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   A3           INC     DPTR
   \   00003D   E4           CLR     A
   \   00003E   F0           MOVX    @DPTR,A
    228            
    229            SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥ 
   \   00003F   90....       MOV     DPTR,#SampleApp_P2P_DstAddr + 8
   \   000042   12....       LCALL   ?Subroutine2 & 0xFFFF
    230            SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
    231            SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //·¢¸øĞ­µ÷Æ÷
   \                     ??CrossCallReturnLabel_6:
   \   000045   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   000048   E4           CLR     A
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   A3           INC     DPTR
   \   00004B   F0           MOVX    @DPTR,A
    232          
    233            
    234            SampleApp_Control_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥ 
   \   00004C   90....       MOV     DPTR,#SampleApp_Control_DstAddr + 8
   \   00004F   12....       LCALL   ?Subroutine2 & 0xFFFF
    235            SampleApp_Control_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
    236            
    237            
    238            // Fill out the endpoint description.
    239            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \                     ??CrossCallReturnLabel_7:
   \   000052   90....       MOV     DPTR,#SampleApp_epDesc
   \   000055   F0           MOVX    @DPTR,A
    240            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000056   A3           INC     DPTR
   \   000057   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   00005D   F0           MOVX    @DPTR,A
    241            SampleApp_epDesc.simpleDesc
    242                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00005E   A3           INC     DPTR
   \   00005F   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000061   F0           MOVX    @DPTR,A
   \   000062   A3           INC     DPTR
   \   000063   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000065   F0           MOVX    @DPTR,A
    243            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000066   A3           INC     DPTR
   \   000067   E4           CLR     A
   \   000068   F0           MOVX    @DPTR,A
    244          
    245            // Register the endpoint description with the AF
    246            afRegister( &SampleApp_epDesc );
   \   000069                ; Setup parameters for call to function afRegister
   \   000069   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00006B   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00006D   12....       LCALL   ??afRegister?relay
    247          
    248            // Register for all key events - This app will handle all key events
    249            RegisterForKeys( SampleApp_TaskID );
   \   000070                ; Setup parameters for call to function RegisterForKeys
   \   000070   90....       MOV     DPTR,#SampleApp_TaskID
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F9           MOV     R1,A
   \   000075   12....       LCALL   ??RegisterForKeys?relay
    250          
    251            // By default, all devices start out in Group 1
    252            SampleApp_Group.ID = 0x0001;
   \   000078   90....       MOV     DPTR,#SampleApp_Group
   \   00007B   7401         MOV     A,#0x1
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   A3           INC     DPTR
   \   00007F   E4           CLR     A
   \   000080   F0           MOVX    @DPTR,A
    253            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   000081                ; Setup parameters for call to function osal_memcpy
   \   000081   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   000084   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000087   F5..         MOV     ?V0 + 2,A
   \   000089   78..         MOV     R0,#?V0 + 0
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00008E   7C07         MOV     R4,#0x7
   \   000090   7D00         MOV     R5,#0x0
   \   000092   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   000094   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   000096   12....       LCALL   ??osal_memcpy?relay
   \   000099   7403         MOV     A,#0x3
   \   00009B   12....       LCALL   ?DEALLOC_XSTACK8
    254            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   00009E                ; Setup parameters for call to function aps_AddGroup
   \   00009E   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000A0   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000A2   7914         MOV     R1,#0x14
   \   0000A4   12....       LCALL   ??aps_AddGroup?relay
    255          
    256          #if defined ( LCD_SUPPORTED )
    257            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000A7                ; Setup parameters for call to function HalLcdWriteString
   \   0000A7   7900         MOV     R1,#0x0
   \   0000A9   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000AB   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000AD   12....       LCALL   ??HalLcdWriteString?relay
    258          #endif
    259          }
   \   0000B0   7F03         MOV     R7,#0x3
   \   0000B2   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine4_0
   \   000002                ; // Fall through to label ??Subroutine4_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine4_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   7414         MOV     A,#0x14
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    260          
    261          /*********************************************************************
    262           * @fn      SampleApp_ProcessEvent
    263           *
    264           * @brief   Generic Application Task event processor.  This function
    265           *          is called to process all events for the task.  Events
    266           *          include timers, messages and any other user defined events.
    267           *
    268           * @param   task_id  - The OSAL assigned task ID.
    269           * @param   events - events to process.  This is a bit map and can
    270           *                   contain more than one event.
    271           *
    272           * @return  none
    273           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    274          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    275          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    276            afIncomingMSGPacket_t *MSGpkt;
    277            (void)task_id;  // Intentionally unreferenced parameter
    278          
    279            if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV     A,R3
   \   00000A   5480         ANL     A,#0x80
   \   00000C   6066         JZ      ??SampleApp_ProcessEvent_0
    280            {
    281              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000E                ; Setup parameters for call to function osal_msg_receive
   \   00000E   8019         SJMP    ??SampleApp_ProcessEvent_1
    282              while ( MSGpkt )
    283              {
    284                switch ( MSGpkt->hdr.event )
    285                {
    286                  // Received when a key is pressed
    287                  case KEY_CHANGE:
    288                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    289                    break;
    290          
    291                  // Received when a messages is received (OTA) for this endpoint
    292                  case AF_INCOMING_MSG_CMD:
    293                    SampleApp_MessageMSGCB( MSGpkt );
    294                    break;
    295          
    296                  // Received whenever the device changes state in the network
    297                  case ZDO_STATE_CHANGE:
    298                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   90....       MOV     DPTR,#SampleApp_NwkState
   \   000015   F0           MOVX    @DPTR,A
    299                    if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
    300                           (SampleApp_NwkState == DEV_ROUTER)
    301                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000016   6407         XRL     A,#0x7
   \   000018   6005         JZ      ??SampleApp_ProcessEvent_3
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   6406         XRL     A,#0x6
   \   00001D   7003         JNZ     ??SampleApp_ProcessEvent_4
    302                    {
    303                      SampleApp_Send_P2P_Message();
   \                     ??SampleApp_ProcessEvent_3:
   \   00001F                ; Setup parameters for call to function SampleApp_Send_P2P_Message
   \   00001F   12....       LCALL   ??SampleApp_Send_P2P_Message?relay
    304                      // Start sending the periodic message in a regular interval.
    305                      //osal_start_timerEx( SampleApp_TaskID,
    306                      //                  SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    307                      //                  SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
    308                    }
    309                    else
    310                    {
    311                      // Device is no longer in the network
    312                      //SampleApp_Send_CONTROL_Message();
    313                    }
    314                    break;
    315                    
    316                  default:
    317                    break;
    318                }
    319          
    320                // Release the memory
    321                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000022                ; Setup parameters for call to function osal_msg_deallocate
   \   000022   EE           MOV     A,R6
   \   000023   FA           MOV     R2,A
   \   000024   EF           MOV     A,R7
   \   000025   FB           MOV     R3,A
   \   000026   12....       LCALL   ??osal_msg_deallocate?relay
    322          
    323                // Next - if one is available
    324                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000029                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000029   90....       MOV     DPTR,#SampleApp_TaskID
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \   00002E   12....       LCALL   ??osal_msg_receive?relay
   \   000031   8A..         MOV     ?V0 + 2,R2
   \   000033   8B..         MOV     ?V0 + 3,R3
   \   000035   AE..         MOV     R6,?V0 + 2
   \   000037   AF..         MOV     R7,?V0 + 3
   \   000039   EE           MOV     A,R6
   \   00003A   4F           ORL     A,R7
   \   00003B   602E         JZ      ??SampleApp_ProcessEvent_5
   \   00003D   8E82         MOV     DPL,R6
   \   00003F   8F83         MOV     DPH,R7
   \   000041   E0           MOVX    A,@DPTR
   \   000042   24E6         ADD     A,#-0x1a
   \   000044   601C         JZ      ??SampleApp_ProcessEvent_6
   \   000046   245A         ADD     A,#0x5a
   \   000048   6006         JZ      ??SampleApp_ProcessEvent_7
   \   00004A   24EF         ADD     A,#-0x11
   \   00004C   60C2         JZ      ??SampleApp_ProcessEvent_2
   \   00004E   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   000050                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   FA           MOV     R2,A
   \   000055   8E82         MOV     DPL,R6
   \   000057   8F83         MOV     DPH,R7
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F9           MOV     R1,A
   \   00005D   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   000060   80C0         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000062                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000062   EE           MOV     A,R6
   \   000063   FA           MOV     R2,A
   \   000064   EF           MOV     A,R7
   \   000065   FB           MOV     R3,A
   \   000066   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000069   80B7         SJMP    ??SampleApp_ProcessEvent_4
    325              }
    326          
    327              // return unprocessed events
    328              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   00006B   AA..         MOV     R2,?V0 + 0
   \   00006D   E5..         MOV     A,?V0 + 1
   \   00006F   6480         XRL     A,#0x80
   \   000071   FB           MOV     R3,A
   \   000072   8029         SJMP    ??SampleApp_ProcessEvent_8
    329            }
    330          
    331            // Send a message out - This event is generated by a timer
    332            //  (setup in SampleApp_Init()).
    333            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000074   EA           MOV     A,R2
   \   000075   A2E0         MOV     C,0xE0 /* A   */.0
   \   000077   5020         JNC     ??SampleApp_ProcessEvent_9
    334            {
    335              // Send the periodic message
    336              //SampleApp_SendPeriodicMessage();
    337              //SampleApp_Send_P2P_Message();
    338          
    339              // Setup to send message again in normal period (+ a little jitter)
    340              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    341                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000079                ; Setup parameters for call to function osal_rand
   \   000079   12....       LCALL   ??osal_rand?relay
   \   00007C                ; Setup parameters for call to function osal_start_timerEx
   \   00007C   EA           MOV     A,R2
   \   00007D   24B8         ADD     A,#-0x48
   \   00007F   FC           MOV     R4,A
   \   000080   E4           CLR     A
   \   000081   340B         ADDC    A,#0xb
   \   000083   FD           MOV     R5,A
   \   000084   7A01         MOV     R2,#0x1
   \   000086   7B00         MOV     R3,#0x0
   \   000088   90....       MOV     DPTR,#SampleApp_TaskID
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F9           MOV     R1,A
   \   00008D   12....       LCALL   ??osal_start_timerEx?relay
    342          
    343              // return unprocessed events
    344              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   000090   E5..         MOV     A,?V0 + 0
   \   000092   6401         XRL     A,#0x1
   \   000094   FA           MOV     R2,A
   \   000095   AB..         MOV     R3,?V0 + 1
   \   000097   8004         SJMP    ??SampleApp_ProcessEvent_8
    345            }
    346          
    347            // Discard unknown events
    348            return 0;
   \                     ??SampleApp_ProcessEvent_9:
   \   000099   7A00         MOV     R2,#0x0
   \   00009B   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_8:
   \   00009D   7F04         MOV     R7,#0x4
   \   00009F   02....       LJMP    ?BANKED_LEAVE_XDATA
    349          }
    350          
    351          /*********************************************************************
    352           * Event Generation Functions
    353           */
    354          /*********************************************************************
    355           * @fn      SampleApp_HandleKeys
    356           *
    357           * @brief   Handles all key events for this device.
    358           *
    359           * @param   shift - true if in shift/alt.
    360           * @param   keys - bit field for key events. Valid entries:
    361           *                 HAL_KEY_SW_2
    362           *                 HAL_KEY_SW_1
    363           *
    364           * @return  none
    365           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    366          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    367          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    368            (void)shift;  // Intentionally unreferenced parameter
    369            
    370            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   500D         JNC     ??SampleApp_HandleKeys_0
    371            {
    372              /* This key sends the Flash Command is sent to Group 1.
    373               * This device will not receive the Flash Command from this
    374               * device (even if it belongs to group 1).
    375               */
    376              //SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
    377              
    378              #if defined(ZDO_COORDINATOR)       
    379                //SampleApp_SendPeriodicMessage(); //Ğ­µ÷Æ÷¹ã²¥Êı¾İ
    380                //SampleApp_Send_Control_Message();
    381                
    382                
    383                //AddrMgrEntry_t addrEntry;
    384                //NLME_LeaveReq_t req;
    385          
    386                //if ( AddrMgrEntryGet( &addrEntry ) )
    387                //{
    388                //    req.extAddr = addrEntry.extAddr;
    389                //    NLME_LeaveReq(&req); //Í¨¹ıleaveÃüÁî Çå³ı stale deviceÏà¹ØÌõÄ¿£»
    390                //    AssocRemove( addrEntry.extAddr);
    391                //}
    392          
    393              #else
    394                //ZDOInitDevice( 0 ); //ÖÕ¶Ë½ÚµãÈëÍø
    395                HalUARTWrite(0,"1",sizeof("1")-1);
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B   7C01         MOV     R4,#0x1
   \   00000D   7D00         MOV     R5,#0x0
   \   00000F   7A..         MOV     R2,#`?<Constant "1">` & 0xff
   \   000011   7B..         MOV     R3,#(`?<Constant "1">` >> 8) & 0xff
   \   000013   7900         MOV     R1,#0x0
   \   000015   12....       LCALL   ??HalUARTWrite?relay
    396              #endif
    397            }
    398          
    399            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000018   EE           MOV     A,R6
   \   000019   A2E1         MOV     C,0xE0 /* A   */.1
   \   00001B   5024         JNC     ??SampleApp_HandleKeys_1
    400            {
    401              /* The Flashr Command is sent to Group 1.
    402               * This key toggles this device in and out of group 1.
    403               * If this device doesn't belong to group 1, this application
    404               * will not receive the Flash command sent to group 1.
    405               */
    406              aps_Group_t *grp;
    407              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    408              if ( grp )
   \   00001D                ; Setup parameters for call to function aps_FindGroup
   \   00001D   7A01         MOV     R2,#0x1
   \   00001F   7B00         MOV     R3,#0x0
   \   000021   7914         MOV     R1,#0x14
   \   000023   12....       LCALL   ??aps_FindGroup?relay
   \   000026   8B..         MOV     ?V0 + 1,R3
   \   000028   EA           MOV     A,R2
   \   000029   45..         ORL     A,?V0 + 1
   \   00002B   600B         JZ      ??SampleApp_HandleKeys_2
    409              {
    410                // Remove from the group
    411                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   00002D                ; Setup parameters for call to function aps_RemoveGroup
   \   00002D   7A01         MOV     R2,#0x1
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   7914         MOV     R1,#0x14
   \   000033   12....       LCALL   ??aps_RemoveGroup?relay
   \   000036   8009         SJMP    ??SampleApp_HandleKeys_1
    412              }
    413              else
    414              {
    415                // Add to the flash group
    416                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000038                ; Setup parameters for call to function aps_AddGroup
   \   000038   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   00003A   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   00003C   7914         MOV     R1,#0x14
   \   00003E   12....       LCALL   ??aps_AddGroup?relay
    417              }
    418            }
    419          }
   \                     ??SampleApp_HandleKeys_1:
   \   000041   80..         SJMP    ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    420          
    421          /*********************************************************************
    422           * LOCAL FUNCTIONS
    423           */
    424          
    425          /*********************************************************************
    426           * @fn      SampleApp_MessageMSGCB
    427           *
    428           * @brief   Data message processor callback.  This function processes
    429           *          any incoming data - probably from other devices.  So, based
    430           *          on cluster ID, perform the intended action.
    431           *
    432           * @param   none
    433           *
    434           * @return  none
    435           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    436          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    437          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    438            uint16 flashTime;
    439          
    440            switch ( pkt->clusterId )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V0 + 0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V0 + 1,A
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000019   0200         DW        2
   \   00001B   02           DB        2
   \   00001C   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00001E   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000020   ....         DW        ??SampleApp_MessageMSGCB_2
   \   000022   ....         DW        ??SampleApp_MessageMSGCB_3
    441            {
    442              case SAMPLEAPP_P2P_CLUSTERID:
    443                //HalUARTWrite(0, "Rx:", 3);       //ÌáÊ¾½ÓÊÕµ½Êı¾İ
    444                //HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength); //´®¿ÚÊä³ö½ÓÊÕµ½µÄÊı¾İ
    445                //HalUARTWrite(0, "\n", 1);         // »Ø³µ»»ĞĞ
    446                SampleApp_Control_DstAddr.addr.shortAddr = pkt->srcAddr.addr.shortAddr;
   \                     ??SampleApp_MessageMSGCB_2:
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F8           MOV     R0,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   90....       MOV     DPTR,#SampleApp_Control_DstAddr
   \   000036   E8           MOV     A,R0
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   E9           MOV     A,R1
   \   00003A   F0           MOVX    @DPTR,A
    447                break;   
   \   00003B   8050         SJMP    ??SampleApp_MessageMSGCB_0
    448                
    449              case SAMPLEAPP_CONTROL_CLUSTERID:
    450                //HalUARTWrite(0, "Rx:", 3);       //ÌáÊ¾½ÓÊÕµ½Êı¾İ
    451                HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength); //´®¿ÚÊä³ö½ÓÊÕµ½µÄÊı¾İ
   \                     ??SampleApp_MessageMSGCB_3:
   \   00003D                ; Setup parameters for call to function HalUARTWrite
   \   00003D   EA           MOV     A,R2
   \   00003E   2420         ADD     A,#0x20
   \   000040   F582         MOV     DPL,A
   \   000042   EB           MOV     A,R3
   \   000043   3400         ADDC    A,#0x0
   \   000045   F583         MOV     DPH,A
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FC           MOV     R4,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   FD           MOV     R5,A
   \   00004C   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00004F   FA           MOV     R2,A
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   FB           MOV     R3,A
   \   000053   7900         MOV     R1,#0x0
   \   000055   12....       LCALL   ??HalUARTWrite?relay
    452                //HalUARTWrite(0, "n", 1);
    453                //HalUARTWrite(0, "\n", 1);         // »Ø³µ»»ĞĞ
    454                break;   
   \   000058   8033         SJMP    ??SampleApp_MessageMSGCB_0
    455               
    456              case SAMPLEAPP_PERIODIC_CLUSTERID:
    457                //HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength); //´®¿ÚÊä³ö½ÓÊÕµ½µÄÊı¾İ
    458                break;
    459          
    460              case SAMPLEAPP_FLASH_CLUSTERID:
    461                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    462                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \                     ??SampleApp_MessageMSGCB_1:
   \   00005A   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00005D   F8           MOV     R0,A
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F9           MOV     R1,A
   \   000061                ; Setup parameters for call to function HalLedBlink
   \   000061   8882         MOV     DPL,R0
   \   000063   8983         MOV     DPH,R1
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   FA           MOV     R2,A
   \   000068   8882         MOV     DPL,R0
   \   00006A   8983         MOV     DPH,R1
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F9           MOV     R1,A
   \   000070   EA           MOV     A,R2
   \   000071   2400         ADD     A,#0x0
   \   000073   F5..         MOV     ?V0 + 0,A
   \   000075   E4           CLR     A
   \   000076   39           ADDC    A,R1
   \   000077   F5..         MOV     ?V0 + 1,A
   \   000079   7402         MOV     A,#0x2
   \   00007B   78..         MOV     R0,#?V0 + 0
   \   00007D   12....       LCALL   ?US_SHR
   \   000080   AC..         MOV     R4,?V0 + 0
   \   000082   AD..         MOV     R5,?V0 + 1
   \   000084   7B32         MOV     R3,#0x32
   \   000086   7A04         MOV     R2,#0x4
   \   000088   7908         MOV     R1,#0x8
   \   00008A   12....       LCALL   ??HalLedBlink?relay
    463                break;
    464            }
    465          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   00008D   02....       LJMP    ??Subroutine5_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   EA           MOV     A,R2
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
    466          
    467          /*********************************************************************
    468           * @fn      SampleApp_SendPeriodicMessage
    469           *
    470           * @brief   Send the periodic message.
    471           *
    472           * @param   none
    473           *
    474           * @return  none
    475           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine5_0
   \   000003                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    476          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    477          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    478            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    479                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    480                                 1,
    481                                 (uint8*)&SampleAppPeriodicCounter,
    482                                 &SampleApp_TransID,
    483                                 AF_DISCV_ROUTE,
    484                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV     R1,#0x20
   \   000035   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000040   02....       LJMP    ?Subroutine0 & 0xFFFF
    485            {
    486            }
    487            else
    488            {
    489              // Error occurred in request to send.
    490            }
    491          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ??AF_DataRequest?relay
   \   000003   7409         MOV     A,#0x9
   \   000005   22           RET
    492          
    493          /*********************************************************************
    494           * @fn      SampleApp_SendFlashMessage
    495           *
    496           * @brief   Send the flash message to group 1.
    497           *
    498           * @param   flashTime - in milliseconds
    499           *
    500           * @return  none
    501           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    502          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    503          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    504            uint8 buffer[3];
    505            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    506            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    507            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    508          
    509            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    510                                 SAMPLEAPP_FLASH_CLUSTERID,
    511                                 3,
    512                                 buffer,
    513                                 &SampleApp_TransID,
    514                                 AF_DISCV_ROUTE,
    515                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
    516            {
    517            }
    518            else
    519            {
    520              // Error occurred in request to send.
    521            }
    522          }
   \   00006F   7403         MOV     A,#0x3
   \   000071   02....       LJMP    ?Subroutine0 & 0xFFFF
    523          
    524          /*********************************************************************
    525           * @fn      SampleApp_Send_P2P_Message
    526           *
    527           * @brief   point to point.
    528           *
    529           * @param   none
    530           *
    531           * @return  none
    532           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    533          void SampleApp_Send_P2P_Message( void )
   \                     SampleApp_Send_P2P_Message:
    534          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    535           
    536              uint16 shortAddr = NLME_GetShortAddr();
   \   00000A                ; Setup parameters for call to function NLME_GetShortAddr
   \   00000A   12....       LCALL   ??NLME_GetShortAddr?relay
    537              uint8 strBuf[2]={0};
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   AC82         MOV     R4,DPL
   \   000015   AD83         MOV     R5,DPH
   \   000017   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   00001A   7582..       MOV     DPL,#`?<Constant {0}>` & 0xff
   \   00001D   7402         MOV     A,#0x2
   \   00001F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    538              
    539              strBuf[0] = HI_UINT16(shortAddr);
   \   000022   85..82       MOV     DPL,?XSP + 0
   \   000025   85..83       MOV     DPH,?XSP + 1
   \   000028   EB           MOV     A,R3
   \   000029   F0           MOVX    @DPTR,A
    540              strBuf[1] = LO_UINT16(shortAddr);
   \   00002A   7401         MOV     A,#0x1
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   EA           MOV     A,R2
   \   000030   F0           MOVX    @DPTR,A
    541              
    542              static byte  TransID;
    543              afAddrType_t dst_addr;
    544              
    545              dst_addr.addrMode       = (afAddrMode_t)Addr16Bit;
   \   000031   740A         MOV     A,#0xa
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   7402         MOV     A,#0x2
   \   000038   F0           MOVX    @DPTR,A
    546              dst_addr.endPoint       = SAMPLEAPP_ENDPOINT;
   \   000039   740B         MOV     A,#0xb
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   7414         MOV     A,#0x14
   \   000040   F0           MOVX    @DPTR,A
    547              dst_addr.addr.shortAddr = 0x0000;
   \   000041   7402         MOV     A,#0x2
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   E4           CLR     A
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   F0           MOVX    @DPTR,A
    548              
    549              if(AF_DataRequest( &dst_addr,
    550                                 &SampleApp_epDesc,
    551                                 SAMPLEAPP_P2P_CLUSTERID,
    552                                 osal_strlen( strBuf ),
                                                     ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"

      static byte  TransID;
                   ^
"F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",542  Warning[Pe177]: 
          variable "TransID" was declared but never referenced
    553                                 strBuf,
    554                                 &SampleApp_TransID,
    555                                 AF_DISCV_ROUTE,
    556                                 AF_DEFAULT_RADIUS
    557                               )==afStatus_SUCCESS)
   \   00004A                ; Setup parameters for call to function AF_DataRequest
   \   00004A   75..1E       MOV     ?V0 + 0,#0x1e
   \   00004D   78..         MOV     R0,#?V0 + 0
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000052   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000055   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000058   78..         MOV     R0,#?V0 + 0
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005D   7403         MOV     A,#0x3
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   8582..       MOV     ?V0 + 0,DPL
   \   000065   8583..       MOV     ?V0 + 1,DPH
   \   000068   78..         MOV     R0,#?V0 + 0
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006D                ; Setup parameters for call to function osal_strlen
   \   00006D   7405         MOV     A,#0x5
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   AA82         MOV     R2,DPL
   \   000074   AB83         MOV     R3,DPH
   \   000076   12....       LCALL   ??osal_strlen?relay
   \   000079   8A..         MOV     ?V0 + 0,R2
   \   00007B   8B..         MOV     ?V0 + 1,R3
   \   00007D   78..         MOV     R0,#?V0 + 0
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   75..03       MOV     ?V0 + 0,#0x3
   \   000085   75..00       MOV     ?V0 + 1,#0x0
   \   000088   78..         MOV     R0,#?V0 + 0
   \   00008A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008D   7920         MOV     R1,#0x20
   \   00008F   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000091   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000093   740B         MOV     A,#0xb
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   AA82         MOV     R2,DPL
   \   00009A   AB83         MOV     R3,DPH
   \   00009C   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00009F   12....       LCALL   ?DEALLOC_XSTACK8
    558              {
    559              }
    560              else
    561              {
    562                // Error occurred in request to send.
    563              }
    564          }
   \   0000A2   740E         MOV     A,#0xe
   \   0000A4   02....       LJMP    ?Subroutine0 & 0xFFFF
    565          
    566          /*********************************************************************
    567           * @fn      SampleApp_Send_CONTROL_Message
    568           *
    569           * @brief   point to point.
    570           *
    571           * @param   none
    572           *
    573           * @return  none
    574           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    575          void SampleApp_Send_Control_Message( uint8 *data )
   \                     SampleApp_Send_Control_Message:
    576          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    577            //HalUARTWrite(0, "in", 2);
    578            
    579            //uint8 IEEE_ADDR[8];
    580            //uint8 temp[9];
    581            //HalUARTRead(0,temp,9);
    582           
    583            //for(uint8 i=0;i<8;i++)
    584            //{
    585            //  IEEE_ADDR[i]=temp[i];
    586            //}
    587            //APSME_LookupNwkAddr ( IEEE_ADDR, &SampleApp_Control_DstAddr.addr.shortAddr);
    588            //SampleApp_Control_DstAddr.addr.shortAddr = pkt->srcAddr.addr.shortAddr;
    589            if (SampleApp_Control_DstAddr.addr.shortAddr!=0)
   \   000005   90....       MOV     DPTR,#SampleApp_Control_DstAddr
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   49           ORL     A,R1
   \   00000F   6059         JZ      ??SampleApp_Send_Control_Message_0
    590            {
    591                if ( AF_DataRequest( &SampleApp_Control_DstAddr, &SampleApp_epDesc,
    592                                     SAMPLEAPP_CONTROL_CLUSTERID,
    593                                     1,
    594                                     data,
    595                                     &SampleApp_TransID,
    596                                     AF_DISCV_ROUTE,
    597                                     AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000011                ; Setup parameters for call to function AF_DataRequest
   \   000011   75..1E       MOV     ?V0 + 0,#0x1e
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000019   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00001C   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00001F   78..         MOV     R0,#?V0 + 0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   8A..         MOV     ?V0 + 0,R2
   \   000026   8B..         MOV     ?V0 + 1,R3
   \   000028   78..         MOV     R0,#?V0 + 0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002D   75..01       MOV     ?V0 + 0,#0x1
   \   000030   75..00       MOV     ?V0 + 1,#0x0
   \   000033   78..         MOV     R0,#?V0 + 0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   75..04       MOV     ?V0 + 0,#0x4
   \   00003B   78..         MOV     R0,#?V0 + 0
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   7920         MOV     R1,#0x20
   \   000042   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000044   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000046   7A..         MOV     R2,#SampleApp_Control_DstAddr & 0xff
   \   000048   7B..         MOV     R3,#(SampleApp_Control_DstAddr >> 8) & 0xff
   \   00004A   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000050   E9           MOV     A,R1
   \   000051   700A         JNZ     ??SampleApp_Send_Control_Message_1
    598                {
    599                  HalUARTWrite(0, "ok", 2); 
   \   000053                ; Setup parameters for call to function HalUARTWrite
   \   000053   7C02         MOV     R4,#0x2
   \   000055   7D00         MOV     R5,#0x0
   \   000057   7A..         MOV     R2,#`?<Constant "ok">` & 0xff
   \   000059   7B..         MOV     R3,#(`?<Constant "ok">` >> 8) & 0xff
   \   00005B   8008         SJMP    ??SampleApp_Send_Control_Message_2
    600                }
    601                else
    602                {
    603                  HalUARTWrite(0, "fail", 4); 
   \                     ??SampleApp_Send_Control_Message_1:
   \   00005D                ; Setup parameters for call to function HalUARTWrite
   \   00005D   7C04         MOV     R4,#0x4
   \   00005F   7D00         MOV     R5,#0x0
   \   000061   7A..         MOV     R2,#`?<Constant "fail">` & 0xff
   \   000063   7B..         MOV     R3,#(`?<Constant "fail">` >> 8) & 0xff
   \                     ??SampleApp_Send_Control_Message_2:
   \   000065   7900         MOV     R1,#0x0
   \   000067   12....       LCALL   ??HalUARTWrite?relay
    604                  // Error occurred in request to send.
    605                }
    606            }
    607          
    608          }
   \                     ??SampleApp_Send_Control_Message_0:
   \   00006A   02....       LJMP    ??Subroutine5_0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AppTitle>`:
   \   000000   414C4432     DB "ALD2530 P2P"
   \            35333020
   \            50325000

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_Control_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_Control_Message

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "1">`:
   \   000000   3100         DB "1"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ok">`:
   \   000000   6F6B00       DB "ok"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "fail">`:
   \   000000   6661696C     DB "fail"
   \            00      
    609          /*********************************************************************
    610          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     22
       -> HalUARTWrite                  0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             0      0     22
       -> HalUARTWrite                  0      0     20
       -> HalLedBlink                   0      0     20
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> SampleApp_Send_P2P_Message
                                        0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     22
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     19
       -> AF_DataRequest                0      0     38
     SampleApp_Send_Control_Message     0      0     19
       -> AF_DataRequest                0      0     38
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
     SampleApp_Send_P2P_Message         2      0     45
       -> NLME_GetShortAddr             0      0     48
       -> osal_strlen                   0      0     58
       -> AF_DataRequest                0      0     66


   Segment part sizes:

     Function/Label                         Bytes
     --------------                         -----
     AppTitle                                 12
     SampleApp_ClusterList                     8
     SampleApp_SimpleDesc                     12
     SampleApp_epDesc                          6
     SampleApp_TaskID                          1
     SampleApp_NwkState                        1
     SampleApp_TransID                         1
     SampleApp_Periodic_DstAddr               12
     SampleApp_Flash_DstAddr                  12
     SampleApp_P2P_DstAddr                    12
     SampleApp_Control_DstAddr                12
     SampleApp_Group                          18
     SampleAppPeriodicCounter                  1
     SampleAppFlashCounter                     1
     SampleApp_Init                          181
     ?Subroutine2                              2
     ??Subroutine4_0                           6
     SampleApp_ProcessEvent                  162
     SampleApp_HandleKeys                     67
     ??Subroutine5_0                           5
     SampleApp_MessageMSGCB                  144
     ?Subroutine1                             12
     ?Subroutine0                              3
     SampleApp_SendPeriodicMessage            67
     ?Subroutine3                              6
     SampleApp_SendFlashMessage              116
     SampleApp_Send_P2P_Message              167
     SampleApp_Send_Control_Message          109
     ?<Initializer for AppTitle>              12
     ??SampleApp_Init?relay                    6
     ??SampleApp_ProcessEvent?relay            6
     ??SampleApp_HandleKeys?relay              6
     ??SampleApp_MessageMSGCB?relay            6
     ??SampleApp_SendPeriodicMessage?relay     6
     ??SampleApp_SendFlashMessage?relay        6
     ??SampleApp_Send_P2P_Message?relay        6
     ??SampleApp_Send_Control_Message?relay    6
     ?<Constant "Group 1">                     8
     ?<Constant "SampleApp">                  10
     ?<Constant "1">                           2
     ?<Constant {0}>                           2
     ?<Constant "ok">                          3
     ?<Constant "fail">                        5

 
 1 047 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
    12 bytes in segment XDATA_I
    12 bytes in segment XDATA_ID
    50 bytes in segment XDATA_ROM_C
    77 bytes in segment XDATA_Z
 
 1 107 bytes of CODE  memory
    50 bytes of CONST memory
    89 bytes of XDATA memory

Errors: none
Warnings: 2
