###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         20/Apr/2021  22:31:08 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ              #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Components\stack\zdo\ZDApp.c              #
#    Command line       =  -f "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ          #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\Tools\CC2530DB\f8wCoord.cfg"            #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ          #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\Tools\CC2530DB\f8wConfig.cfg"           #
#                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0      #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "F:\CC2530\CC2530-2019£¨ÖØÒ #
#                          ª£©45\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_Èë #
#                          ÍøÁ÷³Ì\ZStack-2.5.1a\Components\stack\zdo\ZDApp.c" #
#                           -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D        #
#                          xMT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D NV_INIT -D  #
#                          NV_RESTORE=1 -lC "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\ #
#                          µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì #
#                          \ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\CoordinatorEB\List\" -lA                   #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\CoordinatorEB\List\" --diag_suppress             #
#                          Pe001,Pa010 -o "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ #
#                          5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\Z #
#                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\CoordinatorEB\Obj\" -e --no_code_motion      #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ          #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\" -I "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ      #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\Source\" -I "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\ #
#                          µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì #
#                          \ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\ZMain\TI2530DB\" -I               #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\hal\include\" -I       #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\hal\target\CC2530EB\"  #
#                          -I "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ          #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\mac\include\" -I       #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\mac\high_level\" -I    #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\mac\low_level\srf04\"  #
#                          -I "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ          #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\mac\low_level\srf04\si #
#                          ngle_chip\" -I "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ #
#                          5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\Z #
#                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\..\..\..\..\..\Components\mt\" -I            #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\osal\include\" -I      #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\services\saddr\" -I    #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\services\sdata\" -I    #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\af\" -I          #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\nwk\" -I         #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\sapi\" -I        #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\sec\" -I         #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\sys\" -I         #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\zdo\" -I         #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\zmac\" -I              #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\zmac\f8w\" -Ohz        #
#                          --require_prototypes                               #
#    List file          =  F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ              #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\CoordinatorEB\List\ZDApp.lst                     #
#    Object file        =  F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ              #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\CoordinatorEB\Obj\ZDApp.r51                      #
#                                                                             #
#                                                                             #
###############################################################################

F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStack-2.5.1a\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2012-02-16 16:04:32 -0800 (Thu, 16 Feb 2012) $
      4            Revision:       $Revision: 29348 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the user can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "ZMac.h"
     47          #include "OSAL.h"
     48          #include "OSAL_Tasks.h"
     49          #include "OSAL_PwrMgr.h"
     50          #include "OSAL_Nv.h"
     51          #include "AF.h"
     52          #include "APSMEDE.h"
     53          #include "NLMEDE.h"
     54          #include "AddrMgr.h"
     55          #include "ZDProfile.h"
     56          #include "ZDObject.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "DebugTrace.h"
     61          #include "nwk_util.h"
     62          #include "OnBoard.h"
     63          #include "ZGlobals.h"
     64          #include "ZDNwkMgr.h"
     65          #include "rtg.h"
     66          
     67          #include "ssp.h"
     68          
     69          /* HAL */
     70          #include "hal_led.h"
     71          #include "hal_lcd.h"
     72          #include "hal_key.h"
     73          
     74          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     75            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     76          #endif
     77          
     78          /*********************************************************************
     79           * CONSTANTS
     80           */
     81          
     82          #if !defined( NWK_START_DELAY )
     83            #define NWK_START_DELAY             100   // in milliseconds
     84          #endif
     85          
     86          #if !defined( LEAVE_RESET_DELAY )
     87            #define LEAVE_RESET_DELAY           5000  // in milliseconds
     88          #endif
     89          
     90          // Init ZDO, but hold and wait for application to start the joining or
     91          // forming network
     92          #define ZDO_INIT_HOLD_NWK_START       0xFFFF
     93          
     94          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
     95            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
     96          #endif
     97          
     98          #if !defined( BEACON_REQUEST_DELAY )
     99            #define BEACON_REQUEST_DELAY        100   // in milliseconds
    100          #endif
    101          
    102          #if !defined( BEACON_REQ_DELAY_MASK )
    103            #define BEACON_REQ_DELAY_MASK       0x007F
    104          #endif
    105          
    106          #define MAX_RESUME_RETRY            3
    107          
    108          #define MAX_DEVICE_UNAUTH_TIMEOUT   5000  // 5 seconds
    109          
    110          // Beacon Order Settings (see NLMEDE.h)
    111          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    112          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    113          
    114          #if !defined( MAX_NWK_FRAMECOUNTER_CHANGES )
    115            // The number of times the frame counter can change before
    116            // saving to NV
    117            #define MAX_NWK_FRAMECOUNTER_CHANGES    1000
    118          #endif
    119          
    120          // Leave control bits
    121          #define ZDAPP_LEAVE_CTRL_INIT 0
    122          #define ZDAPP_LEAVE_CTRL_SET  1
    123          #define ZDAPP_LEAVE_CTRL_RA   2
    124          
    125          // Address Manager Stub Implementation
    126          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    127          
    128          
    129          #if !defined ZDO_NV_SAVE_RFDs
    130          #define ZDO_NV_SAVE_RFDs  TRUE
    131          #endif
    132          
    133          // Delay time before updating NWK NV data to force fewer writes during high activity.
    134          #if ZDO_NV_SAVE_RFDs
    135          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    136          #else
    137          #define ZDAPP_UPDATE_NWK_NV_TIME 65000
    138          #endif
    139          
    140          /*********************************************************************
    141           * GLOBAL VARIABLES
    142           */
    143          
    144          #if defined( LCD_SUPPORTED )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145            uint8 MatchRsps = 0;
   \                     MatchRsps:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    146          #endif
    147          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    148          uint8 zdoDiscCounter = 1;
   \                     zdoDiscCounter:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zdoDiscCounter>`
   \   000001                REQUIRE __INIT_XDATA_I
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    151          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    156          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    157          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          uint16 nwkFrameCounterChanges = 0;
   \                     nwkFrameCounterChanges:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    159          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    160          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    162          
    163          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    164          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    165          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    166          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 14
   \   00000E                REQUIRE __INIT_XDATA_Z
    167          
    168          /*********************************************************************
    169           * EXTERNAL VARIABLES
    170           */
    171          
    172          /*********************************************************************
    173           * EXTERNAL FUNCTIONS
    174           */
    175          
    176          /*********************************************************************
    177           * LOCAL FUNCTIONS
    178           */
    179          
    180          void ZDApp_NetworkStartEvt( void );
    181          void ZDApp_DeviceAuthEvt( void );
    182          void ZDApp_SaveNetworkStateEvt( void );
    183          
    184          uint8 ZDApp_ReadNetworkRestoreState( void );
    185          uint8 ZDApp_RestoreNetworkState( void );
    186          void ZDAppDetermineDeviceType( void );
    187          void ZDApp_InitUserDesc( void );
    188          void ZDAppCheckForHoldKey( void );
    189          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    190          void ZDApp_ProcessNetworkJoin( void );
    191          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    192          uint8 ZDApp_RestoreNwkKey( void );
    193          networkDesc_t* ZDApp_NwkDescListProcessing(void);
    194          
    195          void ZDApp_SecInit( uint8 state );
    196          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    197          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    198          
    199          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    200          
    201          void ZDApp_ResetTimerStart( uint16 delay );
    202          void ZDApp_ResetTimerCancel( void );
    203          void ZDApp_LeaveCtrlInit( void );
    204          void ZDApp_LeaveCtrlSet( uint8 ra );
    205          uint8 ZDApp_LeaveCtrlBypass( void );
    206          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    207          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
    208                                  uint8 removeChildren );
    209          void ZDApp_NodeProfileSync( uint8 stackProfile );
    210          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    211          void ZDApp_RegisterCBs( void );
    212          void ZDApp_InitZdoCBFunc(void);
    213          
    214          /*********************************************************************
    215           * LOCAL VARIABLES
    216           */
    217          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    218          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    219          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    220          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    221          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    222          
    223          #if defined( HOLD_AUTO_START )
    224            devStates_t devState = DEV_HOLD;
    225          #else

   \                                 In  segment XDATA_I, align 1, keep-with-next
    226            devStates_t devState = DEV_INIT;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for devState>`
   \   000001                REQUIRE __INIT_XDATA_I
    227          #endif
    228          
    229          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )
    230            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
    231            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    232                                  // to parent. Set to make the device do an Orphan scan.
    233          #else
    234            // Set the default to coodinator

   \                                 In  segment XDATA_I, align 1, keep-with-next
    235            devStartModes_t devStartMode = MODE_HARD;
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for devStartMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    236          #endif
    237          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    238          uint8 retryCnt;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    239          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    240          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000006                REQUIRE __INIT_XDATA_I
    241          {
    242            ZDO_EP,
    243            &ZDAppTaskID,
    244            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    245            (afNetworkLatencyReq_t)0            // No Network Latency req
    246          };
    247          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    248          uint16 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
    249          
    250          /*********************************************************************
    251           * @fn      ZDApp_Init
    252           *
    253           * @brief   ZDApp Initialization function.
    254           *
    255           * @param   task_id - ZDApp Task ID
    256           *
    257           * @return  None
    258           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    259          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    260          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    261            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    262            // Save the task ID
    263            ZDAppTaskID = task_id;
   \   000006   90....       MOV     DPTR,#ZDAppTaskID
   \   000009   F0           MOVX    @DPTR,A
    264          
    265            // Initialize the ZDO global device short address storage
    266            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   00000A   90....       MOV     DPTR,#ZDAppNwkAddr + 8
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    267            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000010   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000013   74FE         MOV     A,#-0x2
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   04           INC     A
   \   000018   F0           MOVX    @DPTR,A
    268            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL   ??NLME_GetExtAddr?relay
    269          
    270            // Check for manual "Hold Auto Start"
    271            ZDAppCheckForHoldKey();
   \   00001C                ; Setup parameters for call to function ZDAppCheckForHoldKey
   \   00001C   12....       LCALL   ??ZDAppCheckForHoldKey?relay
    272          
    273            // Initialize ZDO items and setup the device - type of device to create.
    274            ZDO_Init();
   \   00001F                ; Setup parameters for call to function ZDO_Init
   \   00001F   12....       LCALL   ??ZDO_Init?relay
    275          
    276            // Register the endpoint description with the AF
    277            // This task doesn't have a Simple description, but we still need
    278            // to register the endpoint.
    279            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   000022                ; Setup parameters for call to function afRegister
   \   000022   7A..         MOV     R2,#ZDApp_epDesc & 0xff
   \   000024   7B..         MOV     R3,#(ZDApp_epDesc >> 8) & 0xff
   \   000026   12....       LCALL   ??afRegister?relay
    280          
    281          #if defined( ZDO_USERDESC_RESPONSE )
    282            ZDApp_InitUserDesc();
    283          #endif // ZDO_USERDESC_RESPONSE
    284          
    285            // Start the device?
    286            if ( devState != DEV_HOLD )
   \   000029   90....       MOV     DPTR,#devState
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6009         JZ      ??ZDApp_Init_0
    287            {
    288              ZDOInitDevice( 0 );
   \                     ??ZDApp_Init_1:
   \   00002F                ; Setup parameters for call to function ZDOInitDevice
   \   00002F   7A00         MOV     R2,#0x0
   \   000031   7B00         MOV     R3,#0x0
   \   000033   12....       LCALL   ??ZDOInitDevice?relay
   \   000036   801A         SJMP    ??ZDApp_Init_2
    289            }
    290            else
    291            {
    292              networkStateNV = ZDApp_ReadNetworkRestoreState();
    293              if(networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE)
   \                     ??ZDApp_Init_0:
   \   000038                ; Setup parameters for call to function ZDApp_ReadNetworkRestoreState
   \   000038   12....       LCALL   ??ZDApp_ReadNetworkRestoreState?relay
   \   00003B   E9           MOV     A,R1
   \   00003C   60F1         JZ      ??ZDApp_Init_1
    294                ZDOInitDevice( 0 );
    295              else
    296              {
    297                ZDOInitDevice( ZDO_INIT_HOLD_NWK_START );
   \   00003E                ; Setup parameters for call to function ZDOInitDevice
   \   00003E   7AFF         MOV     R2,#-0x1
   \   000040   7BFF         MOV     R3,#-0x1
   \   000042   12....       LCALL   ??ZDOInitDevice?relay
    298                // Blink LED to indicate HOLD_START
    299                HalLedBlink ( HAL_LED_1, 0, 50, 500 );
   \   000045                ; Setup parameters for call to function HalLedBlink
   \   000045   7CF4         MOV     R4,#-0xc
   \   000047   7D01         MOV     R5,#0x1
   \   000049   7B32         MOV     R3,#0x32
   \   00004B   7A00         MOV     R2,#0x0
   \   00004D   7901         MOV     R1,#0x1
   \   00004F   12....       LCALL   ??HalLedBlink?relay
    300              }
    301            }
    302          
    303            // Initialize the ZDO callback function pointers zdoCBFunc[]
    304            ZDApp_InitZdoCBFunc();
   \                     ??ZDApp_Init_2:
   \   000052                ; Setup parameters for call to function ZDApp_InitZdoCBFunc
   \   000052   12....       LCALL   ??ZDApp_InitZdoCBFunc?relay
    305          
    306            ZDApp_RegisterCBs();
   \   000055                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   000055   12....       LCALL   ??ZDApp_RegisterCBs?relay
    307          } /* ZDApp_Init() */
   \   000058   02....       LJMP    ??Subroutine46_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    308          
    309          /*********************************************************************
    310           * @fn          ZDApp_SecInit
    311           *
    312           * @brief       ZDApp initialize security.
    313           *
    314           * @param       state - device initialization state
    315           *
    316           * @return      none
    317           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    318          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    319          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    320            uint8 zgPreConfigKey[SEC_KEY_LEN];
    321          
    322            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    323            {
    324              // Set the Trust Center bit
    325              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
    326            }
    327          
    328            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
    329            {
    330              ZDO_Config_Node_Descriptor.CapabilityFlags |= CAPINFO_SECURITY_CAPABLE;
    331            }
    332          
    333            // Initialize ZigBee Device Security Manager
    334            ZDSecMgrInit(state);
   \   000005                ; Setup parameters for call to function ZDSecMgrInit
   \   000005   12....       LCALL   ??ZDSecMgrInit?relay
    335          
    336            if ( ZG_SECURE_ENABLED )
    337            {
    338              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
    339              {
    340                nwkFrameCounter = 0;
    341          
    342                if( _NIB.nwkKeyLoaded == FALSE )
    343                {
    344                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    345                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
    346                  {
    347                      ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
    348                      SSP_UpdateNwkKey( zgPreConfigKey, 0);
    349                      SSP_SwitchNwkKey( 0 );
    350          
    351                      // clear local copy of key
    352                      osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
    353                  }
    354                }
    355              }
    356            }
    357          }
   \   000008   02....       LJMP    ??Subroutine46_0 & 0xFFFF
    358          
    359          /*********************************************************************
    360           * @fn      ZDApp_event_loop()
    361           *
    362           * @brief   Main event loop for Zigbee device objects task. This function
    363           *          should be called at periodic intervals.
    364           *
    365           * @param   task_id - Task ID
    366           * @param   events  - Bitmap of events
    367           *
    368           * @return  none
    369           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    370          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    371          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    372            uint8 *msg_ptr;
    373          
    374            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7033         JNZ     ??ZDApp_event_loop_0
    375            {
    376              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
    377              {
    378                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
    379          
    380                // Release the memory
    381                osal_msg_deallocate( msg_ptr );
    382              }
    383          
    384              // Return unprocessed events
    385              return (events ^ SYS_EVENT_MSG);
    386            }
    387          
    388            if ( events & ZDO_NETWORK_INIT )
   \   00000D   EE           MOV     A,R6
   \   00000E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000010   5047         JNC     ??ZDApp_event_loop_1
    389            {
    390              // Initialize apps and start the network
    391              devState = DEV_INIT;
   \   000012   90....       MOV     DPTR,#devState
   \   000015   7401         MOV     A,#0x1
   \   000017   12....       LCALL   ??Subroutine42_0 & 0xFFFF
    392              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
    393          
    394              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    395                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \                     ??CrossCallReturnLabel_69:
   \   00001A                ; Setup parameters for call to function ZDO_StartDevice
   \   00001A   7C0F         MOV     R4,#0xf
   \   00001C   7B0F         MOV     R3,#0xf
   \   00001E   90....       MOV     DPTR,#devStartMode
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FA           MOV     R2,A
   \   000023   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000026   E0           MOVX    A,@DPTR
   \   000027   5407         ANL     A,#0x7
   \   000029   F9           MOV     R1,A
   \   00002A   12....       LCALL   ??ZDO_StartDevice?relay
    396          
    397              // Return unprocessed events
    398              return (events ^ ZDO_NETWORK_INIT);
   \   00002D   EE           MOV     A,R6
   \   00002E   6401         XRL     A,#0x1
   \                     ??ZDApp_event_loop_2:
   \   000030   FA           MOV     R2,A
   \   000031   EF           MOV     A,R7
   \                     ??ZDApp_event_loop_3:
   \   000032   FB           MOV     R3,A
   \   000033   02....       LJMP    ??ZDApp_event_loop_4 & 0xFFFF
    399            }
   \                     ??ZDApp_event_loop_5:
   \   000036                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   000036   12....       LCALL   ??ZDApp_ProcessOSALMsg?relay
   \   000039                ; Setup parameters for call to function osal_msg_deallocate
   \   000039   AA..         MOV     R2,?V0 + 0
   \   00003B   AB..         MOV     R3,?V0 + 1
   \   00003D   12....       LCALL   ??osal_msg_deallocate?relay
   \                     ??ZDApp_event_loop_0:
   \   000040                ; Setup parameters for call to function osal_msg_receive
   \   000040   90....       MOV     DPTR,#ZDAppTaskID
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F9           MOV     R1,A
   \   000045   12....       LCALL   ??osal_msg_receive?relay
   \   000048   8A..         MOV     ?V0 + 0,R2
   \   00004A   8B..         MOV     ?V0 + 1,R3
   \   00004C   A9..         MOV     R1,?V0 + 1
   \   00004E   EA           MOV     A,R2
   \   00004F   49           ORL     A,R1
   \   000050   70E4         JNZ     ??ZDApp_event_loop_5
   \   000052   EE           MOV     A,R6
   \   000053   FA           MOV     R2,A
   \   000054   EF           MOV     A,R7
   \   000055   6480         XRL     A,#0x80
   \   000057   80D9         SJMP    ??ZDApp_event_loop_3
    400          
    401            if ( ZSTACK_ROUTER_BUILD )
    402            {
    403              if ( events & ZDO_NETWORK_START )
   \                     ??ZDApp_event_loop_1:
   \   000059   5402         ANL     A,#0x2
   \   00005B   6008         JZ      ??ZDApp_event_loop_6
    404              {
    405                ZDApp_NetworkStartEvt();
   \   00005D                ; Setup parameters for call to function ZDApp_NetworkStartEvt
   \   00005D   12....       LCALL   ??ZDApp_NetworkStartEvt?relay
    406          
    407                // Return unprocessed events
    408                return (events ^ ZDO_NETWORK_START);
   \   000060   EE           MOV     A,R6
   \   000061   6402         XRL     A,#0x2
   \                     ??ZDApp_event_loop_7:
   \   000063   80CB         SJMP    ??ZDApp_event_loop_2
    409              }
    410          
    411              if ( events & ZDO_ROUTER_START )
   \                     ??ZDApp_event_loop_6:
   \   000065   EE           MOV     A,R6
   \   000066   5420         ANL     A,#0x20
   \   000068   601E         JZ      ??ZDApp_event_loop_8
    412              {
    413                if ( nwkStatus == ZSuccess )
   \   00006A   90....       MOV     DPTR,#nwkStatus
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   7010         JNZ     ??ZDApp_event_loop_9
    414                {
    415                  if ( devState == DEV_END_DEVICE )
   \   000070   90....       MOV     DPTR,#devState
   \   000073   E0           MOVX    A,@DPTR
   \   000074   6406         XRL     A,#0x6
   \   000076   7003         JNZ     ??ZDApp_event_loop_10
    416                    devState = DEV_ROUTER;
   \   000078   7407         MOV     A,#0x7
   \   00007A   F0           MOVX    @DPTR,A
    417          
    418                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_event_loop_10:
   \   00007B                ; Setup parameters for call to function osal_pwrmgr_device
   \   00007B   7900         MOV     R1,#0x0
   \   00007D   12....       LCALL   ??osal_pwrmgr_device?relay
    419                }
    420                else
    421                {
    422                  // remain as end device!!
    423                }
    424                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??ZDApp_event_loop_9:
   \   000080                ; Setup parameters for call to function osal_set_event
   \   000080   12....       LCALL   ?Subroutine13 & 0xFFFF
    425          
    426                // Return unprocessed events
    427                return (events ^ ZDO_ROUTER_START);
   \                     ??CrossCallReturnLabel_55:
   \   000083   EE           MOV     A,R6
   \   000084   6420         XRL     A,#0x20
   \   000086   80A8         SJMP    ??ZDApp_event_loop_2
    428              }
    429            }
    430          
    431            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_8:
   \   000088   EE           MOV     A,R6
   \   000089   5410         ANL     A,#0x10
   \   00008B   6023         JZ      ??ZDApp_event_loop_11
    432            {
    433              ZDO_UpdateNwkStatus( devState );
   \   00008D                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   00008D   90....       MOV     DPTR,#devState
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F9           MOV     R1,A
   \   000092   12....       LCALL   ??ZDO_UpdateNwkStatus?relay
    434          
    435              // At start up, do one MTO route discovery if the device is a concentrator
    436              if ( zgConcentratorEnable == TRUE )
   \   000095   90....       MOV     DPTR,#zgConcentratorEnable
   \   000098   E0           MOVX    A,@DPTR
   \   000099   6401         XRL     A,#0x1
   \   00009B   700E         JNZ     ??CrossCallReturnLabel_66
    437              {
    438                // Start next event
    439                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   00009D                ; Setup parameters for call to function osal_start_timerEx
   \   00009D   7C64         MOV     R4,#0x64
   \   00009F   7D00         MOV     R5,#0x0
   \   0000A1   7A00         MOV     R2,#0x0
   \   0000A3   7B08         MOV     R3,#0x8
   \   0000A5   90....       MOV     DPTR,#NWK_TaskID
   \   0000A8   12....       LCALL   ??Subroutine39_0 & 0xFFFF
    440              }
    441          
    442              // Return unprocessed events
    443              return (events ^ ZDO_STATE_CHANGE_EVT);
   \                     ??CrossCallReturnLabel_66:
   \   0000AB   EE           MOV     A,R6
   \   0000AC   6410         XRL     A,#0x10
   \   0000AE   8080         SJMP    ??ZDApp_event_loop_2
    444            }
    445          
    446            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_11:
   \   0000B0   EE           MOV     A,R6
   \   0000B1   5408         ANL     A,#0x8
   \   0000B3   6006         JZ      ??ZDApp_event_loop_12
    447            {
    448              // User defined logic
    449          
    450              // Return unprocessed events
    451              return (events ^ ZDO_COMMAND_CNF);
   \   0000B5   EE           MOV     A,R6
   \   0000B6   6408         XRL     A,#0x8
   \   0000B8   FA           MOV     R2,A
   \   0000B9   8023         SJMP    ??ZDApp_event_loop_4
    452            }
    453          
    454            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_12:
   \   0000BB   EF           MOV     A,R7
   \   0000BC   5402         ANL     A,#0x2
   \   0000BE   600B         JZ      ??ZDApp_event_loop_13
    455            {
    456              ZDApp_SaveNetworkStateEvt();
   \   0000C0                ; Setup parameters for call to function ZDApp_SaveNetworkStateEvt
   \   0000C0   12....       LCALL   ??ZDApp_SaveNetworkStateEvt?relay
    457          
    458              // Return unprocessed events
    459              return (events ^ ZDO_NWK_UPDATE_NV);
   \   0000C3   EE           MOV     A,R6
   \   0000C4   FA           MOV     R2,A
   \   0000C5   EF           MOV     A,R7
   \   0000C6   6402         XRL     A,#0x2
   \   0000C8   02....       LJMP    ??ZDApp_event_loop_3 & 0xFFFF
    460            }
    461          
    462            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_13:
   \   0000CB   EE           MOV     A,R6
   \   0000CC   5404         ANL     A,#0x4
   \   0000CE   600A         JZ      ??ZDApp_event_loop_14
    463            {
    464          #ifdef ZBA_FALLBACK_NWKKEY
    465              if ( devState == DEV_END_DEVICE_UNAUTH )
    466              {
    467                ZDSecMgrFallbackNwkKey();
    468              }
    469              else
    470          #endif
    471              {
    472                // Set the NV startup option to force a "new" join.
    473                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   0000D0                ; Setup parameters for call to function zgWriteStartupOptions
   \   0000D0   7A02         MOV     R2,#0x2
   \   0000D2   79FF         MOV     R1,#-0x1
   \   0000D4   12....       LCALL   ??zgWriteStartupOptions?relay
    474          
    475                // The device has been in the UNAUTH state, so reset
    476                // Note: there will be no return from this call
    477                SystemResetSoft();
   \   0000D7                ; Setup parameters for call to function Onboard_soft_reset
   \   0000D7   12....       LCALL   Onboard_soft_reset & 0xFFFF
    478              }
    479            }
    480          
    481            if ( ZG_SECURE_ENABLED )
    482            {
    483              return ( ZDApp_ProcessSecEvent( task_id, events ) );
    484            }
    485            else
    486            {
    487              // Discard or make more handlers
    488              return 0;
   \                     ??ZDApp_event_loop_14:
   \   0000DA   7A00         MOV     R2,#0x0
   \   0000DC   7B00         MOV     R3,#0x0
    489            }
   \                     ??ZDApp_event_loop_4:
   \   0000DE   02....       LJMP    ??Subroutine52_0 & 0xFFFF
    490          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   7A10         MOV     R2,#0x10
   \   000002                REQUIRE ??Subroutine37_0
   \   000002                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#ZDAppTaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_set_event?relay
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??osal_start_timerEx?relay
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_set_event
   \   000001                ; Setup parameters for call to function osal_set_event
   \   000001                ; Setup parameters for call to function osal_set_event
   \   000001   7A10         MOV     R2,#0x10
   \   000003   7B00         MOV     R3,#0x0
   \   000005   90....       MOV     DPTR,#ZDAppTaskID
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F9           MOV     R1,A
   \   00000A   12....       LCALL   ??osal_set_event?relay
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    491          
    492          /*********************************************************************
    493           * @fn      ZDApp_ProcessSecEvent()
    494           *
    495           * @brief   Process incoming security events.
    496           *
    497           * @param   task_id - Task ID
    498           * @param   events  - Bitmap of events
    499           *
    500           * @return  none
    501           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    502          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    503          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    504            (void)task_id;  // Intentionally unreferenced parameter
    505          
    506            if ( ZSTACK_ROUTER_BUILD )
    507            {
    508              if ( events & ZDO_NEW_DEVICE )
   \   000009   EE           MOV     A,R6
   \   00000A   5440         ANL     A,#0x40
   \   00000C   6019         JZ      ??ZDApp_ProcessSecEvent_0
    509              {
    510                // process the new device event
    511                if ( ZDSecMgrNewDeviceEvent() == TRUE )
   \   00000E                ; Setup parameters for call to function ZDSecMgrNewDeviceEvent
   \   00000E   12....       LCALL   ??ZDSecMgrNewDeviceEvent?relay
   \   000011   E9           MOV     A,R1
   \   000012   6401         XRL     A,#0x1
   \   000014   7009         JNZ     ??CrossCallReturnLabel_63
    512                {
    513                  osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 1000 );
   \   000016                ; Setup parameters for call to function osal_start_timerEx
   \   000016   7CE8         MOV     R4,#-0x18
   \   000018   7D03         MOV     R5,#0x3
   \   00001A   7A40         MOV     R2,#0x40
   \   00001C   12....       LCALL   ?Subroutine21 & 0xFFFF
    514                }
    515          
    516                // Return unprocessed events
    517                return (events ^ ZDO_NEW_DEVICE);
   \                     ??CrossCallReturnLabel_63:
   \   00001F   EE           MOV     A,R6
   \   000020   6440         XRL     A,#0x40
   \                     ??ZDApp_ProcessSecEvent_1:
   \   000022   FA           MOV     R2,A
   \   000023   EF           MOV     A,R7
   \                     ??ZDApp_ProcessSecEvent_2:
   \   000024   FB           MOV     R3,A
   \   000025   805C         SJMP    ??ZDApp_ProcessSecEvent_3
    518              }
    519            }
    520          
    521            if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH)
    522                || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
    523            {
    524              if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    525              {
    526                if ( events & ZDO_SECMGR_EVENT )
    527                {
    528                  ZDSecMgrEvent();
    529          
    530                  // Return unprocessed events
    531                  return (events ^ ZDO_SECMGR_EVENT);
    532                }
    533              }
    534            }
    535          
    536            if ( events & ZDO_DEVICE_AUTH )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   000027   EE           MOV     A,R6
   \   000028   5480         ANL     A,#0x80
   \   00002A   6008         JZ      ??ZDApp_ProcessSecEvent_4
    537            {
    538              ZDApp_DeviceAuthEvt();
   \   00002C                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   00002C   12....       LCALL   ??ZDApp_DeviceAuthEvt?relay
    539          
    540              // Return unprocessed events
    541              return (events ^ ZDO_DEVICE_AUTH);
   \   00002F   EE           MOV     A,R6
   \   000030   6480         XRL     A,#0x80
   \   000032   80EE         SJMP    ??ZDApp_ProcessSecEvent_1
    542            }
    543          
    544            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_4:
   \   000034   EF           MOV     A,R7
   \   000035   5404         ANL     A,#0x4
   \   000037   6028         JZ      ??ZDApp_ProcessSecEvent_5
    545            {
    546              if ( nwkFrameCounterChanges++ > MAX_NWK_FRAMECOUNTER_CHANGES )
   \   000039   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00003C   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   00003F   E8           MOV     A,R0
   \   000040   2401         ADD     A,#0x1
   \   000042   FA           MOV     R2,A
   \   000043   E9           MOV     A,R1
   \   000044   3400         ADDC    A,#0x0
   \   000046   FB           MOV     R3,A
   \   000047   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00004A   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   00004D   C3           CLR     C
   \   00004E   E8           MOV     A,R0
   \   00004F   94E9         SUBB    A,#-0x17
   \   000051   E9           MOV     A,R1
   \   000052   9403         SUBB    A,#0x3
   \   000054   4003         JC      ??ZDApp_ProcessSecEvent_6
    547              {
    548                ZDApp_SaveNwkKey();
   \   000056                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000056   12....       LCALL   ??ZDApp_SaveNwkKey?relay
    549              }
    550          
    551              // Return unprocessed events
    552              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \                     ??ZDApp_ProcessSecEvent_6:
   \   000059   EE           MOV     A,R6
   \   00005A   FA           MOV     R2,A
   \   00005B   EF           MOV     A,R7
   \   00005C   6404         XRL     A,#0x4
   \                     ??ZDApp_ProcessSecEvent_7:
   \   00005E   FB           MOV     R3,A
   \   00005F   8022         SJMP    ??ZDApp_ProcessSecEvent_3
    553            }
    554          
    555            if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_5:
   \   000061   EF           MOV     A,R7
   \   000062   5410         ANL     A,#0x10
   \   000064   600A         JZ      ??ZDApp_ProcessSecEvent_8
    556            {
    557          #if defined (NV_RESTORE)
    558              ZDSecMgrSaveApsLinkKey();
   \   000066                ; Setup parameters for call to function ZDSecMgrSaveApsLinkKey
   \   000066   12....       LCALL   ??ZDSecMgrSaveApsLinkKey?relay
    559          #endif // (NV_RESTORE)
    560          
    561              // Return unprocessed events
    562              return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
   \   000069   EE           MOV     A,R6
   \   00006A   FA           MOV     R2,A
   \   00006B   EF           MOV     A,R7
   \   00006C   6410         XRL     A,#0x10
   \   00006E   80B4         SJMP    ??ZDApp_ProcessSecEvent_2
    563            }
    564          
    565            if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_8:
   \   000070   EF           MOV     A,R7
   \   000071   5408         ANL     A,#0x8
   \   000073   600A         JZ      ??ZDApp_ProcessSecEvent_9
    566            {
    567              ZDSecMgrSaveTCLinkKey();
   \   000075                ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
   \   000075   12....       LCALL   ??ZDSecMgrSaveTCLinkKey?relay
    568          
    569              // Return unprocessed events
    570              return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
   \   000078   EE           MOV     A,R6
   \   000079   FA           MOV     R2,A
   \   00007A   EF           MOV     A,R7
   \   00007B   6408         XRL     A,#0x8
   \   00007D   80DF         SJMP    ??ZDApp_ProcessSecEvent_7
    571            }
    572          
    573            // Discard or make more handlers
    574            return 0;
   \                     ??ZDApp_ProcessSecEvent_9:
   \   00007F   7A00         MOV     R2,#0x0
   \   000081   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_3:
   \   000083   02....       LJMP    ??Subroutine46_0 & 0xFFFF
    575          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   7B00         MOV     R3,#0x0
   \   000002                REQUIRE ??Subroutine38_0
   \   000002                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   90....       MOV     DPTR,#ZDAppTaskID
   \   000003                REQUIRE ??Subroutine39_0
   \   000003                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    576          
    577          /*********************************************************************
    578           * Application Functions
    579           */
    580          
    581          /*********************************************************************
    582           * @fn      ZDOInitDevice
    583           *
    584           * @brief   Start the device in the network.  This function will read
    585           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    586           *   restore the network state of the device.
    587           *
    588           * @param   startDelay - timeDelay to start device (in milliseconds).
    589           *                       There is a jitter added to this delay:
    590           *                       ((NWK_START_DELAY + startDelay)
    591           *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    592           *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
    593           *                       this function will hold the network init. Application
    594           *                       can start the device.
    595           *
    596           * NOTE:    If the application would like to force a "new" join, the
    597           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    598           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    599           *          this function. "new" join means to not restore the network
    600           *          state of the device. Use zgWriteStartupOptions() to set these
    601           *          options.
    602           *
    603           * @return
    604           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    605           *          restored.
    606           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    607           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    608           *          it could mean that there was no network state to restore.
    609           *    ZDO_INITDEV_LEAVE_NOT_STARTED - Before the reset, a network leave was issued
    610           *          with the rejoin option set to TRUE.  So, the device was not
    611           *          started in the network (one time only).  The next time this
    612           *          function is called it will start.
    613           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    614          uint8 ZDOInitDevice( uint16 startDelay )
   \                     ZDOInitDevice:
    615          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine10 & 0xFFFF
    616            //HalUARTWrite(0,"99\n",sizeof("99")-1);
    617            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    618            uint16 extendedDelay = 0;
   \                     ??CrossCallReturnLabel_129:
   \   00000D   7E00         MOV     R6,#0x0
   \   00000F   7F00         MOV     R7,#0x0
    619            
    620            //HalUARTWrite(0,"d\n",sizeof("d")-1);
    621            
    622            if ( devState == DEV_HOLD )
   \   000011   90....       MOV     DPTR,#devState
   \   000014   E0           MOVX    A,@DPTR
   \   000015   7005         JNZ     ??ZDOInitDevice_0
    623            {
    624              //HalUARTWrite(0,"e\n",sizeof("e")-1);
    625              // Initialize the RAM items table, in case an NV item has been updated.
    626              zgInitItems( FALSE );
   \   000017                ; Setup parameters for call to function zgInitItems
   \   000017   7900         MOV     R1,#0x0
   \   000019   12....       LCALL   ??zgInitItems?relay
    627            }
    628          
    629            ZDConfig_InitDescriptors();
   \                     ??ZDOInitDevice_0:
   \   00001C                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   00001C   12....       LCALL   ??ZDConfig_InitDescriptors?relay
    630            //devtag.071807.todo - fix this temporary solution
    631            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   00001F   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000022   E0           MOVX    A,@DPTR
   \   000023   90....       MOV     DPTR,#_NIB + 14
   \   000026   F0           MOVX    @DPTR,A
    632          
    633          #if defined ( NV_RESTORE )
    634            // Get Keypad directly to see if a reset nv is needed.
    635            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    636            // while booting to skip past NV Restore.
    637            if ( HalKeyRead() == SW_BYPASS_NV )
   \   000027                ; Setup parameters for call to function HalKeyRead
   \   000027   12....       LCALL   ??HalKeyRead?relay
   \   00002A   E9           MOV     A,R1
   \   00002B   6404         XRL     A,#0x4
   \   00002D   7074         JNZ     ??ZDOInitDevice_1
    638              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   00002F   75..01       MOV     ?V0 + 0,#0x1
    639            else
    640            {
    641              //HalUARTWrite(0,"a\n",sizeof("a")-1);
    642              // Determine if NV should be restored
    643              networkStateNV = ZDApp_ReadNetworkRestoreState();
    644            }
    645          
    646            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
    647            {
    648              //HalUARTWrite(0,"b\n",sizeof("b")-1);
    649              networkStateNV = ZDApp_RestoreNetworkState();
    650            }
    651            else
    652            {
    653              //HalUARTWrite(0,"c\n",sizeof("c")-1);
    654              // Wipe out the network state in NV
    655              NLME_InitNV();
   \                     ??ZDOInitDevice_2:
   \   000032                ; Setup parameters for call to function NLME_InitNV
   \   000032   12....       LCALL   ??NLME_InitNV?relay
    656              NLME_SetDefaultNV();
   \   000035                ; Setup parameters for call to function NLME_SetDefaultNV
   \   000035   12....       LCALL   ??NLME_SetDefaultNV?relay
    657              // clear NWK key values
    658              ZDSecMgrClearNVKeyValues();
   \   000038                ; Setup parameters for call to function ZDSecMgrClearNVKeyValues
   \   000038   12....       LCALL   ??ZDSecMgrClearNVKeyValues?relay
    659            }
    660          #endif
    661            //HalUARTWrite(0,"f\n",sizeof("f")-1);
    662            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
   \                     ??ZDOInitDevice_3:
   \   00003B   7401         MOV     A,#0x1
   \   00003D   65..         XRL     A,?V0 + 0
   \   00003F   7020         JNZ     ??ZDOInitDevice_4
    663            {
    664              //HalUARTWrite(0,"g\n",sizeof("g")-1);
    665              ZDAppDetermineDeviceType();
   \   000041                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   000041   12....       LCALL   ??ZDAppDetermineDeviceType?relay
    666          
    667              // Only delay if joining network - not restoring network state
    668              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    669                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   000044                ; Setup parameters for call to function osal_rand
   \   000044   12....       LCALL   ??osal_rand?relay
   \   000047   85..82       MOV     DPL,?XSP + 0
   \   00004A   85..83       MOV     DPH,?XSP + 1
   \   00004D   EA           MOV     A,R2
   \   00004E   547F         ANL     A,#0x7f
   \   000050   F8           MOV     R0,A
   \   000051   E0           MOVX    A,@DPTR
   \   000052   28           ADD     A,R0
   \   000053   F8           MOV     R0,A
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   3400         ADDC    A,#0x0
   \   000058   F9           MOV     R1,A
   \   000059   E8           MOV     A,R0
   \   00005A   2464         ADD     A,#0x64
   \   00005C   FE           MOV     R6,A
   \   00005D   E9           MOV     A,R1
   \   00005E   3400         ADDC    A,#0x0
   \   000060   FF           MOV     R7,A
    670            }
    671          
    672            // Initialize the security for type of device
    673            ZDApp_SecInit( networkStateNV );
   \                     ??ZDOInitDevice_4:
   \   000061                ; Setup parameters for call to function ZDSecMgrInit
   \   000061   A9..         MOV     R1,?V0 + 0
   \   000063   12....       LCALL   ??ZDSecMgrInit?relay
    674          
    675            if( ZDO_INIT_HOLD_NWK_START != startDelay )
   \   000066   85..82       MOV     DPL,?XSP + 0
   \   000069   85..83       MOV     DPH,?XSP + 1
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F4           CPL     A
   \   00006E   7003         JNZ     ??ZDOInitDevice_5
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F4           CPL     A
   \                     ??ZDOInitDevice_5:
   \   000073   604C         JZ      ??ZDOInitDevice_6
    676            {
    677              //HalUARTWrite(0,"h\n",sizeof("h")-1);
    678              devState = DEV_INIT;    // Remove the Hold state
   \   000075   90....       MOV     DPTR,#devState
   \   000078   7401         MOV     A,#0x1
   \   00007A   F0           MOVX    @DPTR,A
    679          
    680              // Initialize leave control logic
    681              ZDApp_LeaveCtrlInit();
   \   00007B                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   00007B   12....       LCALL   ??ZDApp_LeaveCtrlInit?relay
    682          
    683              // Check leave control reset settings
    684              ZDApp_LeaveCtrlStartup( &devState, &startDelay );
   \   00007E                ; Setup parameters for call to function ZDApp_LeaveCtrlStartup
   \   00007E   85..82       MOV     DPL,?XSP + 0
   \   000081   85..83       MOV     DPH,?XSP + 1
   \   000084   AC82         MOV     R4,DPL
   \   000086   AD83         MOV     R5,DPH
   \   000088   7A..         MOV     R2,#devState & 0xff
   \   00008A   7B..         MOV     R3,#(devState >> 8) & 0xff
   \   00008C   12....       LCALL   ??ZDApp_LeaveCtrlStartup?relay
    685          
    686              // Leave may make the hold state come back
    687              if ( devState == DEV_HOLD )
   \   00008F   90....       MOV     DPTR,#devState
   \   000092   E0           MOVX    A,@DPTR
   \   000093   701E         JNZ     ??ZDOInitDevice_7
    688              {
    689                // Set the NV startup option to force a "new" join.
    690                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000095                ; Setup parameters for call to function zgWriteStartupOptions
   \   000095   7A02         MOV     R2,#0x2
   \   000097   79FF         MOV     R1,#-0x1
   \   000099   12....       LCALL   ??zgWriteStartupOptions?relay
    691          
    692                // Notify the applications
    693                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00009C                ; Setup parameters for call to function osal_set_event
   \   00009C   12....       LCALL   ?Subroutine13 & 0xFFFF
    694          
    695                return ( ZDO_INITDEV_LEAVE_NOT_STARTED );   // Don't join - (one time).
   \                     ??CrossCallReturnLabel_56:
   \   00009F   7902         MOV     R1,#0x2
   \   0000A1   8028         SJMP    ??ZDOInitDevice_8
    696              }
   \                     ??ZDOInitDevice_1:
   \   0000A3                ; Setup parameters for call to function ZDApp_ReadNetworkRestoreState
   \   0000A3   12....       LCALL   ??ZDApp_ReadNetworkRestoreState?relay
   \   0000A6   E9           MOV     A,R1
   \   0000A7   F5..         MOV     ?V0 + 0,A
   \   0000A9   7087         JNZ     ??ZDOInitDevice_2
   \   0000AB                ; Setup parameters for call to function ZDApp_RestoreNetworkState
   \   0000AB   12....       LCALL   ??ZDApp_RestoreNetworkState?relay
   \   0000AE   E9           MOV     A,R1
   \   0000AF   F5..         MOV     ?V0 + 0,A
   \   0000B1   8088         SJMP    ??ZDOInitDevice_3
    697          
    698              // Trigger the network start
    699              ZDApp_NetworkInit( extendedDelay );
   \                     ??ZDOInitDevice_7:
   \   0000B3                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0000B3   EE           MOV     A,R6
   \   0000B4   FA           MOV     R2,A
   \   0000B5   EF           MOV     A,R7
   \   0000B6   FB           MOV     R3,A
   \   0000B7   12....       LCALL   ??ZDApp_NetworkInit?relay
    700              HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF);
   \   0000BA                ; Setup parameters for call to function HalLedSet
   \   0000BA   7A00         MOV     R2,#0x0
   \   0000BC   7901         MOV     R1,#0x1
   \   0000BE   12....       LCALL   ??HalLedSet?relay
    701              //HalUARTWrite(0,"hello\n",sizeof("hello")-1);
    702            }
    703          
    704            // set broadcast address mask to support broadcast filtering
    705            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \                     ??ZDOInitDevice_6:
   \   0000C1                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   0000C1   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   F9           MOV     R1,A
   \   0000C6   12....       LCALL   ??NLME_SetBroadcastFilter?relay
    706          
    707            return ( networkStateNV );
   \   0000C9   A9..         MOV     R1,?V0 + 0
   \                     ??ZDOInitDevice_8:
   \   0000CB   7402         MOV     A,#0x2
   \   0000CD   80..         SJMP    ??Subroutine40_0
    708          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine41_0
   \   000003                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine57_0
   \   000006                ; // Fall through to label ??Subroutine57_0
    709          
    710          /*********************************************************************
    711           * @fn      ZDApp_ReadNetworkRestoreState
    712           *
    713           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    714           *          or not to restore the network state.
    715           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    716           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    717           *
    718           * @param   none
    719           *
    720           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    721           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    722           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    723           *          ZCD_NV_STARTUP_OPTION
    724           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    725          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    726          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    727            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV     R6,#0x0
    728          
    729            // Look for the New Network State option.
    730            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL   ??zgReadStartupOptions?relay
   \   00000A   E9           MOV     A,R1
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   5001         JNC     ??ZDApp_ReadNetworkRestoreState_0
    731            {
    732              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   00000F   0E           INC     R6
    733            }
    734          
    735            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000010   EE           MOV     A,R6
   \   000011   F9           MOV     R1,A
   \   000012   02....       LJMP    ??Subroutine46_0 & 0xFFFF
    736          }
    737          
    738          /*********************************************************************
    739           * @fn      ZDAppDetermineDeviceType()
    740           *
    741           * @brief   Determines the type of device to start.
    742           *
    743           *          Looks at zgDeviceLogicalType and determines what type of
    744           *          device to start.  The types are:
    745           *            ZG_DEVICETYPE_COORDINATOR
    746           *            ZG_DEVICETYPE_ROUTER
    747           *            ZG_DEVICETYPE_ENDDEVICE
    748           *
    749           * @param   none
    750           *
    751           * @return  none
    752           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    753          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    754          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    755            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700E         JNZ     ??ZDAppDetermineDeviceType_0
    756            {
    757              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   90....       MOV     DPTR,#devStartMode
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    758              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX    A,@DPTR
   \   000014   54F8         ANL     A,#0xf8
   \   000016   802E         SJMP    ??ZDAppDetermineDeviceType_1
    759            }
    760            else
    761            {
    762              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000018   6401         XRL     A,#0x1
   \   00001A   700A         JNZ     ??ZDAppDetermineDeviceType_2
    763                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   00001C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   54F8         ANL     A,#0xf8
   \   000022   4401         ORL     A,#0x1
   \   000024   800D         SJMP    ??ZDAppDetermineDeviceType_3
    764              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6402         XRL     A,#0x2
   \   000029   7009         JNZ     ??ZDAppDetermineDeviceType_4
    765                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   00002B   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   54F8         ANL     A,#0xf8
   \   000031   4402         ORL     A,#0x2
   \                     ??ZDAppDetermineDeviceType_3:
   \   000033   F0           MOVX    @DPTR,A
    766          
    767              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    768              // The device shall do rejoin the network. Otherwise, do normal join
    769              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_4:
   \   000034                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000034   7A..         MOV     R2,#AIB_apsUseExtendedPANID & 0xff
   \   000036   7B..         MOV     R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   000038   12....       LCALL   ??nwk_ExtPANIDValid?relay
   \   00003B   E9           MOV     A,R1
   \   00003C   90....       MOV     DPTR,#devStartMode
   \   00003F   7003         JNZ     ??ZDAppDetermineDeviceType_5
    770              {
    771                devStartMode = MODE_JOIN;     // Assume joining
   \   000041   E4           CLR     A
   \   000042   8002         SJMP    ??ZDAppDetermineDeviceType_1
    772              }
    773              else
    774              {
    775                devStartMode = MODE_REJOIN;
   \                     ??ZDAppDetermineDeviceType_5:
   \   000044   7403         MOV     A,#0x3
   \                     ??ZDAppDetermineDeviceType_1:
   \   000046   F0           MOVX    @DPTR,A
    776              }
    777            }
    778          }
   \   000047   02....       LJMP    ??Subroutine45_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    779          
    780          /*********************************************************************
    781           * @fn      ZDApp_NetworkStartEvt()
    782           *
    783           * @brief   Process the Network Start Event
    784           *
    785           * @param   none
    786           *
    787           * @return  none
    788           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    789          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    790          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    791            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV     DPTR,#nwkStatus
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7012         JNZ     ??ZDApp_NetworkStartEvt_0
    792            {
    793              // Successfully started a ZigBee network
    794              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6408         XRL     A,#0x8
   \   000010   7003         JNZ     ??ZDApp_NetworkStartEvt_1
    795              {
    796                devState = DEV_ZB_COORD;
   \   000012   7409         MOV     A,#0x9
   \   000014   F0           MOVX    @DPTR,A
    797              }
    798          
    799              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000015                ; Setup parameters for call to function osal_pwrmgr_device
   \   000015   7900         MOV     R1,#0x0
   \   000017   12....       LCALL   ??osal_pwrmgr_device?relay
    800              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00001A                ; Setup parameters for call to function osal_set_event
   \   00001A   802B         SJMP    ??ZDApp_NetworkStartEvt_2
    801            }
    802            else
    803            {
    804              // Try again with a higher energy threshold !!
    805              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   00001C                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00001C   12....       LCALL   ??NLME_GetEnergyThreshold?relay
   \   00001F   E9           MOV     A,R1
   \   000020   2410         ADD     A,#0x10
   \   000022   F8           MOV     R0,A
   \   000023   E4           CLR     A
   \   000024   3400         ADDC    A,#0x0
   \   000026   F9           MOV     R1,A
   \   000027   E8           MOV     A,R0
   \   000028   94FF         SUBB    A,#-0x1
   \   00002A   E9           MOV     A,R1
   \   00002B   9400         SUBB    A,#0x0
   \   00002D   C3           CLR     C
   \   00002E   65D0         XRL     A,PSW
   \   000030   33           RLC     A
   \   000031   500E         JNC     ??ZDApp_NetworkStartEvt_3
    806              {
    807                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000033                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   000033                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000033   12....       LCALL   ??NLME_GetEnergyThreshold?relay
   \   000036   E9           MOV     A,R1
   \   000037   2410         ADD     A,#0x10
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??NLME_SetEnergyThreshold?relay
    808                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   00003D                ; Setup parameters for call to function osal_set_event
   \   00003D   7A01         MOV     R2,#0x1
   \   00003F   8008         SJMP    ??ZDApp_NetworkStartEvt_4
    809              }
    810              else
    811              {
    812                // Failed to start network. Enter a dormant state (until user intervenes)
    813                devState = DEV_INIT;
   \                     ??ZDApp_NetworkStartEvt_3:
   \   000041   90....       MOV     DPTR,#devState
   \   000044   7401         MOV     A,#0x1
   \   000046   F0           MOVX    @DPTR,A
    814                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000047                ; Setup parameters for call to function osal_set_event
   \                     ??ZDApp_NetworkStartEvt_2:
   \   000047   7A10         MOV     R2,#0x10
    815              }
    816            }
   \                     ??ZDApp_NetworkStartEvt_4:
   \   000049   12....       LCALL   ??Subroutine37_0 & 0xFFFF
    817          }
   \                     ??CrossCallReturnLabel_60:
   \   00004C   02....       LJMP    ??Subroutine45_0 & 0xFFFF
    818          
    819          /*********************************************************************
    820           * @fn      ZDApp_DeviceAuthEvt()
    821           *
    822           * @brief   Process the Device Authentic Event
    823           *
    824           * @param   none
    825           *
    826           * @return  none
    827           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    828          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
    829          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    830            // received authentication from trust center
    831            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6405         XRL     A,#0x5
   \   00000A   7030         JNZ     ??ZDApp_DeviceAuthEvt_0
    832            {
    833              // Stop the reset timer so it doesn't reset
    834              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL   ??ZDApp_ResetTimerCancel?relay
    835          
    836              devState = DEV_END_DEVICE;
   \   00000F   12....       LCALL   ?Subroutine7 & 0xFFFF
    837              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
    838          
    839              // Set the Power Manager Device
    840          #if defined ( POWER_SAVING )
    841              osal_pwrmgr_device( PWRMGR_BATTERY );
    842          #endif
    843          
    844              if ( ZSTACK_ROUTER_BUILD )
    845              {
    846                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??CrossCallReturnLabel_67:
   \   000012   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000015   6009         JZ      ??ZDApp_DeviceAuthEvt_1
    847                {
    848                  // NOTE: first two parameters are not used, see NLMEDE.h for details
    849                  NLME_StartRouterRequest( 0, 0, false );
   \   000017                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000017   7B00         MOV     R3,#0x0
   \   000019   7A00         MOV     R2,#0x0
   \   00001B   7900         MOV     R1,#0x0
   \   00001D   12....       LCALL   ??NLME_StartRouterRequest?relay
    850                }
    851              }
    852          
    853              // Notify to save info into NV
    854              ZDApp_NVUpdate();
   \                     ??ZDApp_DeviceAuthEvt_1:
   \   000020                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000020   12....       LCALL   ??ZDApp_NVUpdate?relay
    855          
    856              // Save off the security
    857              ZDApp_SaveNwkKey();
   \   000023                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000023   12....       LCALL   ??ZDApp_SaveNwkKey?relay
    858          
    859              ZDApp_AnnounceNewAddress();
   \   000026                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000026   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
    860          
    861              if ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
   \   000029   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   A2E3         MOV     C,0xE0 /* A   */.3
   \   00002F   400E         JC      ??ZDApp_DeviceAuthEvt_2
    862              {
    863                NLME_SetPollRate( ZDApp_SavedPollRate );
   \   000031                ; Setup parameters for call to function NLME_SetPollRate
   \   000031   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   000034   12....       LCALL   ??Subroutine43_0 & 0xFFFF
    864              }
    865            }
   \                     ??CrossCallReturnLabel_70:
   \   000037   12....       LCALL   ??NLME_SetPollRate?relay
   \   00003A   8003         SJMP    ??ZDApp_DeviceAuthEvt_2
    866            else
    867            {
    868              ZDApp_NVUpdate();
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   00003C                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00003C   12....       LCALL   ??ZDApp_NVUpdate?relay
    869            }
    870          }
   \                     ??ZDApp_DeviceAuthEvt_2:
   \   00003F   02....       LJMP    ??Subroutine45_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   90....       MOV     DPTR,#devState
   \   000003   7406         MOV     A,#0x6
   \   000005                REQUIRE ??Subroutine42_0
   \   000005                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000003   E0           MOVX    A,@DPTR
   \   000004   5407         ANL     A,#0x7
   \   000006   6402         XRL     A,#0x2
   \   000008   22           RET
    871          
    872          /*********************************************************************
    873           * @fn      ZDApp_SaveNetworkStateEvt()
    874           *
    875           * @brief   Process the Save the Network State Event
    876           *
    877           * @param   none
    878           *
    879           * @return  none
    880           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    881          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
    882          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    883          #if defined ( NV_RESTORE )
    884           #if defined ( NV_TURN_OFF_RADIO )
    885            // Turn off the radio's receiver during an NV update
    886            uint8 RxOnIdle;
    887            uint8 x = false;
    888            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
    889            ZMacSetReq( ZMacRxOnIdle, &x );
    890           #endif
    891          
    892            // Update the Network State in NV
    893            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
    894                           NWK_NV_DEVICELIST_ENABLE |
    895                           NWK_NV_BINDING_ENABLE    |
    896                           NWK_NV_ADDRMGR_ENABLE );
   \   000004                ; Setup parameters for call to function NLME_UpdateNV
   \   000004   790F         MOV     R1,#0xf
   \   000006   12....       LCALL   ??NLME_UpdateNV?relay
    897          
    898            // Reset the NV startup option to resume from NV by
    899            // clearing the "New" join option.
    900            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000009                ; Setup parameters for call to function zgWriteStartupOptions
   \   000009   7A02         MOV     R2,#0x2
   \   00000B   7900         MOV     R1,#0x0
   \   00000D   12....       LCALL   ??zgWriteStartupOptions?relay
    901          
    902           #if defined ( NV_TURN_OFF_RADIO )
    903            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    904           #endif
    905          #endif  // NV_RESTORE
    906          }
   \   000010   02....       LJMP    ??Subroutine45_0 & 0xFFFF
    907          
    908          /*********************************************************************
    909           * @fn      ZDApp_RestoreNetworkState()
    910           *
    911           * @brief   This function will restore the network state of the
    912           *          device if the network state is stored in NV.
    913           *
    914           * @param   none
    915           *
    916           * @return
    917           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    918           *          restored.
    919           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
    920           *          This could mean that zgStartupOption said to not restore, or
    921           *          it could mean that there was no network state to restore.
    922           *
    923           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    924          uint8 ZDApp_RestoreNetworkState( void )
   \                     ZDApp_RestoreNetworkState:
    925          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    926            uint8 nvStat;
    927          
    928            // Initialize NWK NV items
    929            nvStat = NLME_InitNV();
   \   000005                ; Setup parameters for call to function NLME_InitNV
   \   000005   12....       LCALL   ??NLME_InitNV?relay
   \   000008   E9           MOV     A,R1
   \   000009   FE           MOV     R6,A
    930          
    931            if ( nvStat != NV_OPER_FAILED )
   \   00000A   740A         MOV     A,#0xa
   \   00000C   6E           XRL     A,R6
   \   00000D   6036         JZ      ??ZDApp_RestoreNetworkState_0
    932            {
    933              if ( NLME_RestoreFromNV() )
   \   00000F                ; Setup parameters for call to function NLME_RestoreFromNV
   \   00000F   12....       LCALL   ??NLME_RestoreFromNV?relay
   \   000012   E9           MOV     A,R1
   \   000013   6030         JZ      ??ZDApp_RestoreNetworkState_0
    934              {
    935                // Are we a coordinator
    936                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000018   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00001B   12....       LCALL   ??Subroutine57_0 & 0xFFFF
    937                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
   \                     ??CrossCallReturnLabel_126:
   \   00001E   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000021   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000024   7007         JNZ     ??ZDApp_RestoreNetworkState_1
    938                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000026   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   54F8         ANL     A,#0xf8
   \   00002C   F0           MOVX    @DPTR,A
    939                devStartMode = MODE_RESUME;
   \                     ??ZDApp_RestoreNetworkState_1:
   \   00002D   90....       MOV     DPTR,#devStartMode
   \   000030   7401         MOV     A,#0x1
   \   000032   F0           MOVX    @DPTR,A
    940                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   \   000033                ; Setup parameters for call to function sAddrExtCpy
   \   000033   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   000035   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   000037   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000039   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00003B   12....       LCALL   ??sAddrExtCpy?relay
    941              }
    942              else
    943                nvStat = NV_ITEM_UNINIT;
    944          
    945              if ( ZG_SECURE_ENABLED )
    946              {
    947                nwkFrameCounterChanges = 0;
    948          
    949                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    950                {
    951                  ZDApp_RestoreNwkKey();
    952                }
    953              }
    954          
    955              // The default for RxOnWhenIdle is true for Routers and false for end devices
    956              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
    957              // other than default.
    958            }
    959          
    960            if ( nvStat == ZSUCCESS )
   \   00003E   EE           MOV     A,R6
   \   00003F   7004         JNZ     ??ZDApp_RestoreNetworkState_0
    961              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   \   000041   7900         MOV     R1,#0x0
   \   000043   8002         SJMP    ??ZDApp_RestoreNetworkState_2
    962            else
    963              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   \                     ??ZDApp_RestoreNetworkState_0:
   \   000045   7901         MOV     R1,#0x1
   \                     ??ZDApp_RestoreNetworkState_2:
   \   000047   02....       LJMP    ??Subroutine46_0 & 0xFFFF
    964          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   49           ORL     A,R1
   \   000007   22           RET
    965          
    966          /*********************************************************************
    967           * @fn      ZDApp_InitUserDesc()
    968           *
    969           * @brief   Initialize the User Descriptor, the descriptor is read from NV
    970           *          when needed.  If you want to initialize the User descriptor to
    971           *          something other than all zero, do it here.
    972           *
    973           * @param   none
    974           *
    975           * @return  none
    976           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    977          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
    978          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    979            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
    980          
    981            // Initialize the User Descriptor, the descriptor is read from NV
    982            // when needed.  If you want to initialize the User descriptor to something
    983            // other than all zero, do it here.
    984            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV     R4,#0x11
   \   00000C   12....       LCALL   ?Subroutine31 & 0xFFFF
    985            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
    986                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \                     ??CrossCallReturnLabel_40:
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   7C11         MOV     R4,#0x11
   \   000014   7D00         MOV     R5,#0x0
   \   000016   7A81         MOV     R2,#-0x7f
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   12....       LCALL   ??osal_nv_item_init?relay
   \   00001D   7402         MOV     A,#0x2
   \   00001F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000022   E9           MOV     A,R1
   \   000023   702F         JNZ     ??ZDApp_InitUserDesc_0
    987            {
    988              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
    989                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000025                ; Setup parameters for call to function osal_nv_read
   \   000025   78..         MOV     R0,#?V0 + 0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   75..11       MOV     ?V0 + 0,#0x11
   \   00002D   75..00       MOV     ?V0 + 1,#0x0
   \   000030   78..         MOV     R0,#?V0 + 0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7C00         MOV     R4,#0x0
   \   000037   7D00         MOV     R5,#0x0
   \   000039   7A81         MOV     R2,#-0x7f
   \   00003B   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00003E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000041   E9           MOV     A,R1
   \   000042   7010         JNZ     ??ZDApp_InitUserDesc_0
    990              {
    991                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   000044   85..82       MOV     DPL,?XSP + 0
   \   000047   85..83       MOV     DPH,?XSP + 1
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   6007         JZ      ??ZDApp_InitUserDesc_0
    992                {
    993                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   00004D   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000050   E0           MOVX    A,@DPTR
   \   000051   D2E4         SETB    0xE0 /* A   */.4
   \   000053   F0           MOVX    @DPTR,A
    994                }
    995              }
    996            }
    997          }
   \                     ??ZDApp_InitUserDesc_0:
   \   000054   7411         MOV     A,#0x11
   \   000056   02....       LJMP    ??Subroutine51_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   7D00         MOV     R5,#0x0
   \   000002   7900         MOV     R1,#0x0
   \   000004   85..82       MOV     DPL,?XSP + 0
   \   000007   85..83       MOV     DPH,?XSP + 1
   \   00000A   AA82         MOV     R2,DPL
   \   00000C   AB83         MOV     R3,DPH
   \   00000E   12....       LCALL   ??osal_memset?relay
   \   000011                ; Setup parameters for call to function osal_nv_item_init
   \   000011                ; Setup parameters for call to function osal_nv_write
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   8582..       MOV     ?V0 + 0,DPL
   \   00001A   8583..       MOV     ?V0 + 1,DPH
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   ??osal_nv_read?relay
   \   000005   7404         MOV     A,#0x4
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine52_0
   \   000003                ; // Fall through to label ??Subroutine52_0
    998          
    999          /*********************************************************************
   1000           * @fn      ZDAppCheckForHoldKey()
   1001           *
   1002           * @brief   Check for key to set the device into Hold Auto Start
   1003           *
   1004           * @param   none
   1005           *
   1006           * @return  none
   1007           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1008          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
   1009          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1010          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
   1011            // Get Keypad directly to see if a HOLD_START is needed.
   1012            // Hold down the SW_BYPASS_START key (see OnBoard.h)
   1013            // while booting to avoid starting up the device.
   1014            if ( HalKeyRead () == SW_BYPASS_START)
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL   ??HalKeyRead?relay
   \   000007   E9           MOV     A,R1
   \   000008   6401         XRL     A,#0x1
   \   00000A   7005         JNZ     ??ZDAppCheckForHoldKey_0
   1015            {
   1016              // Change the device state to HOLD on start up
   1017              devState = DEV_HOLD;
   \   00000C   90....       MOV     DPTR,#devState
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
   1018            }
   1019          #endif // HAL_KEY
   1020          }
   \                     ??ZDAppCheckForHoldKey_0:
   \   000011   02....       LJMP    ??Subroutine45_0 & 0xFFFF
   1021          
   1022          /*********************************************************************
   1023           * @fn      ZDApp_ProcessOSALMsg()
   1024           *
   1025           * @brief   Process the incoming task message.
   1026           *
   1027           * @param   msgPtr - message to process
   1028           *
   1029           * @return  none
   1030           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1031          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
   1032          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1033            // Data Confirmation message fields
   1034            uint8 sentEP;       // This should always be 0
   1035            uint8 sentStatus;
   1036            afDataConfirm_t *afDataConfirm;
   1037            uint8 tmp;
   1038          
   1039            switch ( msgPtr->event )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   24E6         ADD     A,#-0x1a
   \   00000B   600A         JZ      ??ZDApp_ProcessOSALMsg_0
   \   00000D   2447         ADD     A,#0x47
   \   00000F   600B         JZ      ??ZDApp_ProcessOSALMsg_1
   \   000011   24D6         ADD     A,#-0x2a
   \   000013   600C         JZ      ??ZDApp_ProcessOSALMsg_2
   \   000015   8018         SJMP    ??ZDApp_ProcessOSALMsg_3
   1040            {
   1041              // Incoming ZDO Message
   1042              case AF_INCOMING_MSG_CMD:
   1043                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   000017                ; Setup parameters for call to function ZDP_IncomingData
   \   000017   12....       LCALL   ??ZDP_IncomingData?relay
   1044                break;
   \   00001A   8013         SJMP    ??ZDApp_ProcessOSALMsg_3
   1045          
   1046              case ZDO_CB_MSG:
   1047                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   00001C                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   00001C   12....       LCALL   ??ZDApp_ProcessMsgCBs?relay
   1048                break;
   \   00001F   800E         SJMP    ??ZDApp_ProcessOSALMsg_3
   1049          
   1050              case AF_DATA_CONFIRM_CMD:
   1051                // This message is received as a confirmation of a data packet sent.
   1052                // The status is of ZStatus_t type [defined in NLMEDE.h]
   1053                // The message fields are defined in AF.h
   1054                afDataConfirm = (afDataConfirm_t *)msgPtr;
   1055                sentEP = afDataConfirm->endpoint;
   1056                sentStatus = afDataConfirm->hdr.status;
   1057          
   1058                // Action taken when confirmation is received.
   1059          #if defined ( ZIGBEE_FREQ_AGILITY )
   1060                if ( pZDNwkMgr_ProcessDataConfirm )
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   000021   90....       MOV     DPTR,#pZDNwkMgr_ProcessDataConfirm
   \   000024   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000027   6006         JZ      ??ZDApp_ProcessOSALMsg_3
   1061                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
   \   000029                ; Setup parameters for indirect call
   \   000029   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1062          #endif
   1063                (void)sentEP;
   1064                (void)sentStatus;
   1065                break;
   1066          
   1067              case ZDO_NWK_DISC_CNF:
   1068                if (devState != DEV_NWK_DISC)
   1069                  break;
   1070          
   1071                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1072                {
   1073                  // Process the network discovery scan results and choose a parent
   1074                  // device to join/rejoin itself
   1075                  networkDesc_t *pChosenNwk;
   1076                  if ( ( (pChosenNwk = ZDApp_NwkDescListProcessing()) != NULL ) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
   1077                  {
   1078                    if ( devStartMode == MODE_JOIN )
   1079                    {
   1080                      devState = DEV_NWK_JOINING;
   1081          
   1082                      ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
   1083          
   1084                      if ( NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
   1085                                            pChosenNwk->logicalChannel,
   1086                                            ZDO_Config_Node_Descriptor.CapabilityFlags,
   1087                                            pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth ) != ZSuccess )
   1088                      {
   1089                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1090                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   1091                      }
   1092                    } // if ( devStartMode == MODE_JOIN )
   1093                    else if ( devStartMode == MODE_REJOIN )
   1094                    {
   1095                      devState = DEV_NWK_REJOIN;
   1096          
   1097                      // Before trying to do rejoin, check if the device has a valid short address
   1098                      // If not, generate a random short address for itself
   1099                      if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   1100                      {
   1101                        _NIB.nwkDevAddress = osal_rand();
   1102                        ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
   1103                      }
   1104          
   1105                      if ( ZG_SECURE_ENABLED )
   1106                      {
   1107                        ZDApp_RestoreNwkKey();
   1108                      }
   1109          
   1110                      // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1111                      if ( _NIB.nwkPanId == INVALID_PAN_ID )
   1112                      {
   1113                        _NIB.nwkPanId = pChosenNwk->panId;
   1114                        ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
   1115                      }
   1116          
   1117                      tmp = true;
   1118                      ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
   1119                      if ( NLME_ReJoinRequest( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel) != ZSuccess )
   1120                      {
   1121                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1122                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   1123                      }
   1124                    } // else if ( devStartMode == MODE_REJOIN )
   1125          
   1126                    if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   1127                    {
   1128                      // The receiver is on, turn network layer polling off.
   1129                      NLME_SetPollRate( 0 );
   1130                      NLME_SetQueuedPollRate( 0 );
   1131                      NLME_SetResponseRate( 0 );
   1132                    }
   1133                    else
   1134                    {
   1135                      if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   1136                      {
   1137                        ZDApp_SavedPollRate = zgPollRate;
   1138                        NLME_SetPollRate( zgRejoinPollRate );
   1139                      }
   1140                    }
   1141                  }
   1142                  else
   1143                  {
   1144                    if ( continueJoining )
   1145                    {
   1146              #if defined ( MANAGED_SCAN )
   1147                      ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
   1148              #else
   1149                      zdoDiscCounter++;
   1150                      ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
   1151                            + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
   1152              #endif
   1153                    }
   1154                  }
   1155                }
   1156                break;
   1157          
   1158              case ZDO_NWK_JOIN_IND:
   1159                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1160                {
   1161                  ZDApp_ProcessNetworkJoin();
   1162                }
   1163                break;
   1164          
   1165              case ZDO_NWK_JOIN_REQ:
   1166                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1167                {
   1168                  retryCnt = 0;
   1169                  devStartMode = MODE_RESUME;
   1170                  _tmpRejoinState = true;
   1171                  osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   1172                  zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
   1173                  ZDApp_NetworkInit( 0 );
   1174                }
   1175                break;
   1176          
   1177              default:
   1178                if ( ZG_SECURE_ENABLED )
   1179                  ZDApp_ProcessSecMsg( msgPtr );
   1180                break;
   1181            }
   \                     ??CrossCallReturnLabel_96:
   \   00002C   12....       LCALL   ?CALL_IND
   1182          
   1183          }
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   00002F   02....       LJMP    ??Subroutine45_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET
   1184          
   1185          /*********************************************************************
   1186           * @fn      ZDApp_ProcessMsgCBs()
   1187           *
   1188           * @brief   Process response messages
   1189           *
   1190           * @param   none
   1191           *
   1192           * @return  none
   1193           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1194          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1195          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 44
   \   000005   74D4         MOV     A,#-0x2c
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1196            switch ( inMsg->clusterID )
   \   00000E   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000011   F5..         MOV     ?V0 + 1,A
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   000018   0300         DW        3
   \   00001A   2100         DW        33
   \   00001C   2200         DW        34
   \   00001E   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   000020   0080         DW        32768
   \   000022   0180         DW        32769
   \   000024   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   000026   2180         DW        32801
   \   000028   2280         DW        32802
   \   00002A   ....         DW        ??ZDApp_ProcessMsgCBs_2
   \   00002C   0100         DW        1
   \   00002E   2000         DW        32
   \   000030   ....         DW        ??ZDApp_ProcessMsgCBs_3
   \   000032   ....         DW        ??ZDApp_ProcessMsgCBs_4
   1197            {
   1198          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1199              case NWK_addr_rsp:
   1200              case IEEE_addr_rsp:
   1201                {
   1202                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1203                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   000034                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   000034   12....       LCALL   ??ZDO_ParseAddrRsp?relay
   \   000037   8A..         MOV     ?V0 + 0,R2
   \   000039   8B..         MOV     ?V0 + 1,R3
   \   00003B   AE..         MOV     R6,?V0 + 0
   \   00003D   AF..         MOV     R7,?V0 + 1
   1204                  if ( pAddrRsp )
   \   00003F   EE           MOV     A,R6
   \   000040   4F           ORL     A,R7
   \   000041   7003         JNZ     $+5
   \   000043   02....       LJMP    ??ZDApp_ProcessMsgCBs_4 & 0xFFFF
   1205                  {
   1206                    if ( pAddrRsp->status == ZSuccess )
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   700E         JNZ     ??ZDApp_ProcessMsgCBs_5
   1207                    {
   1208                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   00004D                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   00004D   EE           MOV     A,R6
   \   00004E   2403         ADD     A,#0x3
   \   000050   FC           MOV     R4,A
   \   000051   EF           MOV     A,R7
   \   000052   3400         ADDC    A,#0x0
   \   000054   FD           MOV     R5,A
   \   000055   12....       LCALL   ?Subroutine25 & 0xFFFF
   1209                    }
   \                     ??CrossCallReturnLabel_72:
   \   000058   12....       LCALL   ??ZDO_UpdateAddrManager?relay
   1210                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_5:
   \   00005B                ; Setup parameters for call to function osal_mem_free
   \   00005B   EE           MOV     A,R6
   \   00005C   FA           MOV     R2,A
   \   00005D   EF           MOV     A,R7
   \   00005E   02....       LJMP    ??ZDApp_ProcessMsgCBs_6 & 0xFFFF
   1211                  }
   1212                }
   1213                break;
   1214          #endif
   1215          
   1216          #if defined ( REFLECTOR )
   1217              case Bind_req:
   1218              case Unbind_req:
   1219                {
   1220                  ZDO_BindUnbindReq_t bindReq;
   1221                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   000061                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   000061   7417         MOV     A,#0x17
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   AC82         MOV     R4,DPL
   \   000068   AD83         MOV     R5,DPH
   \   00006A   12....       LCALL   ??ZDO_ParseBindUnbindReq?relay
   1222                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   00006D                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   00006D   7417         MOV     A,#0x17
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   AC82         MOV     R4,DPL
   \   000074   AD83         MOV     R5,DPH
   \   000076   EE           MOV     A,R6
   \   000077   FA           MOV     R2,A
   \   000078   EF           MOV     A,R7
   \   000079   FB           MOV     R3,A
   \   00007A   12....       LCALL   ??ZDO_ProcessBindUnbindReq?relay
   1223                }
   1224                break;
   \   00007D   8073         SJMP    ??ZDApp_ProcessMsgCBs_4
   1225          #endif
   1226          
   1227          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1228              case Bind_rsp:
   1229              case Unbind_rsp:
   1230                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   00007F   90....       MOV     DPTR,#matchED
   \   000082   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000085   606B         JZ      ??ZDApp_ProcessMsgCBs_4
   1231                {
   1232                  ZDMatchSendState(
   1233                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1234                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   \   000087   EE           MOV     A,R6
   \   000088   240C         ADD     A,#0xc
   \   00008A   12....       LCALL   ??Subroutine55_0 & 0xFFFF
   1235                }
   \                     ??CrossCallReturnLabel_116:
   \   00008D   6421         XRL     A,#0x21
   \   00008F   7004         JNZ     ??ZDApp_ProcessMsgCBs_7
   \   000091   A3           INC     DPTR
   \   000092   E0           MOVX    A,@DPTR
   \   000093   6480         XRL     A,#0x80
   \                     ??ZDApp_ProcessMsgCBs_7:
   \   000095   7004         JNZ     ??ZDApp_ProcessMsgCBs_8
   \   000097   7903         MOV     R1,#0x3
   \   000099   8002         SJMP    ??ZDApp_ProcessMsgCBs_9
   \                     ??ZDApp_ProcessMsgCBs_8:
   \   00009B   7902         MOV     R1,#0x2
   \                     ??ZDApp_ProcessMsgCBs_9:
   \   00009D                ; Setup parameters for call to function ZDMatchSendState
   \   00009D   EE           MOV     A,R6
   \   00009E   240F         ADD     A,#0xf
   \   0000A0   12....       LCALL   ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   0000A3   FB           MOV     R3,A
   \   0000A4   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   0000A7   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   0000AA   FA           MOV     R2,A
   \   0000AB   12....       LCALL   ??ZDMatchSendState?relay
   \   0000AE   8042         SJMP    ??ZDApp_ProcessMsgCBs_4
   1236                break;
   1237          
   1238              case End_Device_Bind_req:
   1239                if (ZG_DEVICE_COORDINATOR_TYPE)
   1240                {
   1241                  ZDEndDeviceBind_t bindReq;
   1242                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   0000B0                ; Setup parameters for call to function ZDO_ParseEndDeviceBindReq
   \   0000B0   85..82       MOV     DPL,?XSP + 0
   \   0000B3   85..83       MOV     DPH,?XSP + 1
   \   0000B6   AC82         MOV     R4,DPL
   \   0000B8   AD83         MOV     R5,DPH
   \   0000BA   12....       LCALL   ??ZDO_ParseEndDeviceBindReq?relay
   1243                  ZDO_MatchEndDeviceBind( &bindReq );
   \   0000BD                ; Setup parameters for call to function ZDO_MatchEndDeviceBind
   \   0000BD   85..82       MOV     DPL,?XSP + 0
   \   0000C0   85..83       MOV     DPH,?XSP + 1
   \   0000C3   AA82         MOV     R2,DPL
   \   0000C5   AB83         MOV     R3,DPH
   \   0000C7   12....       LCALL   ??ZDO_MatchEndDeviceBind?relay
   1244          
   1245                  // Freeing the cluster lists - if allocated.
   1246                  if ( bindReq.numInClusters )
   \   0000CA   7411         MOV     A,#0x11
   \   0000CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   600B         JZ      ??ZDApp_ProcessMsgCBs_10
   1247                    osal_mem_free( bindReq.inClusters );
   \   0000D2                ; Setup parameters for call to function osal_mem_free
   \   0000D2   7412         MOV     A,#0x12
   \   0000D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D7   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0000DA   12....       LCALL   ??osal_mem_free?relay
   1248                  if ( bindReq.numOutClusters )
   \                     ??ZDApp_ProcessMsgCBs_10:
   \   0000DD   7414         MOV     A,#0x14
   \   0000DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   600D         JZ      ??ZDApp_ProcessMsgCBs_4
   1249                    osal_mem_free( bindReq.outClusters );
   \   0000E5                ; Setup parameters for call to function osal_mem_free
   \   0000E5   7415         MOV     A,#0x15
   \   0000E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   FA           MOV     R2,A
   \   0000EC   A3           INC     DPTR
   \   0000ED   E0           MOVX    A,@DPTR
   \                     ??ZDApp_ProcessMsgCBs_6:
   \   0000EE   FB           MOV     R3,A
   \   0000EF   12....       LCALL   ??osal_mem_free?relay
   1250                }
   1251                break;
   1252          #endif
   1253            }
   1254          }
   \                     ??ZDApp_ProcessMsgCBs_4:
   \   0000F2   742C         MOV     A,#0x2c
   \   0000F4   02....       LJMP    ??Subroutine51_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine43_0
   \   000001                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   EE           MOV     A,R6
   \   000001   2413         ADD     A,#0x13
   \   000003                REQUIRE ??Subroutine53_0
   \   000003                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine54_0
   \   000003                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine56_0
   \   000003                ; // Fall through to label ??Subroutine56_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   EE           MOV     A,R6
   \   000001   240C         ADD     A,#0xc
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F5..         MOV     ?V0 + 0,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   22           RET
   1255          
   1256          /*********************************************************************
   1257           * @fn      ZDApp_RegisterCBs()
   1258           *
   1259           * @brief   Process response messages
   1260           *
   1261           * @param   none
   1262           *
   1263           * @return  none
   1264           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1265          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1266          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1267          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1268            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV     R2,#0x1
   \   000006   12....       LCALL   ?Subroutine14 & 0xFFFF
   1269          #endif
   1270          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1271            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \                     ??CrossCallReturnLabel_74:
   \   000009                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000009   7A00         MOV     R2,#0x0
   \   00000B   12....       LCALL   ?Subroutine14 & 0xFFFF
   1272          #endif
   1273          #if ZG_BUILD_COORDINATOR_TYPE
   1274            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   \                     ??CrossCallReturnLabel_75:
   \   00000E                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00000E   7A21         MOV     R2,#0x21
   \   000010   12....       LCALL   ?Subroutine14 & 0xFFFF
   1275            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   \                     ??CrossCallReturnLabel_76:
   \   000013                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000013   7A22         MOV     R2,#0x22
   \   000015   12....       LCALL   ?Subroutine14 & 0xFFFF
   1276            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   \                     ??CrossCallReturnLabel_77:
   \   000018                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000018   7A20         MOV     R2,#0x20
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   1277          #endif
   1278          #if defined ( REFLECTOR )
   1279            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \                     ??CrossCallReturnLabel_78:
   \   00001F                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001F   7A21         MOV     R2,#0x21
   \   000021   7B00         MOV     R3,#0x0
   \   000023   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   1280            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \                     ??CrossCallReturnLabel_79:
   \   000026                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000026   7A22         MOV     R2,#0x22
   \   000028   7B00         MOV     R3,#0x0
   \   00002A   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   1281          #endif
   1282          }
   \                     ??CrossCallReturnLabel_80:
   \   00002D   02....       LJMP    ??Subroutine45_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   7B80         MOV     R3,#-0x80
   \   000002                REQUIRE ??Subroutine44_0
   \   000002                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   90....       MOV     DPTR,#ZDAppTaskID
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
   \   000008   22           RET
   1283          
   1284          /*********************************************************************
   1285           * @fn      ZDApp_ProcessSecMsg()
   1286           *
   1287           * @brief   Process the incoming security message.
   1288           *
   1289           * @param   msgPtr - message to process
   1290           *
   1291           * @return  none
   1292           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1293          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1294          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1295            switch ( msgPtr->event )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   6407         XRL     A,#0x7
   \   00000B   7003         JNZ     ??ZDApp_ProcessSecMsg_0
   1296            {
   1297              case ZDO_ESTABLISH_KEY_CFM:
   1298                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1299                {
   1300                  ZDSecMgrEstablishKeyCfm( (ZDO_EstablishKeyCfm_t*)msgPtr );
   1301                }
   1302                break;
   1303          
   1304              case ZDO_ESTABLISH_KEY_IND:
   1305                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1306                {
   1307                  if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1308                  {
   1309                    ZDSecMgrEstablishKeyInd( (ZDO_EstablishKeyInd_t*)msgPtr );
   1310                  }
   1311                }
   1312                break;
   1313          
   1314              case ZDO_TRANSPORT_KEY_IND:
   1315                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1316                {
   1317                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   1318                }
   1319                break;
   1320          
   1321              case ZDO_UPDATE_DEVICE_IND:
   1322                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1323                {
   1324                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   \   00000D                ; Setup parameters for call to function ZDSecMgrUpdateDeviceInd
   \   00000D   12....       LCALL   ??ZDSecMgrUpdateDeviceInd?relay
   1325                }
   1326                break;
   1327          
   1328              case ZDO_REMOVE_DEVICE_IND:
   1329                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   1330                {
   1331                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   1332                }
   1333                break;
   1334          
   1335              case ZDO_REQUEST_KEY_IND:
   1336                if (( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH ) ||
   1337                    ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ))
   1338                {
   1339                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1340                  {
   1341                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   1342                  }
   1343                }
   1344                break;
   1345          
   1346              case ZDO_SWITCH_KEY_IND:
   1347                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1348                {
   1349                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   1350                }
   1351                break;
   1352          
   1353              case ZDO_AUTHENTICATE_IND:
   1354                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1355                {
   1356                  ZDSecMgrAuthenticateInd( (ZDO_AuthenticateInd_t*)msgPtr );
   1357                }
   1358                break;
   1359          
   1360              case ZDO_AUTHENTICATE_CFM:
   1361                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1362                {
   1363                  ZDSecMgrAuthenticateCfm( (ZDO_AuthenticateCfm_t*)msgPtr );
   1364                }
   1365                break;
   1366          
   1367              default:
   1368                // Unsupported messages
   1369                break;
   1370            }
   1371          }
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000010   02....       LJMP    ??Subroutine45_0 & 0xFFFF
   1372          
   1373          /*********************************************************************
   1374           * @fn      ZDApp_ProcessNetworkJoin()
   1375           *
   1376           * @brief
   1377           *
   1378           *   Save off the Network key information.
   1379           *
   1380           * @param   none
   1381           *
   1382           * @return  none
   1383           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1384          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1385          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1386            if ( (devState == DEV_NWK_JOINING) ||
   1387                ((devState == DEV_NWK_ORPHAN)  &&
   1388                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6403         XRL     A,#0x3
   \   000010   6015         JZ      ??ZDApp_ProcessNetworkJoin_0
   \   000012   E0           MOVX    A,@DPTR
   \   000013   640A         XRL     A,#0xa
   \   000015   6003         JZ      $+5
   \   000017   02....       LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
   \   00001A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   5407         ANL     A,#0x7
   \   000020   6401         XRL     A,#0x1
   \   000022   6003         JZ      $+5
   \   000024   02....       LJMP    ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
   1389            {
   1390              // Result of a Join attempt by this device.
   1391              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   000027   90....       MOV     DPTR,#nwkStatus
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   703A         JNZ     ??ZDApp_ProcessNetworkJoin_3
   1392              {
   1393                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00002D                ; Setup parameters for call to function osal_set_event
   \   00002D   12....       LCALL   ?Subroutine13 & 0xFFFF
   1394          
   1395          #if defined ( POWER_SAVING )
   1396                osal_pwrmgr_device( PWRMGR_BATTERY );
   1397          #endif
   1398          
   1399                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
   1400                {
   1401                  // wait for auth from trust center!!
   1402                  devState = DEV_END_DEVICE_UNAUTH;
   1403          
   1404                  // Start the reset timer for MAX UNAUTH time
   1405                  ZDApp_ResetTimerStart( 10000 );//MAX_DEVICE_UNAUTH_TIMEOUT );
   1406                }
   1407                else
   1408                {
   1409                  if ( ZSTACK_ROUTER_BUILD )
   1410                  {
   1411                    if ( devState == DEV_NWK_ORPHAN
   1412                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??CrossCallReturnLabel_57:
   \   000030   90....       MOV     DPTR,#devState
   \   000033   E0           MOVX    A,@DPTR
   \   000034   640A         XRL     A,#0xa
   \   000036   700D         JNZ     ??ZDApp_ProcessNetworkJoin_4
   \   000038   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00003B   6010         JZ      ??ZDApp_ProcessNetworkJoin_5
   1413                    {
   1414                      // Change NIB state to router for restore
   1415                      _NIB.nwkState = NWK_ROUTER;
   \   00003D   90....       MOV     DPTR,#_NIB + 35
   \   000040   7408         MOV     A,#0x8
   \   000042   F0           MOVX    @DPTR,A
   \   000043   8008         SJMP    ??ZDApp_ProcessNetworkJoin_5
   1416                    }
   1417                  }
   1418          
   1419                  if ( devState == DEV_NWK_JOINING )
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   000045   E0           MOVX    A,@DPTR
   \   000046   6403         XRL     A,#0x3
   \   000048   7003         JNZ     ??ZDApp_ProcessNetworkJoin_5
   1420                  {
   1421                    ZDApp_AnnounceNewAddress();
   \   00004A                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00004A   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   1422                  }
   1423          
   1424                  devState = DEV_END_DEVICE;
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   00004D   90....       MOV     DPTR,#devState
   \   000050   7406         MOV     A,#0x6
   \   000052   F0           MOVX    @DPTR,A
   1425                  if ( ZSTACK_ROUTER_BUILD )
   1426                  {
   1427                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1428                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \   000053   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000056   7003         JNZ     $+5
   \   000058   02....       LJMP    ??CrossCallReturnLabel_58 & 0xFFFF
   1429                    {
   1430                      NLME_StartRouterRequest( 0, 0, false );
   \   00005B                ; Setup parameters for call to function NLME_StartRouterRequest
   \   00005B   7B00         MOV     R3,#0x0
   \   00005D   7A00         MOV     R2,#0x0
   \   00005F   7900         MOV     R1,#0x0
   \   000061   12....       LCALL   ??NLME_StartRouterRequest?relay
   \   000064   02....       LJMP    ??CrossCallReturnLabel_58 & 0xFFFF
   1431                    }
   1432                  }
   1433                }
   1434              }
   1435              else
   1436              {
   1437                if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   000067   90....       MOV     DPTR,#devStartMode
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   6401         XRL     A,#0x1
   \   00006D   7036         JNZ     ??ZDApp_ProcessNetworkJoin_6
   \   00006F   90....       MOV     DPTR,#retryCnt
   \   000072   E0           MOVX    A,@DPTR
   \   000073   04           INC     A
   \   000074   F0           MOVX    @DPTR,A
   \   000075   C3           CLR     C
   \   000076   9403         SUBB    A,#0x3
   \   000078   402B         JC      ??ZDApp_ProcessNetworkJoin_6
   1438                {
   1439                  if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   00007A   90....       MOV     DPTR,#_NIB + 33
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F4           CPL     A
   \   00007F   7003         JNZ     ??ZDApp_ProcessNetworkJoin_7
   \   000081   A3           INC     DPTR
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   000084   600D         JZ      ??ZDApp_ProcessNetworkJoin_8
   \   000086   90....       MOV     DPTR,#_NIB + 33
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   64FE         XRL     A,#0xfe
   \   00008C   7003         JNZ     ??ZDApp_ProcessNetworkJoin_9
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   000091   7006         JNZ     ??ZDApp_ProcessNetworkJoin_10
   1440                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   000093   90....       MOV     DPTR,#devStartMode
   \   000096   E4           CLR     A
   \   000097   800B         SJMP    ??ZDApp_ProcessNetworkJoin_11
   1441                  else
   1442                  {
   1443                    devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   000099   90....       MOV     DPTR,#devStartMode
   \   00009C   7403         MOV     A,#0x3
   \   00009E   F0           MOVX    @DPTR,A
   1444                    _tmpRejoinState = true;
   \   00009F   90....       MOV     DPTR,#_tmpRejoinState
   \   0000A2   7401         MOV     A,#0x1
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   0000A4   F0           MOVX    @DPTR,A
   1445                  }
   1446                }
   1447          
   1448                if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   1449                     (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   0000A5                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000A5   12....       LCALL   ??NLME_GetShortAddr?relay
   \   0000A8   8A..         MOV     ?V0 + 0,R2
   \   0000AA   8B..         MOV     ?V0 + 1,R3
   \   0000AC   74FE         MOV     A,#-0x2
   \   0000AE   65..         XRL     A,?V0 + 0
   \   0000B0   7004         JNZ     ??ZDApp_ProcessNetworkJoin_12
   \   0000B2   74FF         MOV     A,#-0x1
   \   0000B4   65..         XRL     A,?V0 + 1
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   0000B6   700D         JNZ     ??ZDApp_ProcessNetworkJoin_13
   \   0000B8   90....       MOV     DPTR,#_NIB + 20
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   64FE         XRL     A,#0xfe
   \   0000BE   7003         JNZ     ??ZDApp_ProcessNetworkJoin_14
   \   0000C0   A3           INC     DPTR
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   0000C3   601B         JZ      ??ZDApp_ProcessNetworkJoin_15
   1450                {
   1451                  uint16 addr = INVALID_NODE_ADDR;
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   0000C5   85..82       MOV     DPL,?XSP + 0
   \   0000C8   85..83       MOV     DPH,?XSP + 1
   \   0000CB   74FE         MOV     A,#-0x2
   \   0000CD   F0           MOVX    @DPTR,A
   \   0000CE   A3           INC     DPTR
   \   0000CF   04           INC     A
   \   0000D0   F0           MOVX    @DPTR,A
   1452                  // Invalidate nwk addr so end device does not use in its data reqs.
   1453                  _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   0000D1   90....       MOV     DPTR,#_NIB + 20
   \   0000D4   14           DEC     A
   \   0000D5   F0           MOVX    @DPTR,A
   \   0000D6   A3           INC     DPTR
   \   0000D7   04           INC     A
   \   0000D8   12....       LCALL   ?Subroutine8 & 0xFFFF
   1454                  ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   1455                }
   \                     ??CrossCallReturnLabel_0:
   \   0000DB   7953         MOV     R1,#0x53
   \   0000DD   12....       LCALL   ??ZMacSetReq?relay
   1456          
   1457                // Clear the neighbor Table and network discovery tables.
   1458                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   0000E0                ; Setup parameters for call to function nwkNeighborInitTable
   \   0000E0   12....       LCALL   ??nwkNeighborInitTable?relay
   1459                NLME_NwkDiscTerm();
   \   0000E3                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0000E3   12....       LCALL   ??NLME_NwkDiscTerm?relay
   1460          
   1461                zdoDiscCounter = 1;
   \   0000E6   90....       MOV     DPTR,#zdoDiscCounter
   \   0000E9   7401         MOV     A,#0x1
   \   0000EB   F0           MOVX    @DPTR,A
   1462          
   1463          //      ZDApp_NetworkInit( (uint16)
   1464          //                         ((NWK_START_DELAY * (osal_rand() & 0x0F)) +
   1465          //                          (NWK_START_DELAY * 5)) );
   1466                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1467                     + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   0000EC                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0000EC                ; Setup parameters for call to function osal_rand
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   0000EC   12....       LCALL   ??osal_rand?relay
   \   0000EF   EA           MOV     A,R2
   \   0000F0   547F         ANL     A,#0x7f
   \   0000F2   2464         ADD     A,#0x64
   \   0000F4   FA           MOV     R2,A
   \   0000F5   7B00         MOV     R3,#0x0
   \   0000F7   12....       LCALL   ??ZDApp_NetworkInit?relay
   \   0000FA   02....       LJMP    ??CrossCallReturnLabel_58 & 0xFFFF
   1468              }
   1469            }
   1470            else if ( devState == DEV_NWK_ORPHAN || devState == DEV_NWK_REJOIN )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   6404         XRL     A,#0x4
   \   000100   6003         JZ      $+5
   \   000102   02....       LJMP    ??ZDApp_ProcessNetworkJoin_17 & 0xFFFF
   1471            {
   1472              // results of an orphaning attempt by this device
   1473              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   000105   90....       MOV     DPTR,#nwkStatus
   \   000108   E0           MOVX    A,@DPTR
   \   000109   7033         JNZ     ??ZDApp_ProcessNetworkJoin_18
   1474              {
   1475                if ( ZG_SECURE_ENABLED )
   1476                {
   1477                  ZDApp_RestoreNwkKey();
   1478                }
   1479          
   1480                devState = DEV_END_DEVICE;
   \   00010B   12....       LCALL   ?Subroutine7 & 0xFFFF
   1481                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   1482                // setup Power Manager Device
   1483          #if defined ( POWER_SAVING )
   1484                osal_pwrmgr_device( PWRMGR_BATTERY );
   1485          #endif
   1486          
   1487                if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??CrossCallReturnLabel_68:
   \   00010E   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000111   E0           MOVX    A,@DPTR
   \   000112   A2E3         MOV     C,0xE0 /* A   */.3
   \   000114   5015         JNC     ??ZDApp_ProcessNetworkJoin_19
   1488                {
   1489                  // The receiver is on, turn network layer polling off.
   1490                  NLME_SetPollRate( 0 );
   \   000116                ; Setup parameters for call to function NLME_SetPollRate
   \   000116   7A00         MOV     R2,#0x0
   \   000118   7B00         MOV     R3,#0x0
   \   00011A   12....       LCALL   ??NLME_SetPollRate?relay
   1491                  NLME_SetQueuedPollRate( 0 );
   \   00011D                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   00011D   7A00         MOV     R2,#0x0
   \   00011F   7B00         MOV     R3,#0x0
   \   000121   12....       LCALL   ??NLME_SetQueuedPollRate?relay
   1492                  NLME_SetResponseRate( 0 );
   \   000124                ; Setup parameters for call to function NLME_SetResponseRate
   \   000124   7A00         MOV     R2,#0x0
   \   000126   7B00         MOV     R3,#0x0
   \   000128   12....       LCALL   ??NLME_SetResponseRate?relay
   1493                }
   1494          
   1495                if ( ZSTACK_ROUTER_BUILD )
   1496                {
   1497                  // NOTE: first two parameters are not used, see NLMEDE.h for details
   1498                  if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_19:
   \   00012B   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00012E   6009         JZ      ??ZDApp_ProcessNetworkJoin_20
   1499                  {
   1500                    NLME_StartRouterRequest( 0, 0, false );
   \   000130                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000130   7B00         MOV     R3,#0x0
   \   000132   7A00         MOV     R2,#0x0
   \   000134   7900         MOV     R1,#0x0
   \   000136   12....       LCALL   ??NLME_StartRouterRequest?relay
   1501                  }
   1502                }
   1503          
   1504                ZDApp_AnnounceNewAddress();
   \                     ??ZDApp_ProcessNetworkJoin_20:
   \   000139                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000139   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   \   00013C   805F         SJMP    ??CrossCallReturnLabel_58
   1505              }
   1506              else
   1507              {
   1508                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   00013E   90....       MOV     DPTR,#devStartMode
   \   000141   E0           MOVX    A,@DPTR
   \   000142   6401         XRL     A,#0x1
   \   000144   7040         JNZ     ??ZDApp_ProcessNetworkJoin_21
   1509                {
   1510                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   000146   90....       MOV     DPTR,#retryCnt
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   04           INC     A
   \   00014B   F0           MOVX    @DPTR,A
   \   00014C   C3           CLR     C
   \   00014D   9404         SUBB    A,#0x4
   \   00014F   502D         JNC     ??ZDApp_ProcessNetworkJoin_22
   1511                  {
   1512                    if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   000151   90....       MOV     DPTR,#_NIB + 33
   \   000154   E0           MOVX    A,@DPTR
   \   000155   F4           CPL     A
   \   000156   7003         JNZ     ??ZDApp_ProcessNetworkJoin_23
   \   000158   A3           INC     DPTR
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_23:
   \   00015B   600D         JZ      ??ZDApp_ProcessNetworkJoin_24
   \   00015D   90....       MOV     DPTR,#_NIB + 33
   \   000160   E0           MOVX    A,@DPTR
   \   000161   64FE         XRL     A,#0xfe
   \   000163   7003         JNZ     ??ZDApp_ProcessNetworkJoin_25
   \   000165   A3           INC     DPTR
   \   000166   E0           MOVX    A,@DPTR
   \   000167   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_25:
   \   000168   7007         JNZ     ??ZDApp_ProcessNetworkJoin_26
   1513                      devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_24:
   \   00016A   90....       MOV     DPTR,#devStartMode
   \   00016D   E4           CLR     A
   \                     ??ZDApp_ProcessNetworkJoin_27:
   \   00016E   F0           MOVX    @DPTR,A
   \   00016F   8015         SJMP    ??ZDApp_ProcessNetworkJoin_21
   1514                    else
   1515                    {
   1516                      devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_26:
   \   000171   90....       MOV     DPTR,#devStartMode
   \   000174   7403         MOV     A,#0x3
   \   000176   F0           MOVX    @DPTR,A
   1517                      _tmpRejoinState = true;
   \   000177   90....       MOV     DPTR,#_tmpRejoinState
   \   00017A   7401         MOV     A,#0x1
   \   00017C   80F0         SJMP    ??ZDApp_ProcessNetworkJoin_27
   1518                    }
   1519                  }
   1520                  // Do a normal join to the network after certain times of rejoin retries
   1521                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_22:
   \   00017E   90....       MOV     DPTR,#AIB_apsUseInsecureJoin
   \   000181   E0           MOVX    A,@DPTR
   \   000182   6401         XRL     A,#0x1
   \   000184   60E4         JZ      ??ZDApp_ProcessNetworkJoin_24
   1522                  {
   1523                    devStartMode = MODE_JOIN;
   1524                  }
   1525                }
   1526          
   1527                // Clear the neighbor Table and network discovery tables.
   1528                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_21:
   \   000186                ; Setup parameters for call to function nwkNeighborInitTable
   \   000186   12....       LCALL   ??nwkNeighborInitTable?relay
   1529                NLME_NwkDiscTerm();
   \   000189                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000189   12....       LCALL   ??NLME_NwkDiscTerm?relay
   1530          
   1531                // setup a retry for later...
   1532                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1533                     + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
   \   00018C                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00018C                ; Setup parameters for call to function osal_rand
   \   00018C   02....       LJMP    ??ZDApp_ProcessNetworkJoin_16 & 0xFFFF
   1534              }
   1535            }
   1536          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1537            else
   1538            {
   1539              // Assume from address conflict
   1540              if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   00018F   90....       MOV     DPTR,#_NIB + 96
   \   000192   E0           MOVX    A,@DPTR
   \   000193   6402         XRL     A,#0x2
   \   000195   7006         JNZ     ??CrossCallReturnLabel_58
   1541              {
   1542                // Notify the network
   1543                ZDApp_AnnounceNewAddress();
   \   000197                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000197   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   1544          
   1545                // Notify apps
   1546                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00019A                ; Setup parameters for call to function osal_set_event
   \   00019A   12....       LCALL   ?Subroutine13 & 0xFFFF
   1547              }
   1548            }
   1549          #endif
   1550          }
   \                     ??CrossCallReturnLabel_58:
   \   00019D                REQUIRE ?Subroutine6
   \   00019D                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7402         MOV     A,#0x2
   \   000002   02....       LJMP    ??Subroutine51_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZMacSetReq
   \   000001                ; Setup parameters for indirect call
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   AA82         MOV     R2,DPL
   \   000009   AB83         MOV     R3,DPH
   \   00000B   22           RET
   1551          
   1552          /*********************************************************************
   1553           * @fn      ZDApp_SaveNwkKey()
   1554           *
   1555           * @brief   Save off the Network key information.
   1556           *
   1557           * @param   none
   1558           *
   1559           * @return  none
   1560           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7415         MOV     A,#0x15
   \   000002                REQUIRE ??Subroutine40_0
   \   000002                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1561          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1562          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1563            nwkActiveKeyItems keyItems;
   1564          
   1565            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AA82         MOV     R2,DPL
   \   000012   AB83         MOV     R3,DPH
   \   000014   12....       LCALL   ??SSP_ReadNwkActiveKey?relay
   1566            keyItems.frameCounter++;
   \   000017   90....       MOV     DPTR,#__Constant_1
   \   00001A   78..         MOV     R0,#?V0 + 0
   \   00001C   12....       LCALL   ?L_MOV_X
   \   00001F   7411         MOV     A,#0x11
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?L_ADD_TO_X
   1567          
   1568            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1569                          (void *)&keyItems );
   \   000029                ; Setup parameters for call to function osal_nv_write
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   8582..       MOV     ?V0 + 0,DPL
   \   000032   8583..       MOV     ?V0 + 1,DPH
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   75..15       MOV     ?V0 + 0,#0x15
   \   00003D   75..00       MOV     ?V0 + 1,#0x0
   \   000040   78..         MOV     R0,#?V0 + 0
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   7C00         MOV     R4,#0x0
   \   000047   7D00         MOV     R5,#0x0
   \   000049   7A82         MOV     R2,#-0x7e
   \   00004B   7B00         MOV     R3,#0x0
   \   00004D   12....       LCALL   ??osal_nv_write?relay
   \   000050   7404         MOV     A,#0x4
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
   1570          
   1571            nwkFrameCounterChanges = 0;
   \   000055   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   000058   E4           CLR     A
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   F0           MOVX    @DPTR,A
   1572          
   1573            // Clear copy in RAM before return.
   1574            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   00005C                ; Setup parameters for call to function osal_memset
   \   00005C   7C15         MOV     R4,#0x15
   \   00005E   FD           MOV     R5,A
   \   00005F   F9           MOV     R1,A
   \   000060   85..82       MOV     DPL,?XSP + 0
   \   000063   85..83       MOV     DPH,?XSP + 1
   \   000066   AA82         MOV     R2,DPL
   \   000068   AB83         MOV     R3,DPH
   \   00006A   12....       LCALL   ??osal_memset?relay
   1575          
   1576          }
   \   00006D   02....       LJMP    ?Subroutine2 & 0xFFFF
   1577          
   1578          /*********************************************************************
   1579           * @fn      ZDApp_ResetNwkKey()
   1580           *
   1581           * @brief   Reset the Network key information in NV.
   1582           *
   1583           * @param   none
   1584           *
   1585           * @return  none
   1586           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1587          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1588          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1589            nwkActiveKeyItems keyItems;
   1590          
   1591            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV     R4,#0x15
   \   00000C   12....       LCALL   ?Subroutine31 & 0xFFFF
   1592            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1593                          (void *)&keyItems );
   \                     ??CrossCallReturnLabel_41:
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   75..15       MOV     ?V0 + 0,#0x15
   \   000015   75..00       MOV     ?V0 + 1,#0x0
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001D   7C00         MOV     R4,#0x0
   \   00001F   7D00         MOV     R5,#0x0
   \   000021   7A82         MOV     R2,#-0x7e
   \   000023   7B00         MOV     R3,#0x0
   \   000025   12....       LCALL   ??osal_nv_write?relay
   \   000028   7404         MOV     A,#0x4
   \   00002A   12....       LCALL   ?DEALLOC_XSTACK8
   1594          }
   \   00002D   7415         MOV     A,#0x15
   \   00002F   02....       LJMP    ??Subroutine51_0 & 0xFFFF
   1595          
   1596          /*********************************************************************
   1597           * @fn      ZDApp_RestoreNwkKey()
   1598           *
   1599           * @brief
   1600           *
   1601           *   Save off the Network key information.
   1602           *
   1603           * @param   none
   1604           *
   1605           * @return  true if restored from NV, false if not
   1606           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1607          uint8 ZDApp_RestoreNwkKey( void )
   \                     ZDApp_RestoreNwkKey:
   1608          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1609            nwkActiveKeyItems keyItems;
   1610            uint8 ret = false;
   \   00000A   7E00         MOV     R6,#0x0
   1611          
   1612            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1613                == ZSUCCESS )
   \   00000C                ; Setup parameters for call to function osal_nv_read
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   8582..       MOV     ?V0 + 0,DPL
   \   000015   8583..       MOV     ?V0 + 1,DPH
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001D   75..15       MOV     ?V0 + 0,#0x15
   \   000020   8E..         MOV     ?V0 + 1,R6
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV     R4,#0x0
   \   000029   7D00         MOV     R5,#0x0
   \   00002B   7A82         MOV     R2,#-0x7e
   \   00002D   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000030   12....       LCALL   ?DEALLOC_XSTACK8
   \   000033   E9           MOV     A,R1
   \   000034   703F         JNZ     ??ZDApp_RestoreNwkKey_0
   1614            {
   1615              if ( keyItems.frameCounter > 0 )
   \   000036   7411         MOV     A,#0x11
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   78..         MOV     R0,#?V0 + 0
   \   00003D   12....       LCALL   ?L_MOV_X
   \   000040   E5..         MOV     A,?V0 + 0
   \   000042   45..         ORL     A,?V0 + 1
   \   000044   45..         ORL     A,?V0 + 2
   \   000046   45..         ORL     A,?V0 + 3
   \   000048   6021         JZ      ??ZDApp_RestoreNwkKey_1
   1616              {
   1617                // Restore the key information
   1618                keyItems.frameCounter += MAX_NWK_FRAMECOUNTER_CHANGES;
   \   00004A   90....       MOV     DPTR,#__Constant_3e8
   \   00004D   78..         MOV     R0,#?V0 + 0
   \   00004F   12....       LCALL   ?L_MOV_X
   \   000052   7411         MOV     A,#0x11
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   78..         MOV     R0,#?V0 + 0
   \   000059   12....       LCALL   ?L_ADD_TO_X
   1619                nwkFrameCounter = keyItems.frameCounter;
   \   00005C   7411         MOV     A,#0x11
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   12....       LCALL   ?XLOAD_R2345
   \   000064   90....       MOV     DPTR,#nwkFrameCounter
   \   000067   12....       LCALL   ?XSTORE_R2345
   1620                ret = true;
   \   00006A   0E           INC     R6
   1621              }
   1622          
   1623              // Force a save for the first frame counter increment
   1624              nwkFrameCounterChanges = MAX_NWK_FRAMECOUNTER_CHANGES + 1;
   \                     ??ZDApp_RestoreNwkKey_1:
   \   00006B   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00006E   74E9         MOV     A,#-0x17
   \   000070   F0           MOVX    @DPTR,A
   \   000071   A3           INC     DPTR
   \   000072   7403         MOV     A,#0x3
   \   000074   F0           MOVX    @DPTR,A
   1625            }
   1626            // Clear copy in RAM before return.
   1627            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   000075                ; Setup parameters for call to function osal_memset
   \   000075   7C15         MOV     R4,#0x15
   \   000077   7D00         MOV     R5,#0x0
   \   000079   7900         MOV     R1,#0x0
   \   00007B   85..82       MOV     DPL,?XSP + 0
   \   00007E   85..83       MOV     DPH,?XSP + 1
   \   000081   AA82         MOV     R2,DPL
   \   000083   AB83         MOV     R3,DPH
   \   000085   12....       LCALL   ??osal_memset?relay
   1628          
   1629            return ( ret );
   \   000088   EE           MOV     A,R6
   \   000089   F9           MOV     R1,A
   \   00008A   02....       LJMP    ?Subroutine2 & 0xFFFF
   1630          }
   1631          
   1632          /*********************************************************************
   1633           * @fn      ZDApp_ResetTimerStart
   1634           *
   1635           * @brief   Start the reset timer.
   1636           *
   1637           * @param   delay - delay time(ms) before reset
   1638           *
   1639           * @return  none
   1640           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1641          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   1642          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1643            // Start the rest timer
   1644            osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   000004                ; Setup parameters for call to function osal_start_timerEx
   \   000004   EA           MOV     A,R2
   \   000005   FC           MOV     R4,A
   \   000006   EB           MOV     A,R3
   \   000007   FD           MOV     R5,A
   \   000008   7A04         MOV     R2,#0x4
   \   00000A   7B00         MOV     R3,#0x0
   \   00000C   02....       LJMP    ?Subroutine3 & 0xFFFF
   1645          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000003                REQUIRE ??Subroutine45_0
   \   000003                ; // Fall through to label ??Subroutine45_0
   1646          
   1647          /*********************************************************************
   1648           * @fn      ZDApp_ResetTimerCancel
   1649           *
   1650           * @brief   Cancel the reset timer.
   1651           *
   1652           * @param   none
   1653           *
   1654           * @return  none
   1655           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1656          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   1657          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1658            // Cancel the reset timer
   1659            osal_stop_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET );
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A04         MOV     R2,#0x4
   \   000006   7B00         MOV     R3,#0x0
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??osal_stop_timerEx?relay
   1660          }
   \   000010   02....       LJMP    ??Subroutine45_0 & 0xFFFF
   1661          
   1662          /*********************************************************************
   1663           * @fn      ZDApp_LeaveCtrlInit
   1664           *
   1665           * @brief   Initialize the leave control logic.
   1666           *
   1667           * @param   none
   1668           *
   1669           * @return  none
   1670           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1671          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   1672          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1673            uint8 status;
   1674          
   1675          
   1676            // Initialize control state
   1677            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   1678          
   1679            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   1680                                        sizeof(ZDApp_LeaveCtrl),
   1681                                        &ZDApp_LeaveCtrl );
   1682          
   1683            if ( status == ZSUCCESS )
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   75....       MOV     ?V0 + 0,#ZDApp_LeaveCtrl & 0xff
   \   00000D   75....       MOV     ?V0 + 1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000010   78..         MOV     R0,#?V0 + 0
   \   000012   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000015   7C01         MOV     R4,#0x1
   \   000017   7D00         MOV     R5,#0x0
   \   000019   7A85         MOV     R2,#-0x7b
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   ??osal_nv_item_init?relay
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?DEALLOC_XSTACK8
   \   000025   E9           MOV     A,R1
   \   000026   701C         JNZ     ??ZDApp_LeaveCtrlInit_0
   1684            {
   1685              // Read saved control
   1686              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   1687                            0,
   1688                            sizeof( uint8 ),
   1689                            &ZDApp_LeaveCtrl);
   \   000028                ; Setup parameters for call to function osal_nv_read
   \   000028   78..         MOV     R0,#?V0 + 0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002D   75..01       MOV     ?V0 + 0,#0x1
   \   000030   75..00       MOV     ?V0 + 1,#0x0
   \   000033   78..         MOV     R0,#?V0 + 0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   7C00         MOV     R4,#0x0
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   7A85         MOV     R2,#-0x7b
   \   00003E   12....       LCALL   ?Subroutine32 & 0xFFFF
   1690            }
   \                     ??CrossCallReturnLabel_44:
   \   000041   12....       LCALL   ?DEALLOC_XSTACK8
   1691          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   000044   02....       LJMP    ??Subroutine52_0 & 0xFFFF
   1692          
   1693          /*********************************************************************
   1694           * @fn      ZDApp_LeaveCtrlSet
   1695           *
   1696           * @brief   Set the leave control logic.
   1697           *
   1698           * @param   ra - reassociate flag
   1699           *
   1700           * @return  none
   1701           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1702          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   1703          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1704            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000007   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000A   7401         MOV     A,#0x1
   \   00000C   F0           MOVX    @DPTR,A
   1705          
   1706            if ( ra == TRUE )
   \   00000D   6E           XRL     A,R6
   \   00000E   7003         JNZ     ??ZDApp_LeaveCtrlSet_0
   1707            {
   1708              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   000010   7403         MOV     A,#0x3
   \   000012   F0           MOVX    @DPTR,A
   1709            }
   1710          
   1711            // Write the leave control
   1712            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1713                           0,
   1714                           sizeof( uint8 ),
   1715                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000013                ; Setup parameters for call to function osal_nv_write
   \   000013   02....       LJMP    ?Subroutine1 & 0xFFFF
   1716          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   75....       MOV     ?V0 + 0,#ZDApp_LeaveCtrl & 0xff
   \   000003   75....       MOV     ?V0 + 1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000006   78..         MOV     R0,#?V0 + 0
   \   000008   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000B   75..01       MOV     ?V0 + 0,#0x1
   \   00000E   75..00       MOV     ?V0 + 1,#0x0
   \   000011   78..         MOV     R0,#?V0 + 0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7C00         MOV     R4,#0x0
   \   000018   7D00         MOV     R5,#0x0
   \   00001A   7A85         MOV     R2,#-0x7b
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   12....       LCALL   ??osal_nv_write?relay
   \   000021   7404         MOV     A,#0x4
   \   000023                REQUIRE ??Subroutine51_0
   \   000023                ; // Fall through to label ??Subroutine51_0
   1717          
   1718          /*********************************************************************
   1719           * @fn      ZDApp_LeaveCtrlReset
   1720           *
   1721           * @brief   Re-initialize the leave control logic.
   1722           *
   1723           * @param   none
   1724           *
   1725           * @return  none
   1726           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1727          void ZDApp_LeaveCtrlReset( void )
   \                     ZDApp_LeaveCtrlReset:
   1728          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1729            // Set leave control to initialized state
   1730            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   1731          
   1732            // Write initialized control
   1733            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1734                          0,
   1735                          sizeof( uint8 ),
   1736                          &ZDApp_LeaveCtrl);
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A   02....       LJMP    ?Subroutine1 & 0xFFFF
   1737          }
   1738          
   1739          /*********************************************************************
   1740           * @fn      ZDApp_LeaveCtrlBypass
   1741           *
   1742           * @brief   Check if NV restore should be skipped during a leave reset.
   1743           *
   1744           * @param   none
   1745           *
   1746           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   1747           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1748          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   1749          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1750            uint8 bypass;
   1751          
   1752            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   1753            {
   1754              bypass = TRUE;
   1755            }
   1756            else
   1757            {
   1758              bypass = FALSE;
   1759            }
   1760          
   1761            return bypass;
   \   000004   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000A   E4           CLR     A
   \   00000B   33           RLC     A
   \   00000C   F9           MOV     R1,A
   \   00000D   80..         SJMP    ??Subroutine45_0
   1762          }
   1763          
   1764          /*********************************************************************
   1765           * @fn      ZDApp_LeaveCtrlStartup
   1766           *
   1767           * @brief   Check for startup conditions during a leave reset.
   1768           *
   1769           * @param   state      - devState_t determined by leave control logic
   1770           * @param   startDelay - startup delay
   1771           *
   1772           * @return  none
   1773           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1774          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   1775          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1776            *startDelay = 0;
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   F0           MOVX    @DPTR,A
   1777          
   1778            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00000C   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   A2E0         MOV     C,0xE0 /* A   */.0
   \   000012   5019         JNC     ??ZDApp_LeaveCtrlStartup_0
   1779            {
   1780              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000014   A2E1         MOV     C,0xE0 /* A   */.1
   \   000016   500C         JNC     ??ZDApp_LeaveCtrlStartup_1
   1781              {
   1782                *startDelay = LEAVE_RESET_DELAY;
   \   000018   8C82         MOV     DPL,R4
   \   00001A   8D83         MOV     DPH,R5
   \   00001C   7488         MOV     A,#-0x78
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   7413         MOV     A,#0x13
   \   000022   8005         SJMP    ??ZDApp_LeaveCtrlStartup_2
   1783              }
   1784              else
   1785              {
   1786                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   E4           CLR     A
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   000029   F0           MOVX    @DPTR,A
   1787              }
   1788          
   1789              // Reset leave control logic
   1790              ZDApp_LeaveCtrlReset();
   \   00002A                ; Setup parameters for call to function ZDApp_LeaveCtrlReset
   \   00002A   12....       LCALL   ??ZDApp_LeaveCtrlReset?relay
   1791            }
   1792          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   00002D   80..         SJMP    ??Subroutine45_0
   1793          
   1794          /*********************************************************************
   1795           * @fn      ZDApp_LeaveReset
   1796           *
   1797           * @brief   Setup a device reset due to a leave indication/confirm.
   1798           *
   1799           * @param   ra - reassociate flag
   1800           *
   1801           * @return  none
   1802           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1803          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   1804          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1805            ZDApp_LeaveCtrlSet( ra );
   \   000005                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000005   12....       LCALL   ??ZDApp_LeaveCtrlSet?relay
   1806          
   1807            ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
   \   000008                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000008   7A88         MOV     R2,#-0x78
   \   00000A   7B13         MOV     R3,#0x13
   \   00000C   12....       LCALL   ??ZDApp_ResetTimerStart?relay
   1808          }
   \   00000F   80..         SJMP    ??Subroutine46_0
   1809          
   1810          /*********************************************************************
   1811           * @fn      ZDApp_LeaveUpdate
   1812           *
   1813           * @brief   Update local device data related to leaving device.
   1814           *
   1815           * @param   nwkAddr        - NWK address of leaving device
   1816           * @param   extAddr        - EXT address of leaving device
   1817           * @param   removeChildren - remove children of leaving device
   1818           *
   1819           * @return  none
   1820           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1821          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   1822                                  uint8 removeChildren )
   1823          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V0 + 2,R1
   1824            // Remove Apps Key for leaving device
   1825            ZDSecMgrDeviceRemoveByExtAddr(extAddr);
   \   000014                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   000014   EE           MOV     A,R6
   \   000015   FA           MOV     R2,A
   \   000016   EF           MOV     A,R7
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   ??ZDSecMgrDeviceRemoveByExtAddr?relay
   1826          
   1827            // Clear SECURITY bit from Address Manager
   1828            ZDSecMgrAddrClear( extAddr );
   \   00001B                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   00001B   EE           MOV     A,R6
   \   00001C   FA           MOV     R2,A
   \   00001D   EF           MOV     A,R7
   \   00001E   FB           MOV     R3,A
   \   00001F   12....       LCALL   ??ZDSecMgrAddrClear?relay
   1829          
   1830            if ( pbindRemoveDev )
   \   000022   90....       MOV     DPTR,#pbindRemoveDev
   \   000025   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000028   603C         JZ      ??ZDApp_LeaveUpdate_0
   1831            {
   1832              zAddrType_t devAddr;
   1833          
   1834              // Remove bind entry and all related data
   1835              devAddr.addrMode = Addr64Bit;
   \   00002A   7408         MOV     A,#0x8
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   7403         MOV     A,#0x3
   \   000031   F0           MOVX    @DPTR,A
   1836              osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
   \   000032                ; Setup parameters for call to function osal_memcpy
   \   000032   8E..         MOV     ?V0 + 4,R6
   \   000034   8F..         MOV     ?V0 + 5,R7
   \   000036   75..00       MOV     ?V0 + 6,#0x0
   \   000039   78..         MOV     R0,#?V0 + 4
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003E   7C08         MOV     R4,#0x8
   \   000040   7D00         MOV     R5,#0x0
   \   000042   7403         MOV     A,#0x3
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   AA82         MOV     R2,DPL
   \   000049   AB83         MOV     R3,DPH
   \   00004B   12....       LCALL   ??osal_memcpy?relay
   \   00004E   7403         MOV     A,#0x3
   \   000050   12....       LCALL   ?DEALLOC_XSTACK8
   1837          
   1838              pbindRemoveDev(&devAddr);
   \   000053                ; Setup parameters for indirect call
   \   000053   85..82       MOV     DPL,?XSP + 0
   \   000056   85..83       MOV     DPH,?XSP + 1
   \   000059   AA82         MOV     R2,DPL
   \   00005B   AB83         MOV     R3,DPH
   \   00005D   90....       MOV     DPTR,#pbindRemoveDev
   \   000060   12....       LCALL   ?Subroutine17 & 0xFFFF
   1839            }
   \                     ??CrossCallReturnLabel_103:
   \   000063   12....       LCALL   ?CALL_IND
   1840          
   1841            // Remove if child
   1842            if ( ZSTACK_ROUTER_BUILD )
   1843            {
   1844              NLME_RemoveChild( extAddr, removeChildren );
   \                     ??ZDApp_LeaveUpdate_0:
   \   000066                ; Setup parameters for call to function NLME_RemoveChild
   \   000066   A9..         MOV     R1,?V0 + 2
   \   000068   EE           MOV     A,R6
   \   000069   FA           MOV     R2,A
   \   00006A   EF           MOV     A,R7
   \   00006B   FB           MOV     R3,A
   \   00006C   12....       LCALL   ??NLME_RemoveChild?relay
   1845            }
   1846          
   1847            // Remove Routing table related entry
   1848            RTG_RemoveRtgEntry( nwkAddr, 0 );
   \   00006F                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   00006F   7900         MOV     R1,#0x0
   \   000071   AA..         MOV     R2,?V0 + 0
   \   000073   AB..         MOV     R3,?V0 + 1
   \   000075   12....       LCALL   ??RTG_RemoveRtgEntry?relay
   1849          
   1850            // Remove entry from neighborTable
   1851            nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
   \   000078                ; Setup parameters for call to function nwkNeighborRemove
   \   000078   90....       MOV     DPTR,#_NIB + 33
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   FC           MOV     R4,A
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   FD           MOV     R5,A
   \   000080   AA..         MOV     R2,?V0 + 0
   \   000082   AB..         MOV     R3,?V0 + 1
   \   000084   12....       LCALL   ??nwkNeighborRemove?relay
   1852          
   1853            // Schedule to save data to NV
   1854            ZDApp_NwkWriteNVRequest();
   \   000087                ; Setup parameters for call to function AddrMgrWriteNVRequest
   \   000087   12....       LCALL   ??AddrMgrWriteNVRequest?relay
   1855          }
   \   00008A   7409         MOV     A,#0x9
   \   00008C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008F   7F07         MOV     R7,#0x7
   \   000091   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine50_0
   \   000003                ; // Fall through to label ??Subroutine50_0
   1856          
   1857          /*********************************************************************
   1858           * @fn      ZDApp_NetworkDiscoveryReq
   1859           *
   1860           * @brief   Request a network discovery.
   1861           *
   1862           * @param  scanChannels -
   1863           * @param  scanDuration -
   1864           *
   1865           * @return  ZStatus_t
   1866           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1867          ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
   \                     ZDApp_NetworkDiscoveryReq:
   1868          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   1869            // Setup optional filters - tbd
   1870          
   1871            // Request NLME network discovery
   1872            return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
   \   000005                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000005   12....       LCALL   ??NLME_NetworkDiscoveryRequest?relay
   \   000008   02....       LJMP    ??Subroutine41_0 & 0xFFFF
   1873          }
   1874          
   1875          /*********************************************************************
   1876           * @fn      ZDApp_JoinReq
   1877           *
   1878           * @brief   Request the device to join a parent in a network.
   1879           *
   1880           * @param   channel -
   1881           * @param   panID -
   1882           *
   1883           * @return  ZStatus_t
   1884           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1885          ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
   \                     ZDApp_JoinReq:
   1886                                   uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
   1887          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 4,R1
   \   000007   8A..         MOV     ?V0 + 0,R2
   \   000009   8B..         MOV     ?V0 + 1,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   \   00000F   740E         MOV     A,#0xe
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 2,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V0 + 3,A
   \   00001B   7410         MOV     A,#0x10
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 5,A
   \   000023   7411         MOV     A,#0x11
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F9           MOV     R1,A
   1888            // Sync up the node with the stack profile (In the case where a pro device
   1889            // joins a non-pro network, or verse versa)
   1890            ZDApp_NodeProfileSync( stackProfile);
   \   00002A                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00002A   12....       LCALL   ??ZDApp_NodeProfileSync?relay
   1891          
   1892            // Request NLME Join Request
   1893            return NLME_JoinRequest(extendedPanID, panID,channel,
   1894                                    ZDO_Config_Node_Descriptor.CapabilityFlags,
   1895                                    chosenParent, parentDepth);
   \   00002D                ; Setup parameters for call to function NLME_JoinRequest
   \   00002D   78..         MOV     R0,#?V0 + 5
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000032   78..         MOV     R0,#?V0 + 2
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F5..         MOV     ?V0 + 2,A
   \   00003D   78..         MOV     R0,#?V0 + 2
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000042   A9..         MOV     R1,?V0 + 4
   \   000044   AC..         MOV     R4,?V0 + 0
   \   000046   AD..         MOV     R5,?V0 + 1
   \   000048   EE           MOV     A,R6
   \   000049   FA           MOV     R2,A
   \   00004A   EF           MOV     A,R7
   \   00004B   FB           MOV     R3,A
   \   00004C   12....       LCALL   ??NLME_JoinRequest?relay
   \   00004F   7404         MOV     A,#0x4
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
   \   000054                REQUIRE ?Subroutine4
   \   000054                ; // Fall through to label ?Subroutine4
   1896          
   1897          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1898          
   1899          /*********************************************************************
   1900           * @fn      ZDApp_DeviceConfigured
   1901           *
   1902           * @brief   Check to see if the local device is configured (i.e., part
   1903           *          of a network).
   1904           *
   1905           * @param   none
   1906           *
   1907           * @return  TRUE if configured. FALSE, otherwise.
   1908           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1909          uint8 ZDApp_DeviceConfigured( void )
   \                     ZDApp_DeviceConfigured:
   1910          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1911            uint16 nwkAddr = INVALID_NODE_ADDR;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   74FE         MOV     A,#-0x2
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   04           INC     A
   \   000015   F0           MOVX    @DPTR,A
   1912          
   1913            osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
   1914                          sizeof( uint16), &nwkAddr );
   \   000016                ; Setup parameters for call to function osal_nv_read
   \   000016   85..82       MOV     DPL,?XSP + 0
   \   000019   85..83       MOV     DPH,?XSP + 1
   \   00001C   8582..       MOV     ?V0 + 0,DPL
   \   00001F   8583..       MOV     ?V0 + 1,DPH
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   75..02       MOV     ?V0 + 0,#0x2
   \   00002A   75..00       MOV     ?V0 + 1,#0x0
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7C14         MOV     R4,#0x14
   \   000034   7D00         MOV     R5,#0x0
   \   000036   7A21         MOV     R2,#0x21
   \   000038   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   1915          
   1916            // Does the NIB have anything more than default?
   1917            return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
   \   00003E   85..82       MOV     DPL,?XSP + 0
   \   000041   85..83       MOV     DPH,?XSP + 1
   \   000044   E0           MOVX    A,@DPTR
   \   000045   64FE         XRL     A,#0xfe
   \   000047   7003         JNZ     ??ZDApp_DeviceConfigured_0
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F4           CPL     A
   \                     ??ZDApp_DeviceConfigured_0:
   \   00004C   7004         JNZ     ??ZDApp_DeviceConfigured_1
   \   00004E   7900         MOV     R1,#0x0
   \   000050   8002         SJMP    ??ZDApp_DeviceConfigured_2
   \                     ??ZDApp_DeviceConfigured_1:
   \   000052   7901         MOV     R1,#0x1
   \                     ??ZDApp_DeviceConfigured_2:
   \   000054   02....       LJMP    ?Subroutine6 & 0xFFFF
   1918          }
   1919          
   1920          /*********************************************************************
   1921           * CALLBACK FUNCTIONS
   1922           */
   1923          
   1924          
   1925          /*********************************************************************
   1926           * @fn      ZDApp_SendEventMsg()
   1927           *
   1928           * @brief
   1929           *
   1930           *   Sends a Network Join message
   1931           *
   1932           * @param  cmd - command ID
   1933           * @param  len - length (in bytes) of the buf field
   1934           * @param  buf - buffer for the rest of the message.
   1935           *
   1936           * @return  none
   1937           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1938          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   1939          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   1940            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   000008                ; Setup parameters for call to function ZDApp_SendMsg
   \   000008   FB           MOV     R3,A
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   12....       LCALL   ?Subroutine22 & 0xFFFF
   1941          }
   \                     ??CrossCallReturnLabel_25:
   \   00000E   02....       LJMP    ??Subroutine46_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   90....       MOV     DPTR,#ZDAppTaskID
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??ZDApp_SendMsg?relay
   \   000008   22           RET
   1942          
   1943          /*********************************************************************
   1944           * @fn      ZDApp_SendMsg()
   1945           *
   1946           * @brief   Sends a OSAL message
   1947           *
   1948           * @param  taskID - Where to send the message
   1949           * @param  cmd - command ID
   1950           * @param  len - length (in bytes) of the buf field
   1951           * @param  buf - buffer for the rest of the message.
   1952           *
   1953           * @return  none
   1954           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1955          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   1956          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 3,R1
   \   000007   8A..         MOV     ?V0 + 4,R2
   \   000009   8B..         MOV     ?V0 + 5,R3
   \   00000B   8C..         MOV     ?V0 + 0,R4
   \   00000D   8D..         MOV     ?V0 + 1,R5
   1957            osal_event_hdr_t *msgPtr;
   1958          
   1959            // Send the address to the task
   1960            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00000F                ; Setup parameters for call to function osal_msg_allocate
   \   00000F   8B..         MOV     ?V0 + 6,R3
   \   000011   AA..         MOV     R2,?V0 + 6
   \   000013   7B00         MOV     R3,#0x0
   \   000015   12....       LCALL   ??osal_msg_allocate?relay
   \   000018   8A..         MOV     ?V0 + 6,R2
   \   00001A   8B..         MOV     ?V0 + 7,R3
   \   00001C   AE..         MOV     R6,?V0 + 6
   \   00001E   AF..         MOV     R7,?V0 + 7
   1961            if ( msgPtr )
   \   000020   EE           MOV     A,R6
   \   000021   4F           ORL     A,R7
   \   000022   6031         JZ      ??ZDApp_SendMsg_0
   1962            {
   1963              if ( (len > 0) && (buf != NULL) )
   \   000024   E5..         MOV     A,?V0 + 5
   \   000026   601D         JZ      ??ZDApp_SendMsg_1
   \   000028   E5..         MOV     A,?V0 + 0
   \   00002A   45..         ORL     A,?V0 + 1
   \   00002C   6017         JZ      ??ZDApp_SendMsg_1
   1964                osal_memcpy( msgPtr, buf, len );
   \   00002E                ; Setup parameters for call to function osal_memcpy
   \   00002E   75..00       MOV     ?V0 + 2,#0x0
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000036   85....       MOV     ?V0 + 0,?V0 + 5
   \   000039   AC..         MOV     R4,?V0 + 0
   \   00003B   7D00         MOV     R5,#0x0
   \   00003D   12....       LCALL   ??osal_memcpy?relay
   \   000040   7403         MOV     A,#0x3
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   1965          
   1966              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_1:
   \   000045   8E82         MOV     DPL,R6
   \   000047   8F83         MOV     DPH,R7
   \   000049   E5..         MOV     A,?V0 + 4
   \   00004B   F0           MOVX    @DPTR,A
   1967              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   00004C                ; Setup parameters for call to function osal_msg_send
   \   00004C   EE           MOV     A,R6
   \   00004D   FA           MOV     R2,A
   \   00004E   EF           MOV     A,R7
   \   00004F   FB           MOV     R3,A
   \   000050   A9..         MOV     R1,?V0 + 3
   \   000052   12....       LCALL   ??osal_msg_send?relay
   1968            }
   1969          }
   \                     ??ZDApp_SendMsg_0:
   \   000055   7F08         MOV     R7,#0x8
   \   000057   02....       LJMP    ?BANKED_LEAVE_XDATA
   1970          
   1971          /*********************************************************************
   1972           * Call Back Functions from NWK  - API
   1973           */
   1974          
   1975          /*********************************************************************
   1976           * @fn          ZDO_NetworkDiscoveryConfirmCB
   1977           *
   1978           * @brief       This function returns a choice of PAN to join.
   1979           *
   1980           * @param       status - return status of the nwk discovery confirm
   1981           *
   1982           * @return      ZStatus_t
   1983           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1984          ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
   \                     ZDO_NetworkDiscoveryConfirmCB:
   1985          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   F0           MOVX    @DPTR,A
   1986            osal_event_hdr_t msg;
   1987          
   1988            // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
   1989            // Send ZDO_MGMT_NWK_DISC_RSP back
   1990          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1991            if ( zdappMgmtNwkDiscReqInProgress )
   1992            {
   1993              zdappMgmtNwkDiscReqInProgress = false;
   1994              ZDO_FinishProcessingMgmtNwkDiscReq();
   1995            }
   1996            else
   1997          #endif
   1998            {
   1999              // Pass the confirm to another task if it registers the callback
   2000              // Otherwise, pass the confirm to ZDApp.
   2001              if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
   \   000011   90....       MOV     DPTR,#zdoCBFunc + 4
   \   000014   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000017   6015         JZ      ??ZDO_NetworkDiscoveryConfirmCB_0
   2002              {
   2003                zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
   \   000019                ; Setup parameters for indirect call
   \   000019   85..82       MOV     DPL,?XSP + 0
   \   00001C   85..83       MOV     DPH,?XSP + 1
   \   00001F   AA82         MOV     R2,DPL
   \   000021   AB83         MOV     R3,DPH
   \   000023   90....       MOV     DPTR,#zdoCBFunc + 5
   \   000026   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   2004              }
   \                     ??CrossCallReturnLabel_97:
   \   000029   12....       LCALL   ?CALL_IND
   \   00002C   8016         SJMP    ??CrossCallReturnLabel_26
   2005              else
   2006              {
   2007                // Otherwise, send scan confirm to ZDApp task to proceed
   2008                msg.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   00002E   7402         MOV     A,#0x2
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E4           CLR     A
   \   000034   F0           MOVX    @DPTR,A
   2009                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
   \   000035                ; Setup parameters for call to function ZDApp_SendMsg
   \   000035   04           INC     A
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   AC82         MOV     R4,DPL
   \   00003B   AD83         MOV     R5,DPH
   \   00003D   7B02         MOV     R3,#0x2
   \   00003F   7A01         MOV     R2,#0x1
   \   000041   12....       LCALL   ?Subroutine22 & 0xFFFF
   2010              }
   2011            }
   2012            return (ZSuccess);
   \                     ??CrossCallReturnLabel_26:
   \   000044   7900         MOV     R1,#0x0
   \   000046   7403         MOV     A,#0x3
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004B   02....       LJMP    ??Subroutine45_0 & 0xFFFF
   2013          }  // ZDO_NetworkDiscoveryConfirmCB
   2014          
   2015          /*********************************************************************
   2016           * @fn          ZDApp_NwkDescListProcessing
   2017           *
   2018           * @brief       This function process the network discovery result and select
   2019           *              a parent device to join itself.
   2020           *
   2021           * @param       none
   2022           *
   2023           * @return      ZStatus_t
   2024           */
   2025          #define STACK_PROFILE_MAX 2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2026          networkDesc_t* ZDApp_NwkDescListProcessing(void)
   \                     ZDApp_NwkDescListProcessing:
   2027          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2028            networkDesc_t *pNwkDesc;
   2029            uint8 i, ResultCount = 0;
   \   000005   75..00       MOV     ?V0 + 0,#0x0
   2030            uint8 stackProfile;
   2031            uint8 stackProfilePro;
   2032            uint8 selected;
   2033          
   2034            // Count the number of nwk descriptors in the list
   2035            pNwkDesc = nwk_getNwkDescList();
   \   000008                ; Setup parameters for call to function nwk_getNwkDescList
   \   000008   12....       LCALL   ??nwk_getNwkDescList?relay
   \   00000B   8A..         MOV     ?V0 + 2,R2
   \   00000D   8B..         MOV     ?V0 + 3,R3
   \   00000F   AE..         MOV     R6,?V0 + 2
   \   000011   AF..         MOV     R7,?V0 + 3
   \   000013   8005         SJMP    ??CrossCallReturnLabel_90
   2036            while (pNwkDesc)
   2037            {
   2038              ResultCount++;
   \                     ??ZDApp_NwkDescListProcessing_0:
   \   000015   05..         INC     ?V0 + 0
   2039              pNwkDesc = pNwkDesc->nextDesc;
   \   000017   12....       LCALL   ?Subroutine20 & 0xFFFF
   2040            }
   \                     ??CrossCallReturnLabel_90:
   \   00001A   EE           MOV     A,R6
   \   00001B   4F           ORL     A,R7
   \   00001C   70F7         JNZ     ??ZDApp_NwkDescListProcessing_0
   2041          
   2042            // process discovery results
   2043            stackProfilePro = FALSE;
   \   00001E   75..00       MOV     ?V0 + 3,#0x0
   2044            selected = FALSE;
   2045          
   2046          
   2047            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   000021   75..00       MOV     ?V0 + 1,#0x0
   2048            {
   2049              pNwkDesc = nwk_getNwkDescList();
   \                     ??ZDApp_NwkDescListProcessing_1:
   \   000024                ; Setup parameters for call to function nwk_getNwkDescList
   \   000024   12....       LCALL   ??nwk_getNwkDescList?relay
   \   000027   8A..         MOV     ?V0 + 4,R2
   \   000029   8B..         MOV     ?V0 + 5,R3
   \   00002B   AE..         MOV     R6,?V0 + 4
   \   00002D   AF..         MOV     R7,?V0 + 5
   2050              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   00002F   75..00       MOV     ?V0 + 2,#0x0
   \   000032   8023         SJMP    ??CrossCallReturnLabel_91
   2051              {
   2052                if ( zgConfigPANID != 0xFFFF )
   2053                {
   2054                  // PAN Id is preconfigured. check if it matches
   2055                  if ( pNwkDesc->panId != zgConfigPANID )
   2056                    continue;
   2057                }
   2058          
   2059                if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID) == true )
   2060                {
   2061                  // If the extended Pan ID is commissioned to a non zero value
   2062                  // Only join the Pan that has match EPID
   2063                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   2064                    continue;
   2065          
   2066                }
   2067          
   2068                // check that network is allowing joining
   2069                if ( ZSTACK_ROUTER_BUILD )
   2070                {
   2071                  if ( stackProfilePro == FALSE )
   2072                  {
   2073                    if ( !pNwkDesc->routerCapacity )
   2074                    {
   2075                      continue;
   2076                    }
   2077                  }
   2078                  else
   2079                  {
   2080                    if ( !pNwkDesc->deviceCapacity )
   2081                    {
   2082                      continue;
   2083                    }
   2084                  }
   2085                }
   2086                else if ( ZSTACK_END_DEVICE_BUILD )
   2087                {
   2088                  if ( !pNwkDesc->deviceCapacity )
   2089                  {
   2090                    continue;
   2091                  }
   2092                }
   2093          
   2094                // check version of zigbee protocol
   2095                if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   2096                  continue;
   2097          
   2098                // check version of stack profile
   2099                if ( pNwkDesc->stackProfile != zgStackProfile  )
   2100                {
   2101                  if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   2102                      || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \                     ??ZDApp_NwkDescListProcessing_2:
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6402         XRL     A,#0x2
   \   000037   7012         JNZ     ??ZDApp_NwkDescListProcessing_3
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   6401         XRL     A,#0x1
   \   000046   7003         JNZ     ??ZDApp_NwkDescListProcessing_3
   2103                  {
   2104                    stackProfilePro = TRUE;
   \                     ??ZDApp_NwkDescListProcessing_4:
   \   000048   75..01       MOV     ?V0 + 3,#0x1
   2105                  }
   2106          
   2107                  if ( stackProfile == 0 )
   \                     ??ZDApp_NwkDescListProcessing_3:
   \   00004B   E5..         MOV     A,?V0 + 1
   \   00004D   6003         JZ      $+5
   \   00004F   02....       LJMP    ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
   \                     ??ZDApp_NwkDescListProcessing_6:
   \   000052   05..         INC     ?V0 + 2
   \   000054   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000057   E5..         MOV     A,?V0 + 2
   \   000059   C3           CLR     C
   \   00005A   95..         SUBB    A,?V0 + 0
   \   00005C   4003         JC      $+5
   \   00005E   02....       LJMP    ??ZDApp_NwkDescListProcessing_7 & 0xFFFF
   \   000061   90....       MOV     DPTR,#zgConfigPANID
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F4           CPL     A
   \   000066   7003         JNZ     ??ZDApp_NwkDescListProcessing_8
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F4           CPL     A
   \                     ??ZDApp_NwkDescListProcessing_8:
   \   00006B   600F         JZ      ??ZDApp_NwkDescListProcessing_9
   \   00006D   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000070   90....       MOV     DPTR,#zgConfigPANID
   \   000073   E0           MOVX    A,@DPTR
   \   000074   68           XRL     A,R0
   \   000075   7003         JNZ     ??ZDApp_NwkDescListProcessing_10
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   69           XRL     A,R1
   \                     ??ZDApp_NwkDescListProcessing_10:
   \   00007A   70D6         JNZ     ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_9:
   \   00007C                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   00007C   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   00007E   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000080   12....       LCALL   ??nwk_ExtPANIDValid?relay
   \   000083   E9           MOV     A,R1
   \   000084   6401         XRL     A,#0x1
   \   000086   7012         JNZ     ??ZDApp_NwkDescListProcessing_11
   \   000088                ; Setup parameters for call to function sAddrExtCmp
   \   000088   EE           MOV     A,R6
   \   000089   240B         ADD     A,#0xb
   \   00008B   FC           MOV     R4,A
   \   00008C   EF           MOV     A,R7
   \   00008D   3400         ADDC    A,#0x0
   \   00008F   FD           MOV     R5,A
   \   000090   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000092   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000094   12....       LCALL   ??sAddrExtCmp?relay
   \   000097   E9           MOV     A,R1
   \   000098   60B8         JZ      ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_11:
   \   00009A   E5..         MOV     A,?V0 + 3
   \   00009C   8E82         MOV     DPL,R6
   \   00009E   8F83         MOV     DPH,R7
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   7005         JNZ     ??ZDApp_NwkDescListProcessing_12
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   7006         JNZ     ??ZDApp_NwkDescListProcessing_13
   \   0000A8   80A8         SJMP    ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_12:
   \   0000AA   A3           INC     DPTR
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   60A4         JZ      ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_13:
   \   0000AE   8E82         MOV     DPL,R6
   \   0000B0   8F83         MOV     DPH,R7
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   F8           MOV     R0,A
   \   0000B9   90....       MOV     DPTR,#_NIB + 17
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   68           XRL     A,R0
   \   0000BE   7092         JNZ     ??ZDApp_NwkDescListProcessing_6
   \   0000C0   8E82         MOV     DPL,R6
   \   0000C2   8F83         MOV     DPH,R7
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   F8           MOV     R0,A
   \   0000CC   90....       MOV     DPTR,#zgStackProfile
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   68           XRL     A,R0
   \   0000D1   6039         JZ      ??ZDApp_NwkDescListProcessing_5
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   6401         XRL     A,#0x1
   \   0000D6   6003         JZ      $+5
   \   0000D8   02....       LJMP    ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
   \   0000DB   8E82         MOV     DPL,R6
   \   0000DD   8F83         MOV     DPH,R7
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   A3           INC     DPTR
   \   0000E4   A3           INC     DPTR
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   6402         XRL     A,#0x2
   \   0000E8   6003         JZ      $+5
   \   0000EA   02....       LJMP    ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
   \   0000ED   02....       LJMP    ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
   2108                  {
   2109                    continue;
   2110                  }
   2111                }
   2112          
   2113                break;
   2114              }
   2115          
   2116              if (i < ResultCount)
   2117              {
   2118               selected = TRUE;
   2119                break;
   2120              }
   2121          
   2122              // break if selected or stack profile pro wasn't found
   2123              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDApp_NwkDescListProcessing_7:
   \   0000F0   E5..         MOV     A,?V0 + 3
   \   0000F2   600C         JZ      ??ZDApp_NwkDescListProcessing_14
   2124              {
   2125                break;
   2126              }
   2127            }
   \   0000F4   05..         INC     ?V0 + 1
   \   0000F6   E5..         MOV     A,?V0 + 1
   \   0000F8   C3           CLR     C
   \   0000F9   9402         SUBB    A,#0x2
   \   0000FB   5003         JNC     $+5
   \   0000FD   02....       LJMP    ??ZDApp_NwkDescListProcessing_1 & 0xFFFF
   2128          
   2129            if ( i == ResultCount )
   \                     ??ZDApp_NwkDescListProcessing_14:
   \   000100   E5..         MOV     A,?V0 + 0
   \   000102   65..         XRL     A,?V0 + 2
   \   000104   7006         JNZ     ??ZDApp_NwkDescListProcessing_5
   2130            {
   2131              return (NULL);   // couldn't find appropriate PAN to join !
   \   000106   7A00         MOV     R2,#0x0
   \   000108   7B00         MOV     R3,#0x0
   \   00010A   8004         SJMP    ??ZDApp_NwkDescListProcessing_15
   2132            }
   2133            else
   2134            {
   2135              return (pNwkDesc);
   \                     ??ZDApp_NwkDescListProcessing_5:
   \   00010C   EE           MOV     A,R6
   \   00010D   FA           MOV     R2,A
   \   00010E   EF           MOV     A,R7
   \   00010F   FB           MOV     R3,A
   2136            }
   \                     ??ZDApp_NwkDescListProcessing_15:
   \   000110   02....       LJMP    ?Subroutine4 & 0xFFFF
   2137          }// ZDApp_NwkDescListProcessing()

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine47_0
   \   000004                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   EE           MOV     A,R6
   \   000001   2414         ADD     A,#0x14
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A                REQUIRE ??Subroutine48_0
   \   00000A                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET
   2138          
   2139          /*********************************************************************
   2140           * @fn          ZDO_NetworkFormationConfirmCB
   2141           *
   2142           * @brief       This function reports the results of the request to
   2143           *              initialize a coordinator in a network.
   2144           *
   2145           * @param       Status - Result of NLME_NetworkFormationRequest()
   2146           *
   2147           * @return      none
   2148           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000003                REQUIRE ??Subroutine46_0
   \   000003                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2149          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   2150          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   2151            nwkStatus = (byte)Status;
   \   000006   90....       MOV     DPTR,#nwkStatus
   \   000009   F0           MOVX    @DPTR,A
   2152          
   2153            if ( Status == ZSUCCESS )
   \   00000A   700A         JNZ     ??ZDO_NetworkFormationConfirmCB_0
   2154            {
   2155              // LED on shows Coordinator started
   2156              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   12....       LCALL   ?Subroutine26 & 0xFFFF
   2157          
   2158              // LED off forgets HOLD_AUTO_START
   2159              HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   2160          
   2161          #if defined ( ZBIT )
   2162              SIM_SetColor(0xd0ffd0);
   2163          #endif
   2164          
   2165              if ( devState == DEV_HOLD )
   \                     ??CrossCallReturnLabel_33:
   \   00000F   700C         JNZ     ??ZDO_NetworkFormationConfirmCB_1
   2166              {
   2167                // Began with HOLD_AUTO_START
   2168                devState = DEV_COORD_STARTING;
   \   000011   7408         MOV     A,#0x8
   \   000013   F0           MOVX    @DPTR,A
   \   000014   8007         SJMP    ??ZDO_NetworkFormationConfirmCB_1
   2169              }
   2170            }
   2171          #if defined(BLINK_LEDS)
   2172            else
   2173            {
   2174              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   000016                ; Setup parameters for call to function HalLedSet
   \   000016   7A04         MOV     R2,#0x4
   \   000018   7904         MOV     R1,#0x4
   \   00001A   12....       LCALL   ??HalLedSet?relay
   2175            }
   2176          #endif
   2177          
   2178            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_1:
   \   00001D                ; Setup parameters for call to function osal_set_event
   \   00001D   7A02         MOV     R2,#0x2
   \   00001F   02....       LJMP    ?Subroutine0 & 0xFFFF
   2179          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   7A01         MOV     R2,#0x1
   \   000002   7904         MOV     R1,#0x4
   \   000004   12....       LCALL   ??HalLedSet?relay
   \   000007                ; Setup parameters for call to function HalLedSet
   \   000007                ; Setup parameters for call to function HalLedSet
   \   000007                ; Setup parameters for call to function HalLedSet
   \   000007   7A00         MOV     R2,#0x0
   \   000009   7908         MOV     R1,#0x8
   \   00000B   12....       LCALL   ??HalLedSet?relay
   \   00000E   90....       MOV     DPTR,#devState
   \   000011   E0           MOVX    A,@DPTR
   \   000012   22           RET
   2180          
   2181          /****************************************************************************
   2182           * @fn          ZDApp_beaconIndProcessing
   2183           *
   2184           * @brief       This function processes the incoming beacon indication.
   2185           *
   2186           *              When another task (MT or App) is registered to process
   2187           *              beacon indication themselves, this function will parse the
   2188           *              beacon payload and pass the beacon descriptor to that task
   2189           *              If no other tasks registered, this function will process
   2190           *              the beacon payload and generate the network descriptor link
   2191           *              list.
   2192           *
   2193           * @param
   2194           *
   2195           * @return      none
   2196           *
   2197           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2198          void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
   \                     ZDO_beaconNotifyIndCB:
   2199          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   2200            // Pass the beacon Indication to another task if it registers the callback
   2201            // Otherwise, process the beacon notification here.
   2202            if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
   \   000009   90....       MOV     DPTR,#zdoCBFunc + 6
   \   00000C   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00000F   6009         JZ      ??ZDO_beaconNotifyIndCB_0
   2203            {
   2204              zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
   \   000011                ; Setup parameters for indirect call
   \   000011   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   2205            }
   \                     ??CrossCallReturnLabel_98:
   \   000014   12....       LCALL   ?CALL_IND
   \   000017   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2206            else
   2207            {
   2208              networkDesc_t *pNwkDesc;
   2209              networkDesc_t *pLastNwkDesc;
   2210              uint8 found = false;
   2211          
   2212              // Add the network to the Network Descriptor List
   2213              pNwkDesc = NwkDescList;
   \                     ??ZDO_beaconNotifyIndCB_0:
   \   00001A   90....       MOV     DPTR,#NwkDescList
   \   00001D   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   2214              pLastNwkDesc = NwkDescList;
   \                     ??CrossCallReturnLabel_88:
   \   000020   90....       MOV     DPTR,#NwkDescList
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 2,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 3,A
   \   00002A   802D         SJMP    ??CrossCallReturnLabel_92
   2215              while (pNwkDesc)
   2216              {
   2217                if ((pNwkDesc->panId == pBeacon->panID) &&
   2218                    (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
   \                     ??ZDO_beaconNotifyIndCB_2:
   \   00002C   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00002F   8A82         MOV     DPL,R2
   \   000031   8B83         MOV     DPH,R3
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   68           XRL     A,R0
   \   000037   7003         JNZ     ??ZDO_beaconNotifyIndCB_3
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   69           XRL     A,R1
   \                     ??ZDO_beaconNotifyIndCB_3:
   \   00003C   7014         JNZ     ??ZDO_beaconNotifyIndCB_4
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F8           MOV     R0,A
   \   000046   8A82         MOV     DPL,R2
   \   000048   8B83         MOV     DPH,R3
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   68           XRL     A,R0
   \   000050   6067         JZ      ??ZDO_beaconNotifyIndCB_5
   2219                {
   2220                  found = true;
   2221                  break;
   2222                }
   2223                pLastNwkDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_4:
   \   000052   8E..         MOV     ?V0 + 2,R6
   \   000054   8F..         MOV     ?V0 + 3,R7
   2224                pNwkDesc = pNwkDesc->nextDesc;
   \   000056   12....       LCALL   ?Subroutine20 & 0xFFFF
   2225              }
   \                     ??CrossCallReturnLabel_92:
   \   000059   EE           MOV     A,R6
   \   00005A   4F           ORL     A,R7
   \   00005B   70CF         JNZ     ??ZDO_beaconNotifyIndCB_2
   2226          
   2227              // If no existing descriptor found, make a new one and add to the list
   2228              if (found == false)
   2229              {
   2230                pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
   \   00005D                ; Setup parameters for call to function osal_mem_alloc
   \   00005D   7A16         MOV     R2,#0x16
   \   00005F   7B00         MOV     R3,#0x0
   \   000061   12....       LCALL   ??osal_mem_alloc?relay
   \   000064   8A..         MOV     ?V0 + 4,R2
   \   000066   8B..         MOV     ?V0 + 5,R3
   \   000068   AE..         MOV     R6,?V0 + 4
   \   00006A   AF..         MOV     R7,?V0 + 5
   2231                if ( !pNwkDesc )
   \   00006C   EE           MOV     A,R6
   \   00006D   4F           ORL     A,R7
   \   00006E   7003         JNZ     $+5
   \   000070   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2232                {
   2233                  // Memory alloc failed, discard this beacon
   2234                  return;
   2235                }
   2236          
   2237                // Clear the network descriptor
   2238                osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
   \   000073                ; Setup parameters for call to function osal_memset
   \   000073   7C16         MOV     R4,#0x16
   \   000075   7D00         MOV     R5,#0x0
   \   000077   7900         MOV     R1,#0x0
   \   000079   12....       LCALL   ??osal_memset?relay
   2239          
   2240                // Initialize the descriptor
   2241                pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   74FE         MOV     A,#-0x2
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   04           INC     A
   \   00008C   F0           MOVX    @DPTR,A
   2242                pNwkDesc->chosenRouterDepth = 0xFF;
   \   00008D   8E82         MOV     DPL,R6
   \   00008F   8F83         MOV     DPH,R7
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   F0           MOVX    @DPTR,A
   2243          
   2244                // Save new entry into the descriptor list
   2245                if ( !NwkDescList )
   \   00009C   90....       MOV     DPTR,#NwkDescList
   \   00009F   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000A2   7005         JNZ     ??ZDO_beaconNotifyIndCB_6
   2246                {
   2247                  NwkDescList = pNwkDesc;
   \   0000A4   90....       MOV     DPTR,#NwkDescList
   \   0000A7   800B         SJMP    ??CrossCallReturnLabel_106
   2248                }
   2249                else
   2250                {
   2251                  pLastNwkDesc->nextDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_6:
   \   0000A9   E5..         MOV     A,?V0 + 2
   \   0000AB   2414         ADD     A,#0x14
   \   0000AD   F582         MOV     DPL,A
   \   0000AF   E5..         MOV     A,?V0 + 3
   \   0000B1   12....       LCALL   ??Subroutine54_0 & 0xFFFF
   2252                }
   2253              }
   \                     ??CrossCallReturnLabel_106:
   \   0000B4   EE           MOV     A,R6
   \   0000B5   F0           MOVX    @DPTR,A
   \   0000B6   A3           INC     DPTR
   \   0000B7   EF           MOV     A,R7
   \   0000B8   F0           MOVX    @DPTR,A
   2254          
   2255              // Update the descriptor with the incoming beacon
   2256              pNwkDesc->stackProfile   = pBeacon->stackProfile;
   \                     ??ZDO_beaconNotifyIndCB_5:
   \   0000B9   85..82       MOV     DPL,?V0 + 0
   \   0000BC   85..83       MOV     DPH,?V0 + 1
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0000CB   A3           INC     DPTR
   \   0000CC   F0           MOVX    @DPTR,A
   2257              pNwkDesc->version        = pBeacon->protocolVersion;
   \   0000CD   E5..         MOV     A,?V0 + 0
   \   0000CF   2408         ADD     A,#0x8
   \   0000D1   F8           MOV     R0,A
   \   0000D2   E5..         MOV     A,?V0 + 1
   \   0000D4   3400         ADDC    A,#0x0
   \   0000D6   F9           MOV     R1,A
   \   0000D7   8882         MOV     DPL,R0
   \   0000D9   8983         MOV     DPH,R1
   \   0000DB   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0000DE   12....       LCALL   ?Subroutine9 & 0xFFFF
   2258              pNwkDesc->logicalChannel = pBeacon->logicalChannel;
   \                     ??CrossCallReturnLabel_2:
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   8E82         MOV     DPL,R6
   \   0000E4   8F83         MOV     DPH,R7
   \   0000E6   A3           INC     DPTR
   \   0000E7   A3           INC     DPTR
   \   0000E8   12....       LCALL   ?Subroutine34 & 0xFFFF
   2259              pNwkDesc->panId          = pBeacon->panID;
   \                     ??CrossCallReturnLabel_49:
   \   0000EB   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0000EE   8E82         MOV     DPL,R6
   \   0000F0   8F83         MOV     DPH,R7
   \   0000F2   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   2260              pNwkDesc->updateId       = pBeacon->updateID;
   \                     ??CrossCallReturnLabel_127:
   \   0000F5   E5..         MOV     A,?V0 + 0
   \   0000F7   240C         ADD     A,#0xc
   \   0000F9   F582         MOV     DPL,A
   \   0000FB   E5..         MOV     A,?V0 + 1
   \   0000FD   12....       LCALL   ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000100   C0E0         PUSH    A
   \   000102   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000105   D0E0         POP     A
   \   000107   F0           MOVX    @DPTR,A
   2261          
   2262              // Save the extended PAN ID from the beacon payload only if 1.1 version network
   2263              if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
   \   000108   8882         MOV     DPL,R0
   \   00010A   8983         MOV     DPH,R1
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   6401         XRL     A,#0x1
   \   00010F   6017         JZ      ??ZDO_beaconNotifyIndCB_7
   2264              {
   2265                osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
   \   000111                ; Setup parameters for call to function sAddrExtCpy
   \   000111   E5..         MOV     A,?V0 + 0
   \   000113   240D         ADD     A,#0xd
   \   000115   FC           MOV     R4,A
   \   000116   E5..         MOV     A,?V0 + 1
   \   000118   3400         ADDC    A,#0x0
   \   00011A   FD           MOV     R5,A
   \   00011B   EE           MOV     A,R6
   \   00011C   240B         ADD     A,#0xb
   \   00011E   FA           MOV     R2,A
   \   00011F   EF           MOV     A,R7
   \   000120   3400         ADDC    A,#0x0
   \   000122   FB           MOV     R3,A
   \   000123   12....       LCALL   ??sAddrExtCpy?relay
   \   000126   8011         SJMP    ??ZDO_beaconNotifyIndCB_8
   2266              }
   2267              else
   2268              {
   2269                osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_beaconNotifyIndCB_7:
   \   000128                ; Setup parameters for call to function osal_memset
   \   000128   7C08         MOV     R4,#0x8
   \   00012A   7D00         MOV     R5,#0x0
   \   00012C   79FF         MOV     R1,#-0x1
   \   00012E   EE           MOV     A,R6
   \   00012F   240B         ADD     A,#0xb
   \   000131   FA           MOV     R2,A
   \   000132   EF           MOV     A,R7
   \   000133   3400         ADDC    A,#0x0
   \   000135   FB           MOV     R3,A
   \   000136   12....       LCALL   ??osal_memset?relay
   2270              }
   2271          
   2272              // check if this device is a better choice to join...
   2273              // ...dont bother checking assocPermit flag is doing a rejoin
   2274              if ( ( pBeacon->LQI > gMIN_TREE_LINK_COST ) &&
   2275                  ( ( pBeacon->permitJoining == TRUE ) || ( _tmpRejoinState ) ) )
   \                     ??ZDO_beaconNotifyIndCB_8:
   \   000139   85..82       MOV     DPL,?V0 + 0
   \   00013C   85..83       MOV     DPH,?V0 + 1
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   A3           INC     DPTR
   \   000142   A3           INC     DPTR
   \   000143   A3           INC     DPTR
   \   000144   A3           INC     DPTR
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   A3           INC     DPTR
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   F8           MOV     R0,A
   \   00014B   90....       MOV     DPTR,#gMIN_TREE_LINK_COST
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   C3           CLR     C
   \   000150   98           SUBB    A,R0
   \   000151   4003         JC      $+5
   \   000153   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   \   000156   85..82       MOV     DPL,?V0 + 0
   \   000159   85..83       MOV     DPH,?V0 + 1
   \   00015C   A3           INC     DPTR
   \   00015D   A3           INC     DPTR
   \   00015E   A3           INC     DPTR
   \   00015F   A3           INC     DPTR
   \   000160   A3           INC     DPTR
   \   000161   E0           MOVX    A,@DPTR
   \   000162   6401         XRL     A,#0x1
   \   000164   6009         JZ      ??ZDO_beaconNotifyIndCB_9
   \   000166   90....       MOV     DPTR,#_tmpRejoinState
   \   000169   E0           MOVX    A,@DPTR
   \   00016A   7003         JNZ     $+5
   \   00016C   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2276              {
   2277                uint8 selected = FALSE;
   \                     ??ZDO_beaconNotifyIndCB_9:
   \   00016F   7900         MOV     R1,#0x0
   2278                uint8 capacity = FALSE;
   2279          
   2280                if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   \   000171   90....       MOV     DPTR,#_NIB + 96
   \   000174   E0           MOVX    A,@DPTR
   \   000175   6402         XRL     A,#0x2
   \   000177   7030         JNZ     ??ZDO_beaconNotifyIndCB_10
   2281                {
   2282                  if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
   2283                        (pBeacon->depth < MAX_NODE_DEPTH)) ||
   2284                      ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
   2285                       (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
   \   000179   8E82         MOV     DPL,R6
   \   00017B   8F83         MOV     DPH,R7
   \   00017D   A3           INC     DPTR
   \   00017E   A3           INC     DPTR
   \   00017F   A3           INC     DPTR
   \   000180   A3           INC     DPTR
   \   000181   A3           INC     DPTR
   \   000182   A3           INC     DPTR
   \   000183   A3           INC     DPTR
   \   000184   A3           INC     DPTR
   \   000185   A3           INC     DPTR
   \   000186   E0           MOVX    A,@DPTR
   \   000187   C3           CLR     C
   \   000188   98           SUBB    A,R0
   \   000189   500D         JNC     ??ZDO_beaconNotifyIndCB_11
   \   00018B   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00018E   12....       LCALL   ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000191   C3           CLR     C
   \   000192   9414         SUBB    A,#0x14
   \   000194   402D         JC      ??ZDO_beaconNotifyIndCB_12
   \   000196   802C         SJMP    ??ZDO_beaconNotifyIndCB_13
   \                     ??ZDO_beaconNotifyIndCB_11:
   \   000198   8E82         MOV     DPL,R6
   \   00019A   8F83         MOV     DPH,R7
   \   00019C   A3           INC     DPTR
   \   00019D   A3           INC     DPTR
   \   00019E   A3           INC     DPTR
   \   00019F   A3           INC     DPTR
   \   0001A0   A3           INC     DPTR
   \   0001A1   A3           INC     DPTR
   \   0001A2   A3           INC     DPTR
   \   0001A3   A3           INC     DPTR
   \   0001A4   A3           INC     DPTR
   \   0001A5   E0           MOVX    A,@DPTR
   \   0001A6   68           XRL     A,R0
   \   0001A7   701B         JNZ     ??ZDO_beaconNotifyIndCB_13
   \                     ??ZDO_beaconNotifyIndCB_10:
   \   0001A9   8E82         MOV     DPL,R6
   \   0001AB   8F83         MOV     DPH,R7
   \   0001AD   A3           INC     DPTR
   \   0001AE   A3           INC     DPTR
   \   0001AF   A3           INC     DPTR
   \   0001B0   A3           INC     DPTR
   \   0001B1   A3           INC     DPTR
   \   0001B2   A3           INC     DPTR
   \   0001B3   A3           INC     DPTR
   \   0001B4   A3           INC     DPTR
   \   0001B5   A3           INC     DPTR
   \   0001B6   A3           INC     DPTR
   \   0001B7   E0           MOVX    A,@DPTR
   \   0001B8   F8           MOV     R0,A
   \   0001B9   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0001BC   12....       LCALL   ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   0001BF   C3           CLR     C
   \   0001C0   98           SUBB    A,R0
   \   0001C1   5001         JNC     ??ZDO_beaconNotifyIndCB_13
   2286                  {
   2287                    selected = TRUE;
   \                     ??ZDO_beaconNotifyIndCB_12:
   \   0001C3   09           INC     R1
   2288                  }
   2289                }
   2290                else
   2291                {
   2292                  if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
   2293                  {
   2294                    selected = TRUE;
   2295                  }
   2296                }
   2297          
   2298                if ( ZSTACK_ROUTER_BUILD )
   2299                {
   2300                  capacity = pBeacon->routerCapacity;
   2301                }
   2302                else if ( ZSTACK_END_DEVICE_BUILD )
   2303                {
   2304                  capacity = pBeacon->deviceCapacity;
   2305                }
   2306          
   2307                if ( (capacity) && (selected) )
   \                     ??ZDO_beaconNotifyIndCB_13:
   \   0001C4   85..82       MOV     DPL,?V0 + 0
   \   0001C7   85..83       MOV     DPH,?V0 + 1
   \   0001CA   A3           INC     DPTR
   \   0001CB   A3           INC     DPTR
   \   0001CC   A3           INC     DPTR
   \   0001CD   A3           INC     DPTR
   \   0001CE   A3           INC     DPTR
   \   0001CF   A3           INC     DPTR
   \   0001D0   E0           MOVX    A,@DPTR
   \   0001D1   6035         JZ      ??ZDO_beaconNotifyIndCB_14
   \   0001D3   E9           MOV     A,R1
   \   0001D4   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001D6   5030         JNC     ??ZDO_beaconNotifyIndCB_14
   2308                {
   2309                  // this is the new chosen router for joining...
   2310                  pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
   \   0001D8   85..82       MOV     DPL,?V0 + 0
   \   0001DB   85..83       MOV     DPH,?V0 + 1
   \   0001DE   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   0001E1   8E82         MOV     DPL,R6
   \   0001E3   8F83         MOV     DPH,R7
   \   0001E5   A3           INC     DPTR
   \   0001E6   A3           INC     DPTR
   \   0001E7   A3           INC     DPTR
   \   0001E8   A3           INC     DPTR
   \   0001E9   A3           INC     DPTR
   \   0001EA   A3           INC     DPTR
   \   0001EB   A3           INC     DPTR
   \   0001EC   E8           MOV     A,R0
   \   0001ED   F0           MOVX    @DPTR,A
   \   0001EE   A3           INC     DPTR
   \   0001EF   E9           MOV     A,R1
   \   0001F0   12....       LCALL   ?Subroutine9 & 0xFFFF
   2311                  pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
   \                     ??CrossCallReturnLabel_3:
   \   0001F3   A3           INC     DPTR
   \   0001F4   A3           INC     DPTR
   \   0001F5   A3           INC     DPTR
   \   0001F6   A3           INC     DPTR
   \   0001F7   A3           INC     DPTR
   \   0001F8   A3           INC     DPTR
   \   0001F9   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0001FC   F0           MOVX    @DPTR,A
   2312                  pNwkDesc->chosenRouterDepth       = pBeacon->depth;
   \   0001FD   12....       LCALL   ?Subroutine33 & 0xFFFF
   2313                }
   \                     ??CrossCallReturnLabel_48:
   \   000200   12....       LCALL   ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000203   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000206   A3           INC     DPTR
   \   000207   F0           MOVX    @DPTR,A
   2314          
   2315                if ( pBeacon->deviceCapacity )
   \                     ??ZDO_beaconNotifyIndCB_14:
   \   000208   85..82       MOV     DPL,?V0 + 0
   \   00020B   85..83       MOV     DPH,?V0 + 1
   \   00020E   A3           INC     DPTR
   \   00020F   A3           INC     DPTR
   \   000210   A3           INC     DPTR
   \   000211   A3           INC     DPTR
   \   000212   A3           INC     DPTR
   \   000213   A3           INC     DPTR
   \   000214   A3           INC     DPTR
   \   000215   E0           MOVX    A,@DPTR
   \   000216   600B         JZ      ??ZDO_beaconNotifyIndCB_15
   2316                  pNwkDesc->deviceCapacity = 1;
   \   000218   8E82         MOV     DPL,R6
   \   00021A   8F83         MOV     DPH,R7
   \   00021C   A3           INC     DPTR
   \   00021D   A3           INC     DPTR
   \   00021E   A3           INC     DPTR
   \   00021F   A3           INC     DPTR
   \   000220   7401         MOV     A,#0x1
   \   000222   F0           MOVX    @DPTR,A
   2317          
   2318                if ( pBeacon->routerCapacity )
   \                     ??ZDO_beaconNotifyIndCB_15:
   \   000223   85..82       MOV     DPL,?V0 + 0
   \   000226   85..83       MOV     DPH,?V0 + 1
   \   000229   A3           INC     DPTR
   \   00022A   A3           INC     DPTR
   \   00022B   A3           INC     DPTR
   \   00022C   A3           INC     DPTR
   \   00022D   A3           INC     DPTR
   \   00022E   A3           INC     DPTR
   \   00022F   E0           MOVX    A,@DPTR
   \   000230   600A         JZ      ??ZDO_beaconNotifyIndCB_1
   2319                  pNwkDesc->routerCapacity = 1;
   \   000232   8E82         MOV     DPL,R6
   \   000234   8F83         MOV     DPH,R7
   \   000236   A3           INC     DPTR
   \   000237   A3           INC     DPTR
   \   000238   A3           INC     DPTR
   \   000239   7401         MOV     A,#0x1
   \   00023B   F0           MOVX    @DPTR,A
   2320              }
   2321            }
   \                     ??ZDO_beaconNotifyIndCB_1:
   \   00023C   02....       LJMP    ?Subroutine4 & 0xFFFF
   2322          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   240B         ADD     A,#0xb
   \   000004   F582         MOV     DPL,A
   \   000006   E5..         MOV     A,?V0 + 1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \   000007   A3           INC     DPTR
   \   000008   22           RET
   2323          
   2324          /*********************************************************************
   2325           * @fn          ZDO_StartRouterConfirmCB
   2326           *
   2327           * @brief       This function reports the results of the request to
   2328           *              start functioning as a router in a network.
   2329           *
   2330           * @param       Status - Result of NLME_StartRouterRequest()
   2331           *
   2332           * @return      none
   2333           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2334          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   2335          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   2336            nwkStatus = (byte)Status;
   \   000006   90....       MOV     DPTR,#nwkStatus
   \   000009   F0           MOVX    @DPTR,A
   2337          
   2338            if ( Status == ZSUCCESS )
   \   00000A   700A         JNZ     ??ZDO_StartRouterConfirmCB_0
   2339            {
   2340              // LED on shows Router started
   2341              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   12....       LCALL   ?Subroutine26 & 0xFFFF
   2342              // LED off forgets HOLD_AUTO_START
   2343              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   2344              if ( devState == DEV_HOLD )
   \                     ??CrossCallReturnLabel_34:
   \   00000F   700C         JNZ     ??ZDO_StartRouterConfirmCB_1
   2345              {
   2346                // Began with HOLD_AUTO_START
   2347                devState = DEV_END_DEVICE;
   \   000011   7406         MOV     A,#0x6
   \   000013   F0           MOVX    @DPTR,A
   \   000014   8007         SJMP    ??ZDO_StartRouterConfirmCB_1
   2348              }
   2349            }
   2350          #if defined(BLINK_LEDS)
   2351            else
   2352            {
   2353              HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   000016                ; Setup parameters for call to function HalLedSet
   \   000016   7A04         MOV     R2,#0x4
   \   000018   7904         MOV     R1,#0x4
   \   00001A   12....       LCALL   ??HalLedSet?relay
   2354            }
   2355          #endif
   2356          
   2357            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_1:
   \   00001D                ; Setup parameters for call to function osal_set_event
   \   00001D   7A20         MOV     R2,#0x20
   \   00001F   02....       LJMP    ?Subroutine0 & 0xFFFF
   2358          }
   2359          
   2360          /*********************************************************************
   2361           * @fn          ZDO_JoinConfirmCB
   2362           *
   2363           * @brief       This function allows the next hight layer to be notified
   2364           *              of the results of its request to join itself or another
   2365           *              device to a network.
   2366           *
   2367           * @param       Status - Result of NLME_JoinRequest()
   2368           *
   2369           * @return      none
   2370           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2371          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2372          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   2373            (void)PanId;  // remove if this parameter is used.
   2374          
   2375            nwkStatus = (byte)Status;
   \   00000C   90....       MOV     DPTR,#nwkStatus
   \   00000F   F0           MOVX    @DPTR,A
   2376          
   2377            if ( Status == ZSUCCESS )
   \   000010   700D         JNZ     ??ZDO_JoinConfirmCB_0
   2378            {
   2379              // LED on shows device joined
   2380              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   000012                ; Setup parameters for call to function HalLedSet
   \   000012   12....       LCALL   ?Subroutine26 & 0xFFFF
   2381              // LED off forgets HOLD_AUTO_START
   2382              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   2383              if ( (devState == DEV_HOLD) )
   \                     ??CrossCallReturnLabel_35:
   \   000015   7003         JNZ     ??ZDO_JoinConfirmCB_1
   2384              {
   2385                // Began with HOLD_AUTO_START
   2386                devState = DEV_NWK_JOINING;
   \   000017   7403         MOV     A,#0x3
   \   000019   F0           MOVX    @DPTR,A
   2387              }
   2388          
   2389              if ( !ZG_SECURE_ENABLED )
   2390              {
   2391                // Notify to save info into NV
   2392                ZDApp_NVUpdate();
   \                     ??ZDO_JoinConfirmCB_1:
   \   00001A                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00001A   12....       LCALL   ??ZDApp_NVUpdate?relay
   \   00001D   8007         SJMP    ??ZDO_JoinConfirmCB_2
   2393              }
   2394            }
   2395            else
   2396            {
   2397          #if defined(BLINK_LEDS)
   2398              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_JoinConfirmCB_0:
   \   00001F                ; Setup parameters for call to function HalLedSet
   \   00001F   7A04         MOV     R2,#0x4
   \   000021   7904         MOV     R1,#0x4
   \   000023   12....       LCALL   ??HalLedSet?relay
   2399          #endif
   2400            }
   2401          
   2402            // Pass the join confirm to higher layer if callback registered
   2403            if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
   \                     ??ZDO_JoinConfirmCB_2:
   \   000026   90....       MOV     DPTR,#zdoCBFunc + 8
   \   000029   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00002C   6033         JZ      ??ZDO_JoinConfirmCB_3
   2404            {
   2405              zdoJoinCnf_t joinCnf;
   2406          
   2407              joinCnf.status = Status;
   \   00002E   EE           MOV     A,R6
   \   00002F   85..82       MOV     DPL,?XSP + 0
   \   000032   85..83       MOV     DPH,?XSP + 1
   \   000035   F0           MOVX    @DPTR,A
   2408              joinCnf.deviceAddr = _NIB.nwkDevAddress;
   \   000036   90....       MOV     DPTR,#_NIB + 20
   \   000039   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00003C   7401         MOV     A,#0x1
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   E8           MOV     A,R0
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   E9           MOV     A,R1
   \   000045   F0           MOVX    @DPTR,A
   2409              joinCnf.parentAddr = _NIB.nwkCoordAddress;
   \   000046   90....       MOV     DPTR,#_NIB + 23
   \   000049   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   2410          
   2411              zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
   2412            }
   \                     ??CrossCallReturnLabel_84:
   \   00004C   7403         MOV     A,#0x3
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   E8           MOV     A,R0
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   E9           MOV     A,R1
   \   000055   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000058   90....       MOV     DPTR,#zdoCBFunc + 8
   \   00005B   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00005E   12....       LCALL   ?CALL_IND
   2413          
   2414            // Notify ZDApp
   2415            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_3:
   \   000061                ; Setup parameters for call to function ZDApp_SendMsg
   \   000061   7C00         MOV     R4,#0x0
   \   000063   7D00         MOV     R5,#0x0
   \   000065   7B02         MOV     R3,#0x2
   \   000067   7A02         MOV     R2,#0x2
   \   000069   12....       LCALL   ?Subroutine22 & 0xFFFF
   2416          
   2417          }
   \                     ??CrossCallReturnLabel_27:
   \   00006C                REQUIRE ?Subroutine5
   \   00006C                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7405         MOV     A,#0x5
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   02....       LJMP    ??Subroutine46_0 & 0xFFFF
   2418          
   2419          /*********************************************************************
   2420           * @fn          ZDO_AddrChangeIndicationCB
   2421           *
   2422           * @brief       This function notifies the application that this
   2423           *              device's address has changed.  Could happen in
   2424           *              a network with stochastic addressing (PRO).
   2425           *
   2426           * @param       newAddr - the new address
   2427           *
   2428           * @return      none
   2429           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2430          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2431          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   2432            ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
   2433            epList_t *pItem = epList;
   \   000009   90....       MOV     DPTR,#epList
   \   00000C   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   2434          
   2435            // Notify to save info into NV
   2436            ZDApp_NVUpdate();
   \                     ??CrossCallReturnLabel_89:
   \   00000F                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000F   12....       LCALL   ??ZDApp_NVUpdate?relay
   2437          
   2438            // Notify the applications
   2439            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000012                ; Setup parameters for call to function osal_set_event
   \   000012   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000015   803C         SJMP    ??ZDO_AddrChangeIndicationCB_0
   2440          
   2441            while (pItem != NULL)
   2442            {
   2443              if (pItem->epDesc->endPoint != ZDO_EP)
   \                     ??ZDO_AddrChangeIndicationCB_1:
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   A3           INC     DPTR
   \   00001C   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00001F   602B         JZ      ??ZDO_AddrChangeIndicationCB_2
   2444              {
   2445                pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
   \   000021                ; Setup parameters for call to function osal_msg_allocate
   \   000021   7A04         MOV     R2,#0x4
   \   000023   7B00         MOV     R3,#0x0
   \   000025   12....       LCALL   ??osal_msg_allocate?relay
   2446                if (pZDOAddrChangeMsg != NULL)
   \   000028   EA           MOV     A,R2
   \   000029   4B           ORL     A,R3
   \   00002A   6020         JZ      ??ZDO_AddrChangeIndicationCB_2
   2447                {
   2448                  pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
   \   00002C   8A82         MOV     DPL,R2
   \   00002E   8B83         MOV     DPH,R3
   \   000030   74D6         MOV     A,#-0x2a
   \   000032   F0           MOVX    @DPTR,A
   2449                  pZDOAddrChangeMsg->shortAddr = newAddr;
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E5..         MOV     A,?V0 + 0
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   E5..         MOV     A,?V0 + 1
   \   00003B   F0           MOVX    @DPTR,A
   2450                  osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
   \   00003C                ; Setup parameters for call to function osal_msg_send
   \   00003C   8E82         MOV     DPL,R6
   \   00003E   8F83         MOV     DPH,R7
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   12....       LCALL   ?Subroutine17 & 0xFFFF
   2451                }
   2452              }
   \                     ??CrossCallReturnLabel_105:
   \   000045   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000048   F9           MOV     R1,A
   \   000049   12....       LCALL   ??osal_msg_send?relay
   2453              pItem = pItem->nextDesc;
   \                     ??ZDO_AddrChangeIndicationCB_2:
   \   00004C   12....       LCALL   ?Subroutine15 & 0xFFFF
   2454            }
   \                     ??CrossCallReturnLabel_87:
   \   00004F   E8           MOV     A,R0
   \   000050   FE           MOV     R6,A
   \   000051   E9           MOV     A,R1
   \   000052   FF           MOV     R7,A
   \                     ??ZDO_AddrChangeIndicationCB_0:
   \   000053   EE           MOV     A,R6
   \   000054   4F           ORL     A,R7
   \   000055   70C0         JNZ     ??ZDO_AddrChangeIndicationCB_1
   2455          
   2456            // Send out a device announce
   2457            ZDApp_AnnounceNewAddress();
   \   000057                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000057   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   2458          }
   \   00005A   02....       LJMP    ??Subroutine41_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine49_0
   \   000001                ; // Fall through to label ??Subroutine49_0
   2459          
   2460          /*********************************************************************
   2461           * @fn          ZDO_JoinIndicationCB
   2462           *
   2463           * @brief       This function allows the next higher layer of a
   2464           *              coordinator to be notified of a remote join request.
   2465           *
   2466           * @param       ShortAddress - 16-bit address
   2467           * @param       ExtendedAddress - IEEE (64-bit) address
   2468           * @param       CapabilityFlags - Association Capability Flags
   2469           * @param       type - of joining -
   2470           *                          NWK_ASSOC_JOIN
   2471           *                          NWK_ASSOC_REJOIN_UNSECURE
   2472           *                          NWK_ASSOC_REJOIN_SECURE
   2473           *
   2474           * @return      ZStatus_t
   2475           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2476          ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   2477                                          uint8 CapabilityFlags, uint8 type)
   2478          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2479            (void)ShortAddress;
   2480            (void)ExtendedAddress;
   2481          #if ZDO_NV_SAVE_RFDs
   2482            (void)CapabilityFlags;
   2483          
   2484          #else  // if !ZDO_NV_SAVE_RFDs
   2485            if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
   2486          #endif
   2487            {
   2488              ZDApp_NVUpdate();  // Notify to save info into NV.
   \   000004                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000004   12....       LCALL   ??ZDApp_NVUpdate?relay
   2489            }
   2490          
   2491            if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
   2492            {
   2493              if (type == NWK_ASSOC_JOIN || type == NWK_ASSOC_REJOIN_UNSECURE)
   2494              {
   2495                osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 600 );
   2496              }
   2497            }
   2498          
   2499            return ZSuccess;
   \   000007   7900         MOV     R1,#0x0
   \   000009   02....       LJMP    ??Subroutine45_0 & 0xFFFF
   2500          }
   2501          
   2502          /*********************************************************************
   2503           * @fn          ZDO_ConcentratorIndicationCB
   2504           *
   2505           * @brief       This function allows the next higher layer of a
   2506           *              device to be notified of existence of the concentrator.
   2507           *
   2508           * @param       nwkAddr - 16-bit NWK address of the concentrator
   2509           * @param       extAddr - pointer to extended Address
   2510           *                        NULL if not available
   2511           * @param       pktCost - PktCost from RREQ
   2512           *
   2513           * @return      void
   2514           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2515          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
   \                     ZDO_ConcentratorIndicationCB:
   2516          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2517            zdoConcentratorInd_t conInd;
   2518          
   2519            conInd.nwkAddr = nwkAddr;
   \   00000A   12....       LCALL   ?Subroutine10 & 0xFFFF
   2520            conInd.extAddr = extAddr;
   \                     ??CrossCallReturnLabel_130:
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   EC           MOV     A,R4
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   ED           MOV     A,R5
   \   000016   F0           MOVX    @DPTR,A
   2521            conInd.pktCost = pktCost;
   \   000017   7404         MOV     A,#0x4
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E9           MOV     A,R1
   \   00001D   F0           MOVX    @DPTR,A
   2522          
   2523            if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
   \   00001E   90....       MOV     DPTR,#zdoCBFunc + 2
   \   000021   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000024   6013         JZ      ??ZDO_ConcentratorIndicationCB_0
   2524            {
   2525              zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
   \   000026                ; Setup parameters for indirect call
   \   000026   85..82       MOV     DPL,?XSP + 0
   \   000029   85..83       MOV     DPH,?XSP + 1
   \   00002C   AA82         MOV     R2,DPL
   \   00002E   AB83         MOV     R3,DPH
   \   000030   90....       MOV     DPTR,#zdoCBFunc + 3
   \   000033   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   2526            }
   \                     ??CrossCallReturnLabel_99:
   \   000036   12....       LCALL   ?CALL_IND
   2527          }
   \                     ??ZDO_ConcentratorIndicationCB_0:
   \   000039   02....       LJMP    ?Subroutine5 & 0xFFFF
   2528          
   2529          /*********************************************************************
   2530           * @fn          ZDO_LeaveCnf
   2531           *
   2532           * @brief       This function allows the next higher layer to be
   2533           *              notified of the results of its request for this or
   2534           *              a child device to leave the network.
   2535           *
   2536           * @param       cnf - NLME_LeaveCnf_t
   2537           *
   2538           * @return      none
   2539           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2540          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   2541          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2542            // Check for this device
   2543            if ( osal_ExtAddrEqual( cnf->extAddr,
   2544                                    NLME_GetExtAddr() ) == TRUE )
   \   000009                ; Setup parameters for call to function sAddrExtCmp
   \   000009                ; Setup parameters for call to function NLME_GetExtAddr
   \   000009   12....       LCALL   ??NLME_GetExtAddr?relay
   \   00000C   EA           MOV     A,R2
   \   00000D   FC           MOV     R4,A
   \   00000E   EB           MOV     A,R3
   \   00000F   FD           MOV     R5,A
   \   000010   EE           MOV     A,R6
   \   000011   2402         ADD     A,#0x2
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   3400         ADDC    A,#0x0
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   ??sAddrExtCmp?relay
   \   00001B   E9           MOV     A,R1
   \   00001C   6401         XRL     A,#0x1
   \   00001E   7022         JNZ     ??ZDO_LeaveCnf_0
   2545            {
   2546              // Pass the leave confirm to higher layer if callback registered
   2547              if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
   2548                   ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
   \   000020   90....       MOV     DPTR,#zdoCBFunc + 10
   \   000023   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000026   6011         JZ      ??ZDO_LeaveCnf_1
   \   000028                ; Setup parameters for indirect call
   \   000028   EE           MOV     A,R6
   \   000029   FA           MOV     R2,A
   \   00002A   EF           MOV     A,R7
   \   00002B   FB           MOV     R3,A
   \   00002C   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   00002F   12....       LCALL   ?CALL_IND
   \   000032   8B..         MOV     ?V0 + 1,R3
   \   000034   EA           MOV     A,R2
   \   000035   45..         ORL     A,?V0 + 1
   \   000037   701A         JNZ     ??CrossCallReturnLabel_16
   2549              {
   2550                // Prepare to leave with reset
   2551                ZDApp_LeaveReset( cnf->rejoin );
   \                     ??ZDO_LeaveCnf_1:
   \   000039                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000039   12....       LCALL   ?Subroutine29 & 0xFFFF
   2552              }
   2553            }
   \                     ??CrossCallReturnLabel_121:
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   ??ZDApp_LeaveReset?relay
   \   000040   8011         SJMP    ??CrossCallReturnLabel_16
   2554            else if ( ZSTACK_ROUTER_BUILD )
   2555            {
   2556              // Remove device address(optionally descendents) from data
   2557              ZDApp_LeaveUpdate( cnf->dstAddr,
   2558                                 cnf->extAddr,
   2559                                 cnf->removeChildren );
   \                     ??ZDO_LeaveCnf_0:
   \   000042                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   000042   8E82         MOV     DPL,R6
   \   000044   8F83         MOV     DPH,R7
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   12....       LCALL   ?Subroutine12 & 0xFFFF
   2560            }
   2561          }
   \                     ??CrossCallReturnLabel_16:
   \   000053   02....       LJMP    ??Subroutine52_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   EE           MOV     A,R6
   \   000003   2402         ADD     A,#0x2
   \   000005   FC           MOV     R4,A
   \   000006   EF           MOV     A,R7
   \   000007   3400         ADDC    A,#0x0
   \   000009   FD           MOV     R5,A
   \   00000A   8E82         MOV     DPL,R6
   \   00000C   8F83         MOV     DPH,R7
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FA           MOV     R2,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FB           MOV     R3,A
   \   000013   12....       LCALL   ??ZDApp_LeaveUpdate?relay
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003                REQUIRE ??Subroutine55_0
   \   000003                ; // Fall through to label ??Subroutine55_0
   2562          
   2563          /*********************************************************************
   2564           * @fn          ZDO_LeaveInd
   2565           *
   2566           * @brief       This function allows the next higher layer of a
   2567           *              device to be notified of a remote leave request or
   2568           *              indication.
   2569           *
   2570           * @param       ind - NLME_LeaveInd_t
   2571           *
   2572           * @return      none
   2573           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2574          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   2575          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2576            uint8 leave;
   2577          
   2578          
   2579            // Parent is requesting the leave - NWK layer filters out illegal
   2580            // requests
   2581            if ( ind->request == TRUE )
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6401         XRL     A,#0x1
   \   00001F   7039         JNZ     ??ZDO_LeaveInd_0
   2582            {
   2583              // Notify network of leave
   2584              if ( ZSTACK_ROUTER_BUILD )
   2585              {
   2586                NLME_LeaveRsp_t rsp;
   2587                rsp.rejoin         = ind->rejoin;
   \   000021   EE           MOV     A,R6
   \   000022   240C         ADD     A,#0xc
   \   000024   F8           MOV     R0,A
   \   000025   EF           MOV     A,R7
   \   000026   3400         ADDC    A,#0x0
   \   000028   F9           MOV     R1,A
   \   000029   88..         MOV     ?V0 + 0,R0
   \   00002B   89..         MOV     ?V0 + 1,R1
   \   00002D   8882         MOV     DPL,R0
   \   00002F   F583         MOV     DPH,A
   \   000031   E0           MOVX    A,@DPTR
   \   000032   C0E0         PUSH    A
   \   000034   7401         MOV     A,#0x1
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   D0E0         POP     A
   \   00003B   F0           MOVX    @DPTR,A
   2588                rsp.removeChildren = ind->removeChildren;
   \   00003C   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   00003F   85..82       MOV     DPL,?XSP + 0
   \   000042   85..83       MOV     DPH,?XSP + 1
   \   000045   F0           MOVX    @DPTR,A
   2589                NLME_LeaveRsp( &rsp );
   \   000046                ; Setup parameters for call to function NLME_LeaveRsp
   \   000046   AA82         MOV     R2,DPL
   \   000048   AB83         MOV     R3,DPH
   \   00004A   12....       LCALL   ??NLME_LeaveRsp?relay
   2590              }
   2591          
   2592              // Prepare to leave with reset
   2593              ZDApp_LeaveReset( ind->rejoin );
   \   00004D                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00004D   85..82       MOV     DPL,?V0 + 0
   \   000050   85..83       MOV     DPH,?V0 + 1
   \                     ??ZDO_LeaveInd_1:
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F9           MOV     R1,A
   \   000055   12....       LCALL   ??ZDApp_LeaveReset?relay
   \   000058   8035         SJMP    ??CrossCallReturnLabel_17
   2594            }
   2595            else
   2596            {
   2597              leave = FALSE;
   2598          
   2599              // Check if this device needs to leave as a child or descendent
   2600              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \                     ??ZDO_LeaveInd_0:
   \   00005A                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   00005A   12....       LCALL   ??NLME_GetCoordShortAddr?relay
   \   00005D   8A..         MOV     ?V0 + 0,R2
   \   00005F   8B..         MOV     ?V0 + 1,R3
   \   000061   A8..         MOV     R0,?V0 + 0
   \   000063   A9..         MOV     R1,?V0 + 1
   \   000065   8E82         MOV     DPL,R6
   \   000067   8F83         MOV     DPH,R7
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   68           XRL     A,R0
   \   00006B   7003         JNZ     ??ZDO_LeaveInd_2
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   69           XRL     A,R1
   \                     ??ZDO_LeaveInd_2:
   \   000070   7014         JNZ     ??ZDO_LeaveInd_3
   2601              {
   2602                if ( ( ind->removeChildren == TRUE               ) ||
   2603                     ( ZDO_Config_Node_Descriptor.LogicalType ==
   2604                       NODETYPE_DEVICE                           )    )
   \   000072   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000075   6401         XRL     A,#0x1
   \   000077   6005         JZ      ??ZDO_LeaveInd_4
   \   000079   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00007C   7008         JNZ     ??ZDO_LeaveInd_3
   2605                {
   2606                  leave = TRUE;
   2607                }
   2608              }
   2609              else if ( ind->removeChildren == TRUE )
   2610              {
   2611                // Check NWK address allocation algorithm
   2612                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   2613              }
   2614          
   2615              if ( leave == TRUE )
   2616              {
   2617                // Prepare to leave with reset
   2618                ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_4:
   \   00007E                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00007E   EE           MOV     A,R6
   \   00007F   240C         ADD     A,#0xc
   \   000081   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   2619              }
   \                     ??CrossCallReturnLabel_108:
   \   000084   80CD         SJMP    ??ZDO_LeaveInd_1
   2620              else
   2621              {
   2622                // Remove device address(optionally descendents) from data
   2623                ZDApp_LeaveUpdate( ind->srcAddr,
   2624                                   ind->extAddr,
   2625                                   ind->removeChildren );
   \                     ??ZDO_LeaveInd_3:
   \   000086                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   000086   EE           MOV     A,R6
   \   000087   240B         ADD     A,#0xb
   \   000089   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   2626              }
   2627            }
   \                     ??CrossCallReturnLabel_109:
   \   00008C   12....       LCALL   ?Subroutine12 & 0xFFFF
   2628          
   2629            // Pass the leave indication to higher layer if callback registered.
   2630            if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
   \                     ??CrossCallReturnLabel_17:
   \   00008F   90....       MOV     DPTR,#zdoCBFunc + 12
   \   000092   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000095   600A         JZ      ??ZDO_LeaveInd_5
   2631            {
   2632              (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
   \   000097                ; Setup parameters for indirect call
   \   000097   EE           MOV     A,R6
   \   000098   FA           MOV     R2,A
   \   000099   EF           MOV     A,R7
   \   00009A   FB           MOV     R3,A
   \   00009B   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   2633            }
   \                     ??CrossCallReturnLabel_101:
   \   00009E   12....       LCALL   ?CALL_IND
   2634          }
   \                     ??ZDO_LeaveInd_5:
   \   0000A1   02....       LJMP    ?Subroutine6 & 0xFFFF
   2635          
   2636          /*********************************************************************
   2637           * @fn          ZDO_SyncIndicationCB
   2638           *
   2639           * @brief       This function allows the next higher layer of a
   2640           *              coordinator to be notified of a loss of synchronization
   2641           *                          with the parent/child device.
   2642           *
   2643           * @param       type: 0 - child; 1 - parent
   2644           *
   2645           *
   2646           * @return      none
   2647           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2648          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   2649          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   2650            (void)shortAddr;  // Remove this line if this parameter is used.
   2651          
   2652            if ( ZSTACK_END_DEVICE_BUILD
   2653              || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   \   000007   90....       MOV     DPTR,#_NIB + 14
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   4013         JC      ??CrossCallReturnLabel_28
   2654            {
   2655              if ( type == 1 )
   \   00000F   7401         MOV     A,#0x1
   \   000011   6E           XRL     A,R6
   \   000012   700E         JNZ     ??CrossCallReturnLabel_28
   2656              {
   2657                // We lost contact with our parent.  Clear the neighbor Table.
   2658                nwkNeighborInitTable();
   \   000014                ; Setup parameters for call to function nwkNeighborInitTable
   \   000014   12....       LCALL   ??nwkNeighborInitTable?relay
   2659          
   2660                // Start the rejoin process.
   2661                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
   \   000017                ; Setup parameters for call to function ZDApp_SendMsg
   \   000017   7C00         MOV     R4,#0x0
   \   000019   7D00         MOV     R5,#0x0
   \   00001B   7B02         MOV     R3,#0x2
   \   00001D   7A03         MOV     R2,#0x3
   \   00001F   12....       LCALL   ?Subroutine22 & 0xFFFF
   2662              }
   2663            }
   2664          }
   \                     ??CrossCallReturnLabel_28:
   \   000022   02....       LJMP    ??Subroutine46_0 & 0xFFFF
   2665          
   2666          /*********************************************************************
   2667           * @fn          ZDO_ManytoOneFailureIndicationCB
   2668           *
   2669           * @brief       This function allows the next higher layer of a
   2670           *              concentrator to be notified of a many-to-one route
   2671           *              failure.
   2672           *
   2673           * @param       none
   2674           *
   2675           *
   2676           * @return      none
   2677           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2678          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   2679          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2680            // By default, the concentrator automatically redo many-to-one route
   2681            // discovery to update all many-to-one routes in the network
   2682            // If you want anything processing other than the default,
   2683            // please replace the following code.
   2684          
   2685            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL   ??RTG_MTORouteReq?relay
   2686          }
   \   000007   02....       LJMP    ??Subroutine45_0 & 0xFFFF
   2687          
   2688          /*********************************************************************
   2689           * @fn          ZDO_PollConfirmCB
   2690           *
   2691           * @brief       This function allows the next higher layer to be
   2692           *              notified of a Poll Confirm.
   2693           *
   2694           * @param       none
   2695           *
   2696           * @return      none
   2697           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2698          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   2699          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2700            (void)status;  // Remove this line if this parameter is used.
   2701            return;
   \   000000   02....       LJMP    ?BRET
   2702          }
   2703          
   2704          /******************************************************************************
   2705           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   2706           *
   2707           * @brief       Stub routine implemented by NHLE. NHLE should call
   2708           *              <AddrMgrWriteNV> when appropriate.
   2709           *
   2710           * @param       none
   2711           *
   2712           * @return      none
   2713           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2714          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   2715          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2716          #if defined ( NV_RESTORE )
   2717            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000005                ; Setup parameters for call to function osal_get_timeoutEx
   \   000005   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000008   7003         JNZ     ??AddrMgrWriteNVRequest_0
   2718            {
   2719              // Trigger to save info into NV
   2720              ZDApp_NVUpdate();
   \   00000A                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000A   12....       LCALL   ??ZDApp_NVUpdate?relay
   2721            }
   2722          #endif
   2723          }
   \                     ??AddrMgrWriteNVRequest_0:
   \   00000D   80..         SJMP    ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   7A00         MOV     R2,#0x0
   \   000002   7B02         MOV     R3,#0x2
   \   000004   90....       MOV     DPTR,#ZDAppTaskID
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   ??osal_get_timeoutEx?relay
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   EA           MOV     A,R2
   \   00000F   45..         ORL     A,?V0 + 1
   \   000011   22           RET
   2724          
   2725          /*********************************************************************
   2726           * Call Back Functions from Security  - API
   2727           */
   2728          
   2729           /*********************************************************************
   2730           * @fn          ZDO_UpdateDeviceIndication
   2731           *
   2732           * @brief       This function notifies the "Trust Center" of a
   2733           *              network when a device joins or leaves the network.
   2734           *
   2735           * @param       extAddr - pointer to 64 bit address of new device
   2736           * @param       status  - 0 if a new device joined securely
   2737           *                      - 1 if a new device joined un-securely
   2738           *                      - 2 if a device left the network
   2739           *
   2740           * @return      true if newly joined device should be allowed to
   2741           *                                              remain on network
   2742           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2743          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   2744          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2745            // can implement a network access policy based on the
   2746            // IEEE address of newly joining devices...
   2747            (void)extAddr;
   2748            (void)status;
   2749          
   2750            return ZSuccess;
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
   2751          }
   2752          
   2753          /*********************************************************************
   2754           * @fn          ZDApp_InMsgCB
   2755           *
   2756           * @brief       This function is called to pass up any message that is
   2757           *              not yet supported.  This allows for the developer to
   2758           *              support features themselves..
   2759           *
   2760           * @return      none
   2761           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2762          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   2763          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2764            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \   000009   EE           MOV     A,R6
   \   00000A   240C         ADD     A,#0xc
   \   00000C   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   5480         ANL     A,#0x80
   \   000013   704A         JNZ     ??ZDApp_InMsgCB_0
   2765            {
   2766              // Handle the response message
   2767            }
   2768            else
   2769            {
   2770              // Handle the request message by sending a generic "not supported".
   2771              // Device Announce doesn't have a response.
   2772              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   000015   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000018   7045         JNZ     ??ZDApp_InMsgCB_0
   \   00001A   EE           MOV     A,R6
   \   00001B   240C         ADD     A,#0xc
   \   00001D   12....       LCALL   ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000020   6413         XRL     A,#0x13
   \   000022   7002         JNZ     ??ZDApp_InMsgCB_1
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \                     ??ZDApp_InMsgCB_1:
   \   000026   6037         JZ      ??ZDApp_InMsgCB_0
   2773              {
   2774                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   2775                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   000028                ; Setup parameters for call to function ZDP_GenericRsp
   \   000028   12....       LCALL   ?Subroutine28 & 0xFFFF
   2776              }
   2777            }
   \                     ??CrossCallReturnLabel_39:
   \   00002B   4480         ORL     A,#0x80
   \   00002D   F5..         MOV     ?V0 + 1,A
   \   00002F   78..         MOV     R0,#?V0 + 0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000034   E4           CLR     A
   \   000035   F5..         MOV     ?V0 + 0,A
   \   000037   F5..         MOV     ?V0 + 1,A
   \   000039   78..         MOV     R0,#?V0 + 0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   EE           MOV     A,R6
   \   00003F   240E         ADD     A,#0xe
   \   000041   12....       LCALL   ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000044   FD           MOV     R5,A
   \   000045   7C84         MOV     R4,#-0x7c
   \   000047   EE           MOV     A,R6
   \   000048   2402         ADD     A,#0x2
   \   00004A   0A           INC     R2
   \   00004B   0A           INC     R2
   \   00004C   EF           MOV     A,R7
   \   00004D   3400         ADDC    A,#0x0
   \   00004F   FB           MOV     R3,A
   \   000050   EE           MOV     A,R6
   \   000051   240F         ADD     A,#0xf
   \   000053   12....       LCALL   ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000056   F9           MOV     R1,A
   \   000057   12....       LCALL   ??ZDP_GenericRsp?relay
   \   00005A   7404         MOV     A,#0x4
   \   00005C   12....       LCALL   ?DEALLOC_XSTACK8
   2778          }
   \                     ??ZDApp_InMsgCB_0:
   \   00005F   02....       LJMP    ??Subroutine52_0 & 0xFFFF
   2779          
   2780          
   2781          /*********************************************************************
   2782           * @fn      ZDApp_ChangeMatchDescRespPermission()
   2783           *
   2784           * @brief   Changes the Match Descriptor Response permission.
   2785           *
   2786           * @param   endpoint - endpoint to allow responses
   2787           * @param   action - true to allow responses, false to not
   2788           *
   2789           * @return  none
   2790           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2791          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   2792          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2793            // Store the action
   2794            afSetMatch( endpoint, action );
   \   000005                ; Setup parameters for call to function afSetMatch
   \   000005   12....       LCALL   ??afSetMatch?relay
   2795          }
   \   000008   02....       LJMP    ??Subroutine46_0 & 0xFFFF
   2796          
   2797          /*********************************************************************
   2798           * @fn      ZDApp_NetworkInit()
   2799           *
   2800           * @brief   Used to start the network joining process
   2801           *
   2802           * @param   delay - mSec delay to wait before starting
   2803           *
   2804           * @return  none
   2805           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2806          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   2807          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2808            if ( delay )
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   600B         JZ      ??ZDApp_NetworkInit_0
   2809            {
   2810              // Wait awhile before starting the device
   2811              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   000008                ; Setup parameters for call to function osal_start_timerEx
   \   000008   EA           MOV     A,R2
   \   000009   FC           MOV     R4,A
   \   00000A   EB           MOV     A,R3
   \   00000B   FD           MOV     R5,A
   \   00000C   7A01         MOV     R2,#0x1
   \   00000E   12....       LCALL   ?Subroutine21 & 0xFFFF
   2812            }
   \                     ??CrossCallReturnLabel_64:
   \   000011   8005         SJMP    ??CrossCallReturnLabel_62
   2813            else
   2814            {
   2815              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_0:
   \   000013                ; Setup parameters for call to function osal_set_event
   \   000013   7A01         MOV     R2,#0x1
   \   000015   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   2816            }
   2817          }
   \                     ??CrossCallReturnLabel_62:
   \   000018   02....       LJMP    ??Subroutine45_0 & 0xFFFF
   2818          
   2819          /*********************************************************************
   2820           * @fn      ZDApp_NwkStateUpdateCB()
   2821           *
   2822           * @brief   This function notifies that this device's network
   2823           *          state info has been changed.
   2824           *
   2825           * @param   none
   2826           *
   2827           * @return  none
   2828           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2829          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   2830          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2831            // Notify to save info into NV
   2832            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000005                ; Setup parameters for call to function osal_get_timeoutEx
   \   000005   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000008   7003         JNZ     ??ZDApp_NwkStateUpdateCB_0
   2833            {
   2834              // Trigger to save info into NV
   2835              ZDApp_NVUpdate();
   \   00000A                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000A   12....       LCALL   ??ZDApp_NVUpdate?relay
   2836            }
   2837          }
   \                     ??ZDApp_NwkStateUpdateCB_0:
   \   00000D   02....       LJMP    ??Subroutine52_0 & 0xFFFF
   2838          
   2839          /*********************************************************************
   2840           * @fn      ZDApp_NodeProfileSync()
   2841           *
   2842           * @brief   Sync node with stack profile.
   2843           *
   2844           * @param   stackProfile - stack profile of the network to join
   2845           *
   2846           * @return  none
   2847           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2848          void ZDApp_NodeProfileSync( uint8 stackProfile )
   \                     ZDApp_NodeProfileSync:
   2849          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   2850            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000007   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   501A         JNC     ??ZDApp_NodeProfileSync_0
   2851            {
   2852              if ( stackProfile != zgStackProfile )
   \   00000F   90....       MOV     DPTR,#zgStackProfile
   \   000012   E0           MOVX    A,@DPTR
   \   000013   6E           XRL     A,R6
   \   000014   6013         JZ      ??ZDApp_NodeProfileSync_0
   2853              {
   2854                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000016   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   54F8         ANL     A,#0xf8
   \   00001C   4402         ORL     A,#0x2
   \   00001E   F0           MOVX    @DPTR,A
   2855                ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   00001F   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000022   740C         MOV     A,#0xc
   \   000024   F0           MOVX    @DPTR,A
   2856                NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000025                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000025   F9           MOV     R1,A
   \   000026   12....       LCALL   ??NLME_SetBroadcastFilter?relay
   2857              }
   2858            }
   2859          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   000029   02....       LJMP    ??Subroutine46_0 & 0xFFFF
   2860          
   2861          /*********************************************************************
   2862           * @fn      ZDApp_StartJoiningCycle()
   2863           *
   2864           * @brief   Starts the joining cycle of a device.  This will only
   2865           *          continue an already started (or stopped) joining cycle.
   2866           *
   2867           * @param   none
   2868           *
   2869           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   2870           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2871          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   2872          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2873            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StartJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7011         JNZ     ??ZDApp_StartJoiningCycle_1
   2874            {
   2875              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000011   90....       MOV     DPTR,#continueJoining
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
   2876              ZDApp_NetworkInit( 0 );
   \   000017                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   12....       LCALL   ??ZDApp_NetworkInit?relay
   2877          
   2878              return ( TRUE );
   \   00001E   7901         MOV     R1,#0x1
   \   000020   8002         SJMP    ??ZDApp_StartJoiningCycle_2
   2879            }
   2880            else
   2881              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000022   7900         MOV     R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000024   02....       LJMP    ??Subroutine45_0 & 0xFFFF
   2882          }
   2883          
   2884          /*********************************************************************
   2885           * @fn      ZDApp_StopJoiningCycle()
   2886           *
   2887           * @brief   Stops the joining or rejoining process of a device.
   2888           *
   2889           * @param   none
   2890           *
   2891           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   2892           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2893          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   2894          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2895            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StopJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7009         JNZ     ??ZDApp_StopJoiningCycle_1
   2896            {
   2897              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   000011   90....       MOV     DPTR,#continueJoining
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   2898              return ( TRUE );
   \   000016   7901         MOV     R1,#0x1
   \   000018   8002         SJMP    ??ZDApp_StopJoiningCycle_2
   2899            }
   2900            else
   2901              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   00001A   7900         MOV     R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   00001C   02....       LJMP    ??Subroutine45_0 & 0xFFFF
   2902          }
   2903          
   2904          /*********************************************************************
   2905           * @fn      ZDApp_AnnounceNewAddress()
   2906           *
   2907           * @brief   Send Device Announce and hold all transmissions for
   2908           *          new address timeout.
   2909           *
   2910           * @param   none
   2911           *
   2912           * @return  none
   2913           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2914          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   2915          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2916          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   2917            // Turn off data request hold
   2918            APSME_HoldDataRequests( 0 );
   \   000005                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000005   7A00         MOV     R2,#0x0
   \   000007   7B00         MOV     R3,#0x0
   \   000009   12....       LCALL   ??APSME_HoldDataRequests?relay
   2919          #endif
   2920          
   2921            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   2922                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   00000C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00000C   12....       LCALL   ??NLME_GetExtAddr?relay
   \   00000F   8A..         MOV     ?V0 + 0,R2
   \   000011   8B..         MOV     ?V0 + 1,R3
   \   000013   AE..         MOV     R6,?V0 + 0
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000018                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000018   75..00       MOV     ?V0 + 0,#0x0
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000020   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   EE           MOV     A,R6
   \   000026   FC           MOV     R4,A
   \   000027   AD..         MOV     R5,?V0 + 1
   \   000029   12....       LCALL   ??ZDP_DeviceAnnce?relay
   \   00002C   7401         MOV     A,#0x1
   \   00002E   12....       LCALL   ?DEALLOC_XSTACK8
   2923          
   2924          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   2925            // Setup the timeout
   2926            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   \   000031                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000031   7A00         MOV     R2,#0x0
   \   000033   7B00         MOV     R3,#0x0
   \   000035   12....       LCALL   ??APSME_HoldDataRequests?relay
   2927          #endif
   2928          }
   \   000038   02....       LJMP    ??Subroutine52_0 & 0xFFFF
   2929          
   2930          /*********************************************************************
   2931           * @fn          ZDApp_NVUpdate
   2932           *
   2933           * @brief       Set the NV Update Timer.
   2934           *
   2935           * @param       none
   2936           *
   2937           * @return      none
   2938           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2939          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   2940          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2941          #if defined ( NV_RESTORE )
   2942            osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   \   000004                ; Setup parameters for call to function osal_start_timerEx
   \   000004   7CBC         MOV     R4,#-0x44
   \   000006   7D02         MOV     R5,#0x2
   \   000008   7A00         MOV     R2,#0x0
   \   00000A   7B02         MOV     R3,#0x2
   \   00000C   02....       LJMP    ?Subroutine3 & 0xFFFF
   2943          #endif
   2944          }
   2945          
   2946          /*********************************************************************
   2947           * @fn      ZDApp_CoordStartPANIDConflictCB()
   2948           *
   2949           * @brief   Returns a PAN ID for the network layer to use during
   2950           *          a coordinator start and there is another network with
   2951           *          the intended PANID.
   2952           *
   2953           * @param   panid - the intended PAN ID
   2954           *
   2955           * @return  PANID to try
   2956           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2957          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   2958          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2959            return ( panid + 1 );
   \   000000   EA           MOV     A,R2
   \   000001   2401         ADD     A,#0x1
   \   000003   0A           INC     R2
   \   000004   EB           MOV     A,R3
   \   000005   3400         ADDC    A,#0x0
   \   000007   FB           MOV     R3,A
   \   000008   02....       LJMP    ?BRET
   2960          }
   2961          
   2962          /*********************************************************************
   2963           * @fn          ZDO_SrcRtgIndCB
   2964           *
   2965           * @brief       This function notifies the ZDO available src route record received.
   2966           *
   2967           * @param       srcAddr - source address of the source route
   2968           * @param       relayCnt - number of devices in the relay list
   2969           * @param       relayList - relay list of the source route
   2970           *
   2971           * @return      none
   2972           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2973          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   2974          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2975            zdoSrcRtg_t srcRtg;
   2976          
   2977            srcRtg.srcAddr = srcAddr;
   \   00000A   12....       LCALL   ?Subroutine10 & 0xFFFF
   2978            srcRtg.relayCnt = relayCnt;
   \                     ??CrossCallReturnLabel_131:
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E9           MOV     A,R1
   \   000013   F0           MOVX    @DPTR,A
   2979            srcRtg.pRelayList = pRelayList;
   \   000014   7403         MOV     A,#0x3
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   EC           MOV     A,R4
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   ED           MOV     A,R5
   \   00001D   F0           MOVX    @DPTR,A
   2980          
   2981            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   00001E   90....       MOV     DPTR,#zdoCBFunc
   \   000021   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000024   6013         JZ      ??ZDO_SrcRtgIndCB_0
   2982            {
   2983              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000026                ; Setup parameters for indirect call
   \   000026   85..82       MOV     DPL,?XSP + 0
   \   000029   85..83       MOV     DPH,?XSP + 1
   \   00002C   AA82         MOV     R2,DPL
   \   00002E   AB83         MOV     R3,DPH
   \   000030   90....       MOV     DPTR,#zdoCBFunc + 1
   \   000033   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   2984            }
   \                     ??CrossCallReturnLabel_102:
   \   000036   12....       LCALL   ?CALL_IND
   2985          }
   \                     ??ZDO_SrcRtgIndCB_0:
   \   000039   02....       LJMP    ?Subroutine5 & 0xFFFF
   2986          
   2987          /*********************************************************************
   2988           * @fn          ZDApp_InitZdoCBFunc
   2989           *
   2990           * @brief       Call this function to initialize zdoCBFunc[]
   2991           *
   2992           * @param       none
   2993           *
   2994           * @return      none
   2995           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2996          void ZDApp_InitZdoCBFunc( void )
   \                     ZDApp_InitZdoCBFunc:
   2997          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2998            uint8 i;
   2999          
   3000            for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
   \   000004   7A00         MOV     R2,#0x0
   3001            {
   3002              zdoCBFunc[i] = NULL;
   \                     ??ZDApp_InitZdoCBFunc_0:
   \   000006   12....       LCALL   ?Subroutine27 & 0xFFFF
   3003            }
   \                     ??CrossCallReturnLabel_36:
   \   000009   0A           INC     R2
   \   00000A   EA           MOV     A,R2
   \   00000B   C3           CLR     C
   \   00000C   9407         SUBB    A,#0x7
   \   00000E   40F6         JC      ??ZDApp_InitZdoCBFunc_0
   3004          }
   \   000010   02....       LJMP    ??Subroutine45_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   EA           MOV     A,R2
   \   000001   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000004   E4           CLR     A
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   74..         MOV     A,#zdoCBFunc & 0xff
   \   000008   28           ADD     A,R0
   \   000009   F582         MOV     DPL,A
   \   00000B   74..         MOV     A,#(zdoCBFunc >> 8) & 0xff
   \   00000D   39           ADDC    A,R1
   \   00000E   F583         MOV     DPH,A
   \   000010   22           RET
   3005          
   3006          /*********************************************************************
   3007           * @fn          ZDO_RegisterForZdoCB
   3008           *
   3009           * @brief       Call this function to register the higher layer (for
   3010           *              example, the Application layer or MT layer) with ZDO
   3011           *              callbacks to get notified of some ZDO indication like
   3012           *              existence of a concentrator or receipt of a source
   3013           *              route record.
   3014           *
   3015           * @param       indID - ZDO Indication ID
   3016           * @param       pFn   - Callback function pointer
   3017           *
   3018           * @return      ZSuccess - successful, ZInvalidParameter if not
   3019           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3020          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   3021          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FC           MOV     R4,A
   3022            // Check the range of the indication ID
   3023            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR     C
   \   000007   9407         SUBB    A,#0x7
   \   000009   500B         JNC     ??ZDO_RegisterForZdoCB_0
   3024            {
   3025              zdoCBFunc[indID] = pFn;
   \   00000B   EC           MOV     A,R4
   \   00000C   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00000F   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   3026              return ZSuccess;
   \                     ??CrossCallReturnLabel_128:
   \   000012   7900         MOV     R1,#0x0
   \   000014   8002         SJMP    ??ZDO_RegisterForZdoCB_1
   3027            }
   3028          
   3029            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000016   7902         MOV     R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   000018   02....       LJMP    ??Subroutine45_0 & 0xFFFF
   3030          }
   3031          
   3032          /*********************************************************************
   3033           * @fn          ZDO_DeregisterForZdoCB
   3034           *
   3035           * @brief       Call this function to de-register the higher layer (for
   3036           *              example, the Application layer or MT layer) with ZDO
   3037           *              callbacks to get notified of some ZDO indication like
   3038           *              existence of a concentrator or receipt of a source
   3039           *              route record.
   3040           *
   3041           * @param       indID - ZDO Indication ID
   3042           *
   3043           * @return      ZSuccess - successful, ZInvalidParameter if not
   3044           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3045          ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
   \                     ZDO_DeregisterForZdoCB:
   3046          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FA           MOV     R2,A
   3047            // Check the range of the indication ID
   3048            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR     C
   \   000007   9407         SUBB    A,#0x7
   \   000009   5006         JNC     ??ZDO_DeregisterForZdoCB_0
   3049            {
   3050              zdoCBFunc[indID] = NULL;
   \   00000B   12....       LCALL   ?Subroutine27 & 0xFFFF
   3051              return ZSuccess;
   \                     ??CrossCallReturnLabel_37:
   \   00000E   F9           MOV     R1,A
   \   00000F   8002         SJMP    ??ZDO_DeregisterForZdoCB_1
   3052            }
   3053          
   3054            return ZInvalidParameter;
   \                     ??ZDO_DeregisterForZdoCB_0:
   \   000011   7902         MOV     R1,#0x2
   \                     ??ZDO_DeregisterForZdoCB_1:
   \   000013   02....       LJMP    ??Subroutine45_0 & 0xFFFF
   3055          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdoDiscCounter>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for devState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for devStartMode>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   ....         DW ZDAppTaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SecInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SecInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessSecEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDOInitDevice?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDOInitDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ReadNetworkRestoreState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ReadNetworkRestoreState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDAppDetermineDeviceType?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppDetermineDeviceType

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkStartEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkStartEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_DeviceAuthEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceAuthEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SaveNetworkStateEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNetworkStateEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RestoreNetworkState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNetworkState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InitUserDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitUserDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDAppCheckForHoldKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppCheckForHoldKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessOSALMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessOSALMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessMsgCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RegisterCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RegisterCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessSecMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessNetworkJoin?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessNetworkJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SaveNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RestoreNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetTimerStart?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetTimerCancel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerCancel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlBypass?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlBypass

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlStartup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlStartup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkDiscoveryReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkDiscoveryReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_JoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_JoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_DeviceConfigured?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceConfigured

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SendEventMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendEventMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SendMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_NetworkDiscoveryConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NwkDescListProcessing?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkDescListProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_NetworkFormationConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkFormationConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_beaconNotifyIndCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_beaconNotifyIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_StartRouterConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartRouterConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_JoinConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_AddrChangeIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AddrChangeIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_JoinIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ConcentratorIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConcentratorIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_LeaveCnf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveCnf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_LeaveInd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SyncIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SyncIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ManytoOneFailureIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ManytoOneFailureIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_PollConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PollConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??AddrMgrWriteNVRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AddrMgrWriteNVRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_UpdateDeviceIndication?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateDeviceIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InMsgCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InMsgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ChangeMatchDescRespPermission?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeMatchDescRespPermission

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NwkStateUpdateCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkStateUpdateCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NodeProfileSync?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NodeProfileSync

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_StartJoiningCycle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StartJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_StopJoiningCycle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StopJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_AnnounceNewAddress?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AnnounceNewAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NVUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NVUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_CoordStartPANIDConflictCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_CoordStartPANIDConflictCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SrcRtgIndCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SrcRtgIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InitZdoCBFunc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitZdoCBFunc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RegisterForZdoCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_DeregisterForZdoCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_DeregisterForZdoCB
   3056          
   3057          /*********************************************************************
   3058          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     AddrMgrWriteNVRequest              0      0     34
       -> osal_get_timeoutEx            0      0     20
       -> ZDApp_NVUpdate                0      0     20
     ZDAppCheckForHoldKey               2      0      9
       -> HalKeyRead                    4      0      0
     ZDAppDetermineDeviceType           2      0     14
       -> nwk_ExtPANIDValid             4      0      0
     ZDApp_AnnounceNewAddress           0      0     23
       -> APSME_HoldDataRequests        0      0     20
       -> NLME_GetExtAddr               0      0     20
       -> NLME_GetShortAddr             0      0     20
       -> ZDP_DeviceAnnce               0      0     22
       -> APSME_HoldDataRequests        0      0     20
     ZDApp_ChangeMatchDescRespPermission
                                        0      0      9
       -> afSetMatch                    0      0     18
     ZDApp_CoordStartPANIDConflictCB
                                        0      0      0
     ZDApp_DeviceAuthEvt                2      0      9
       -> ZDApp_ResetTimerCancel        4      0      0
       -> osal_set_event                4      0      0
       -> NLME_StartRouterRequest       4      0      0
       -> ZDApp_NVUpdate                4      0      0
       -> ZDApp_SaveNwkKey              4      0      0
       -> ZDApp_AnnounceNewAddress      4      0      0
       -> NLME_SetPollRate              4      0      0
       -> ZDApp_NVUpdate                4      0      0
     ZDApp_DeviceConfigured             0      0     16
       -> osal_nv_read                  0      0     32
     ZDApp_InMsgCB                      0      0     14
       -> ZDP_GenericRsp                0      0     28
     ZDApp_Init                         0      0      9
       -> NLME_GetExtAddr               0      0     18
       -> ZDAppCheckForHoldKey          0      0     18
       -> ZDO_Init                      0      0     18
       -> afRegister                    0      0     18
       -> ZDOInitDevice                 0      0     18
       -> ZDApp_ReadNetworkRestoreState
                                        0      0     18
       -> ZDOInitDevice                 0      0     18
       -> HalLedBlink                   0      0     18
       -> ZDApp_InitZdoCBFunc           0      0     18
       -> ZDApp_RegisterCBs             0      0     18
     ZDApp_InitUserDesc                 0      0     31
       -> osal_memset                   0      0     54
       -> osal_nv_item_init             0      0     58
       -> osal_nv_read                  0      0     62
     ZDApp_InitZdoCBFunc                2      0      9
     ZDApp_JoinReq                      0      0     22
       -> ZDApp_NodeProfileSync         0      0     28
       -> NLME_JoinRequest              0      0     36
     ZDApp_LeaveCtrlBypass              2      0      0
     ZDApp_LeaveCtrlInit                0      0     28
       -> osal_nv_item_init             0      0     24
       -> osal_nv_read                  0      0     28
     ZDApp_LeaveCtrlReset               0      0     14
       -> osal_nv_write                 0      0     28
     ZDApp_LeaveCtrlSet                 0      0     23
       -> osal_nv_write                 0      0     28
     ZDApp_LeaveCtrlStartup             2      0     14
       -> ZDApp_LeaveCtrlReset          4      0      0
     ZDApp_LeaveReset                   0      0     21
       -> ZDApp_LeaveCtrlSet            0      0     18
       -> ZDApp_ResetTimerStart         0      0     18
     ZDApp_LeaveUpdate                  0      0     39
       -> ZDSecMgrDeviceRemoveByExtAddr
                                        0      0     48
       -> ZDSecMgrAddrClear             0      0     48
       -> osal_memcpy                   0      0     54
       -> NLME_RemoveChild              0      0     48
       -> RTG_RemoveRtgEntry            0      0     48
       -> nwkNeighborRemove             0      0     48
       -> AddrMgrWriteNVRequest         0      0     48
     ZDApp_NVUpdate                     2      0     14
       -> osal_start_timerEx            4      0      0
     ZDApp_NetworkDiscoveryReq          0      0     12
       -> NLME_NetworkDiscoveryRequest
                                        0      0     24
     ZDApp_NetworkInit                  2      0     14
       -> osal_start_timerEx            4      0      0
       -> osal_set_event                4      0      0
     ZDApp_NetworkStartEvt              2      0     10
       -> osal_pwrmgr_device            4      0      0
       -> osal_set_event                4      0      0
       -> NLME_GetEnergyThreshold       4      0      0
       -> NLME_GetEnergyThreshold       4      0      0
       -> NLME_SetEnergyThreshold       4      0      0
       -> osal_set_event                4      0      0
       -> osal_set_event                4      0      0
     ZDApp_NodeProfileSync              0      0     23
       -> NLME_SetBroadcastFilter       0      0     18
     ZDApp_NwkDescListProcessing        0      0     14
       -> nwk_getNwkDescList            0      0     28
       -> nwk_getNwkDescList            0      0     28
       -> nwk_ExtPANIDValid             0      0     28
       -> sAddrExtCmp                   0      0     28
     ZDApp_NwkStateUpdateCB             0      0     10
       -> osal_get_timeoutEx            0      0     20
       -> ZDApp_NVUpdate                0      0     20
     ZDApp_ProcessMsgCBs                0      0     54
       -> ZDO_ParseAddrRsp              0      0    108
       -> ZDO_UpdateAddrManager         0      0    108
       -> osal_mem_free                 0      0    108
       -> ZDO_ParseBindUnbindReq        0      0    108
       -> ZDO_ProcessBindUnbindReq      0      0    108
       -> ZDMatchSendState              0      0    108
       -> ZDO_ParseEndDeviceBindReq     0      0    108
       -> ZDO_MatchEndDeviceBind        0      0    108
       -> osal_mem_free                 0      0    108
       -> osal_mem_free                 0      0    108
     ZDApp_ProcessNetworkJoin           0      0     12
       -> osal_set_event                0      0     24
       -> ZDApp_AnnounceNewAddress      0      0     24
       -> NLME_StartRouterRequest       0      0     24
       -> NLME_GetShortAddr             0      0     24
       -> ZMacSetReq                    0      0     24
       -> nwkNeighborInitTable          0      0     24
       -> NLME_NwkDiscTerm              0      0     24
       -> osal_rand                     0      0     24
       -> ZDApp_NetworkInit             0      0     24
       -> osal_set_event                0      0     24
       -> NLME_SetPollRate              0      0     24
       -> NLME_SetQueuedPollRate        0      0     24
       -> NLME_SetResponseRate          0      0     24
       -> NLME_StartRouterRequest       0      0     24
       -> ZDApp_AnnounceNewAddress      0      0     24
       -> nwkNeighborInitTable          0      0     24
       -> NLME_NwkDiscTerm              0      0     24
       -> osal_rand                     0      0     24
       -> ZDApp_NetworkInit             0      0     24
       -> ZDApp_AnnounceNewAddress      0      0     24
       -> osal_set_event                0      0     24
     ZDApp_ProcessOSALMsg               2      0     10
       -> ZDP_IncomingData              4      0      0
       -> ZDApp_ProcessMsgCBs           4      0      0
     ZDApp_ProcessSecEvent              0      0      9
       -> ZDSecMgrNewDeviceEvent        0      0     18
       -> osal_start_timerEx            0      0     18
       -> ZDApp_DeviceAuthEvt           0      0     18
       -> ZDApp_SaveNwkKey              0      0     18
       -> ZDSecMgrSaveApsLinkKey        0      0     18
       -> ZDSecMgrSaveTCLinkKey         0      0     18
     ZDApp_ProcessSecMsg                2      0      0
       -> ZDSecMgrUpdateDeviceInd       4      0      0
     ZDApp_ReadNetworkRestoreState      0      0     23
       -> zgReadStartupOptions          0      0     18
     ZDApp_RegisterCBs                  2      0      9
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
     ZDApp_ResetNwkKey                  0      0     35
       -> osal_memset                   0      0     62
       -> osal_nv_write                 0      0     70
     ZDApp_ResetTimerCancel             2      0      0
       -> osal_stop_timerEx             4      0      0
     ZDApp_ResetTimerStart              2      0      9
       -> osal_start_timerEx            4      0      0
     ZDApp_RestoreNetworkState          0      0     23
       -> NLME_InitNV                   0      0     18
       -> NLME_RestoreFromNV            0      0     18
       -> NLME_GetShortAddr             0      0     18
       -> sAddrExtCpy                   0      0     18
     ZDApp_RestoreNwkKey                0      0     37
       -> osal_nv_read                  0      0     74
       -> osal_memset                   0      0     66
     ZDApp_SaveNetworkStateEvt          2      0     10
       -> NLME_UpdateNV                 4      0      0
       -> zgWriteStartupOptions         4      0      0
     ZDApp_SaveNwkKey                   0      0     46
       -> SSP_ReadNwkActiveKey          0      0     66
       -> osal_nv_write                 0      0     74
       -> osal_memset                   0      0     66
     ZDApp_SecInit                      0      0      9
       -> ZDSecMgrInit                  0      0     18
     ZDApp_SendEventMsg                 0      0      9
       -> ZDApp_SendMsg                 0      0     18
     ZDApp_SendMsg                      1      0     33
       -> osal_msg_allocate             0      0     32
       -> osal_memcpy                   0      0     38
       -> osal_msg_send                 0      0     32
     ZDApp_StartJoiningCycle            2      0      0
       -> ZDApp_NetworkInit             4      0      0
     ZDApp_StopJoiningCycle             2      0      0
     ZDApp_event_loop                   0      0     10
       -> osal_set_event                0      0     20
       -> ZDO_StartDevice               0      0     20
       -> ZDApp_ProcessOSALMsg          0      0     20
       -> osal_msg_deallocate           0      0     20
       -> osal_msg_receive              0      0     20
       -> ZDApp_NetworkStartEvt         0      0     20
       -> osal_pwrmgr_device            0      0     20
       -> osal_set_event                0      0     20
       -> ZDO_UpdateNwkStatus           0      0     20
       -> osal_start_timerEx            0      0     20
       -> ZDApp_SaveNetworkStateEvt     0      0     20
       -> zgWriteStartupOptions         0      0     20
       -> Onboard_soft_reset            0      0     20
     ZDOInitDevice                      0      0     23
       -> zgInitItems                   0      0     28
       -> ZDConfig_InitDescriptors      0      0     28
       -> HalKeyRead                    0      0     28
       -> NLME_InitNV                   0      0     28
       -> NLME_SetDefaultNV             0      0     28
       -> ZDSecMgrClearNVKeyValues      0      0     28
       -> ZDAppDetermineDeviceType      0      0     28
       -> osal_rand                     0      0     28
       -> ZDSecMgrInit                  0      0     28
       -> ZDApp_LeaveCtrlInit           0      0     28
       -> ZDApp_LeaveCtrlStartup        0      0     28
       -> zgWriteStartupOptions         0      0     28
       -> osal_set_event                0      0     28
       -> ZDApp_ReadNetworkRestoreState
                                        0      0     28
       -> ZDApp_RestoreNetworkState     0      0     28
       -> ZDApp_NetworkInit             0      0     28
       -> HalLedSet                     0      0     28
       -> NLME_SetBroadcastFilter       0      0     28
     ZDO_AddrChangeIndicationCB         0      0     12
       -> ZDApp_NVUpdate                0      0     24
       -> osal_set_event                0      0     24
       -> osal_msg_allocate             0      0     24
       -> osal_msg_send                 0      0     24
       -> ZDApp_AnnounceNewAddress      0      0     24
     ZDO_ConcentratorIndicationCB       1      0     14
     ZDO_DeregisterForZdoCB             2      0      0
     ZDO_JoinConfirmCB                  1      0     14
       -> HalLedSet                     0      0     28
       -> HalLedSet                     0      0     28
       -> ZDApp_NVUpdate                0      0     28
       -> HalLedSet                     0      0     28
       -> ZDApp_SendMsg                 0      0     28
     ZDO_JoinIndicationCB               2      0      1
       -> ZDApp_NVUpdate                4      0      0
     ZDO_LeaveCnf                       0      0     10
       -> NLME_GetExtAddr               0      0     20
       -> sAddrExtCmp                   0      0     20
       -> ZDApp_LeaveReset              0      0     20
       -> ZDApp_LeaveUpdate             0      0     20
     ZDO_LeaveInd                       1      0     12
       -> NLME_LeaveRsp                 0      0     24
       -> ZDApp_LeaveReset              0      0     24
       -> NLME_GetCoordShortAddr        0      0     24
       -> ZDApp_LeaveReset              0      0     24
       -> ZDApp_LeaveUpdate             0      0     24
     ZDO_ManytoOneFailureIndicationCB
                                        2      0      0
       -> RTG_MTORouteReq               4      0      0
     ZDO_NetworkDiscoveryConfirmCB      3      0      3
       -> ZDApp_SendMsg                 4      0      6
     ZDO_NetworkFormationConfirmCB      0      0      9
       -> HalLedSet                     0      0     18
       -> HalLedSet                     0      0     18
       -> HalLedSet                     0      0     18
       -> osal_set_event                0      0     18
     ZDO_PollConfirmCB                  0      0      0
     ZDO_RegisterForZdoCB               2      0      0
     ZDO_SrcRtgIndCB                    1      0     14
     ZDO_StartRouterConfirmCB           0      0      9
       -> HalLedSet                     0      0     18
       -> HalLedSet                     0      0     18
       -> HalLedSet                     0      0     18
       -> osal_set_event                0      0     18
     ZDO_SyncIndicationCB               0      0      9
       -> nwkNeighborInitTable          0      0     18
       -> ZDApp_SendMsg                 0      0     18
     ZDO_UpdateDeviceIndication         0      0      0
     ZDO_beaconNotifyIndCB              1      0     14
       -> osal_mem_alloc                0      0     28
       -> osal_memset                   0      0     28
       -> sAddrExtCpy                   0      0     28
       -> osal_memset                   0      0     28


   Segment part sizes:

     Function/Label                              Bytes
     --------------                              -----
     MatchRsps                                      1
     zdoDiscCounter                                 1
     ZDAppNwkAddr                                   9
     zdappMgmtNwkDiscRspTransSeq                    1
     zdappMgmtNwkDiscReqInProgress                  1
     zdappMgmtNwkDiscRspAddr                        9
     zdappMgmtNwkDiscStartIndex                     1
     zdappMgmtSavedNwkState                         1
     nwkFrameCounterChanges                         2
     continueJoining                                1
     _tmpRejoinState                                1
     ZDO_UseExtendedPANID                           8
     zdoCBFunc                                     14
     ZDAppTaskID                                    1
     nwkStatus                                      1
     ZDApp_AutoFindMode_epDesc                      2
     ZDApp_LeaveCtrl                                1
     devState                                       1
     devStartMode                                   1
     retryCnt                                       1
     ZDApp_epDesc                                   6
     ZDApp_SavedPollRate                            2
     ZDApp_Init                                    91
     ??Subroutine46_0                               5
     ZDApp_SecInit                                 11
     ZDApp_event_loop                             225
     ?Subroutine13                                  2
     ??Subroutine37_0                              11
     ??Subroutine39_0                               6
     ??Subroutine42_0                              14
     ??Subroutine52_0                               5
     ZDApp_ProcessSecEvent                        134
     ?Subroutine21                                  2
     ??Subroutine38_0                               3
     ??Subroutine47_0                               6
     ??Subroutine57_0                               6
     ZDOInitDevice                                207
     ??Subroutine40_0                               3
     ??Subroutine41_0                               5
     ?Subroutine10                                  6
     ZDApp_ReadNetworkRestoreState                 21
     ZDAppDetermineDeviceType                      74
     ??Subroutine45_0                               7
     ZDApp_NetworkStartEvt                         79
     ZDApp_DeviceAuthEvt                           66
     ?Subroutine7                                   5
     ??Subroutine43_0                               6
     ?Subroutine19                                  9
     ZDApp_SaveNetworkStateEvt                     19
     ZDApp_RestoreNetworkState                     74
     ?Subroutine11                                  8
     ZDApp_InitUserDesc                            89
     ?Subroutine31                                 32
     ?Subroutine32                                  8
     ??Subroutine51_0                               3
     ZDAppCheckForHoldKey                          20
     ZDApp_ProcessOSALMsg                          50
     ??Subroutine50_0                               6
     ZDApp_ProcessMsgCBs                          247
     ?Subroutine25                                  1
     ??Subroutine49_0                              10
     ?Subroutine30                                  3
     ??Subroutine53_0                               3
     ??Subroutine54_0                               5
     ??Subroutine55_0                               3
     ??Subroutine56_0                               6
     ?Subroutine28                                 16
     ZDApp_RegisterCBs                             48
     ?Subroutine14                                  2
     ??Subroutine44_0                               9
     ZDApp_ProcessSecMsg                           19
     ZDApp_ProcessNetworkJoin                     413
     ?Subroutine6                                   5
     ?Subroutine8                                  12
     ?Subroutine2                                   2
     ZDApp_SaveNwkKey                             112
     ZDApp_ResetNwkKey                             50
     ZDApp_RestoreNwkKey                          141
     ZDApp_ResetTimerStart                         15
     ?Subroutine3                                   3
     ZDApp_ResetTimerCancel                        19
     ZDApp_LeaveCtrlInit                           71
     ZDApp_LeaveCtrlSet                            22
     ?Subroutine1                                  35
     ZDApp_LeaveCtrlReset                          13
     ZDApp_LeaveCtrlBypass                         15
     ZDApp_LeaveCtrlStartup                        47
     ZDApp_LeaveReset                              17
     ZDApp_LeaveUpdate                            148
     ?Subroutine17                                  3
     ZDApp_NetworkDiscoveryReq                     11
     ZDApp_JoinReq                                 84
     ?Subroutine4                                   5
     ZDApp_DeviceConfigured                        87
     ZDApp_SendEventMsg                            17
     ?Subroutine22                                  9
     ZDApp_SendMsg                                 90
     ZDO_NetworkDiscoveryConfirmCB                 78
     ZDApp_NwkDescListProcessing                  275
     ?Subroutine15                                  4
     ?Subroutine20                                 10
     ??Subroutine48_0                               6
     ?Subroutine0                                   3
     ZDO_NetworkFormationConfirmCB                 34
     ?Subroutine26                                 19
     ZDO_beaconNotifyIndCB                        575
     ?Subroutine33                                  9
     ?Subroutine24                                  4
     ?Subroutine35                                 11
     ?Subroutine18                                  8
     ?Subroutine9                                   7
     ?Subroutine34                                  9
     ZDO_StartRouterConfirmCB                      34
     ZDO_JoinConfirmCB                            108
     ?Subroutine5                                   8
     ZDO_AddrChangeIndicationCB                    93
     ?Subroutine16                                  1
     ZDO_JoinIndicationCB                          12
     ZDO_ConcentratorIndicationCB                  60
     ZDO_LeaveCnf                                  86
     ?Subroutine12                                 23
     ?Subroutine29                                  3
     ZDO_LeaveInd                                 164
     ZDO_SyncIndicationCB                          37
     ZDO_ManytoOneFailureIndicationCB
                                                   10
     ZDO_PollConfirmCB                              3
     AddrMgrWriteNVRequest                         15
     ?Subroutine23                                 18
     ZDO_UpdateDeviceIndication                     5
     ZDApp_InMsgCB                                 98
     ZDApp_ChangeMatchDescRespPermission
                                                   11
     ZDApp_NetworkInit                             27
     ZDApp_NwkStateUpdateCB                        16
     ZDApp_NodeProfileSync                         44
     ZDApp_StartJoiningCycle                       39
     ZDApp_StopJoiningCycle                        31
     ZDApp_AnnounceNewAddress                      59
     ZDApp_NVUpdate                                15
     ZDApp_CoordStartPANIDConflictCB
                                                   11
     ZDO_SrcRtgIndCB                               60
     ZDApp_InitZdoCBFunc                           19
     ?Subroutine27                                  9
     ?Subroutine36                                 17
     ZDO_RegisterForZdoCB                          27
     ZDO_DeregisterForZdoCB                        22
     ?<Initializer for zdoDiscCounter>              1
     ?<Initializer for continueJoining>             1
     ?<Initializer for devState>                    1
     ?<Initializer for devStartMode>                1
     ?<Initializer for ZDApp_epDesc>                6
     ?<Initializer for ZDApp_SavedPollRate>         2
     __Constant_1                                   4
     __Constant_3e8                                 4
     ??ZDApp_Init?relay                             6
     ??ZDApp_SecInit?relay                          6
     ??ZDApp_event_loop?relay                       6
     ??ZDApp_ProcessSecEvent?relay                  6
     ??ZDOInitDevice?relay                          6
     ??ZDApp_ReadNetworkRestoreState?relay          6
     ??ZDAppDetermineDeviceType?relay               6
     ??ZDApp_NetworkStartEvt?relay                  6
     ??ZDApp_DeviceAuthEvt?relay                    6
     ??ZDApp_SaveNetworkStateEvt?relay              6
     ??ZDApp_RestoreNetworkState?relay              6
     ??ZDApp_InitUserDesc?relay                     6
     ??ZDAppCheckForHoldKey?relay                   6
     ??ZDApp_ProcessOSALMsg?relay                   6
     ??ZDApp_ProcessMsgCBs?relay                    6
     ??ZDApp_RegisterCBs?relay                      6
     ??ZDApp_ProcessSecMsg?relay                    6
     ??ZDApp_ProcessNetworkJoin?relay               6
     ??ZDApp_SaveNwkKey?relay                       6
     ??ZDApp_ResetNwkKey?relay                      6
     ??ZDApp_RestoreNwkKey?relay                    6
     ??ZDApp_ResetTimerStart?relay                  6
     ??ZDApp_ResetTimerCancel?relay                 6
     ??ZDApp_LeaveCtrlInit?relay                    6
     ??ZDApp_LeaveCtrlSet?relay                     6
     ??ZDApp_LeaveCtrlReset?relay                   6
     ??ZDApp_LeaveCtrlBypass?relay                  6
     ??ZDApp_LeaveCtrlStartup?relay                 6
     ??ZDApp_LeaveReset?relay                       6
     ??ZDApp_LeaveUpdate?relay                      6
     ??ZDApp_NetworkDiscoveryReq?relay              6
     ??ZDApp_JoinReq?relay                          6
     ??ZDApp_DeviceConfigured?relay                 6
     ??ZDApp_SendEventMsg?relay                     6
     ??ZDApp_SendMsg?relay                          6
     ??ZDO_NetworkDiscoveryConfirmCB?relay          6
     ??ZDApp_NwkDescListProcessing?relay            6
     ??ZDO_NetworkFormationConfirmCB?relay          6
     ??ZDO_beaconNotifyIndCB?relay                  6
     ??ZDO_StartRouterConfirmCB?relay               6
     ??ZDO_JoinConfirmCB?relay                      6
     ??ZDO_AddrChangeIndicationCB?relay             6
     ??ZDO_JoinIndicationCB?relay                   6
     ??ZDO_ConcentratorIndicationCB?relay           6
     ??ZDO_LeaveCnf?relay                           6
     ??ZDO_LeaveInd?relay                           6
     ??ZDO_SyncIndicationCB?relay                   6
     ??ZDO_ManytoOneFailureIndicationCB?relay       6
     ??ZDO_PollConfirmCB?relay                      6
     ??AddrMgrWriteNVRequest?relay                  6
     ??ZDO_UpdateDeviceIndication?relay             6
     ??ZDApp_InMsgCB?relay                          6
     ??ZDApp_ChangeMatchDescRespPermission?relay    6
     ??ZDApp_NetworkInit?relay                      6
     ??ZDApp_NwkStateUpdateCB?relay                 6
     ??ZDApp_NodeProfileSync?relay                  6
     ??ZDApp_StartJoiningCycle?relay                6
     ??ZDApp_StopJoiningCycle?relay                 6
     ??ZDApp_AnnounceNewAddress?relay               6
     ??ZDApp_NVUpdate?relay                         6
     ??ZDApp_CoordStartPANIDConflictCB?relay        6
     ??ZDO_SrcRtgIndCB?relay                        6
     ??ZDApp_InitZdoCBFunc?relay                    6
     ??ZDO_RegisterForZdoCB?relay                   6
     ??ZDO_DeregisterForZdoCB?relay                 6

 
 5 373 bytes in segment BANKED_CODE
   390 bytes in segment BANK_RELAYS
    12 bytes in segment XDATA_I
    12 bytes in segment XDATA_ID
     8 bytes in segment XDATA_ROM_C
    54 bytes in segment XDATA_Z
 
 5 775 bytes of CODE  memory
     0 bytes of CONST memory (+ 8 bytes shared)
    66 bytes of XDATA memory

Errors: none
Warnings: none
