###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         01/Apr/2021  13:58:19 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ              #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Components\mt\MT_TASK.c                   #
#    Command line       =  -f "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ          #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\Tools\CC2530DB\f8wEndev.cfg"            #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f "F:\CC2530\CC2530-2019£¨ÖØÒ #
#                          ª£©45\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_Èë #
#                          ÍøÁ÷³Ì\ZStack-2.5.1a\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cf #
#                          g" (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0   #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "F:\CC2530\CC2530-2019£¨ÖØÒ #
#                          ª£©45\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_Èë #
#                          ÍøÁ÷³Ì\ZStack-2.5.1a\Components\mt\MT_TASK.c" -D   #
#                          NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D            #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG  #
#                          -D HOLD_AUTO_START -D NV_INIT -D NV_RESTORE=1 -lC  #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\EndDeviceEB\List\" -lA                           #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\EndDeviceEB\List\" --diag_suppress Pe001,Pa010   #
#                          -o "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ          #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\EndDeviceEB\Obj\" -e --no_code_motion --debug    #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "F:\CC2530\CC2530-2019£¨ÖØ #
#                          Òª£©45\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_È #
#                          ëÍøÁ÷³Ì\ZStack-2.5.1a\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\" -I "F:\CC2530\CC2530-2019£¨ÖØÒª£© #
#                          45\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ #
#                          ÷³Ì\ZStack-2.5.1a\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\Source\" -I                          #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\ZMain\TI2530DB\" -I                     #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\hal\include\" -I       #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\hal\target\CC2530EB\"  #
#                          -I "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ          #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\mac\include\" -I       #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\mac\high_level\" -I    #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\mac\low_level\srf04\"  #
#                          -I "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ          #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\mac\low_level\srf04\si #
#                          ngle_chip\" -I "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ #
#                          5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\Z #
#                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\..\..\..\..\..\Components\mt\" -I            #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\osal\include\" -I      #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\services\saddr\" -I    #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\services\sdata\" -I    #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\af\" -I          #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\nwk\" -I         #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\sapi\" -I        #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\sec\" -I         #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\sys\" -I         #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\zdo\" -I         #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\zmac\" -I              #
#                          "F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ             #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\zmac\f8w\" -Ohz        #
#                          --require_prototypes                               #
#    List file          =  F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ              #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\EndDeviceEB\List\MT_TASK.lst                     #
#    Object file        =  F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ              #
#                          zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\EndDeviceEB\Obj\MT_TASK.r51                      #
#                                                                             #
#                                                                             #
###############################################################################

F:\CC2530\CC2530-2019£¨ÖØÒª£©45\µÚ5ÕÂ zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Óë½¨Íø_ÈëÍøÁ÷³Ì\ZStack-2.5.1a\Components\mt\MT_TASK.c
      1          /***************************************************************************************************
      2            Filename:       MT_TASK.c
      3            Revised:        $Date: 2011-06-07 15:36:01 -0700 (Tue, 07 Jun 2011) $
      4            Revision:       $Revision: 26245 $
      5          
      6            Description:    MonitorTest Task handling routines
      7          
      8            Copyright 2007-2011 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "MT_TASK.h"
     45          #include "MT.h"
     46          #include "MT_DEBUG.h"
     47          #include "MT_UART.h"
     48          #include "MT_UTIL.h"
     49          #include "MT_SYS.h"
     50          
     51          #if !defined( NONWK )
     52          #include "MT_ZDO.h"
     53          #include "MT_AF.h"
     54          #endif  /* NONWK */
     55          
     56          #include "hal_uart.h"
     57          #include "OSAL_Memory.h"
     58          
     59          /***************************************************************************************************
     60           * LOCAL FUNCTIONS
     61           ***************************************************************************************************/
     62          
     63          static void MT_ProcessIncomingCommand( mtOSALSerialData_t *msg );
     64          
     65          /***************************************************************************************************
     66           * GLOBALS
     67           ***************************************************************************************************/
     68          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     69          uint8 MT_TaskID;
   \                     MT_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     70          
     71          /***************************************************************************************************
     72           * @fn      MT_TaskInit
     73           *
     74           * @brief  MonitorTest Task Initialization.  This function is put into the
     75           *         task table.
     76           *
     77           * @param   task_id - task ID of the MT Task
     78           *
     79           * @return  void
     80           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     81          void MT_TaskInit(uint8 task_id)
   \                     MT_TaskInit:
     82          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
     83            MT_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#MT_TaskID
   \   00000A   F0           MOVX    @DPTR,A
     84          
     85            /* Initialize the Serial port */
     86            MT_UartInit();
   \   00000B                ; Setup parameters for call to function MT_UartInit
   \   00000B   12....       LCALL   ??MT_UartInit?relay
     87          
     88            /* Register taskID - Do this after UartInit() because it will reset the taskID */
     89            MT_UartRegisterTaskID(task_id);
   \   00000E                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00000E   EE           MOV     A,R6
   \   00000F   F9           MOV     R1,A
   \   000010   12....       LCALL   ??MT_UartRegisterTaskID?relay
     90          
     91            osal_set_event(task_id, MT_SECONDARY_INIT_EVENT);
   \   000013                ; Setup parameters for call to function osal_set_event
   \   000013   7A10         MOV     R2,#0x10
   \   000015   7B00         MOV     R3,#0x0
   \   000017   EE           MOV     A,R6
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   ??osal_set_event?relay
     92          }
   \   00001C   7F01         MOV     R7,#0x1
   \   00001E   02....       LJMP    ?BANKED_LEAVE_XDATA
     93          
     94          /**************************************************************************************************
     95           * @fn      MT_ProcessEvent
     96           *
     97           * @brief   MonitorTest Task Event Processor.  This task is put into the task table.
     98           *
     99           * @param   task_id - task ID of the MT Task
    100           * @param   events - event(s) for the MT Task
    101           *
    102           * @return  Bit mask of the unprocessed MT Task events.
    103           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    104          UINT16 MT_ProcessEvent(uint8 task_id, uint16 events)
   \                     MT_ProcessEvent:
    105          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    106            /* Could be multiple events, so switch won't work */
    107            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7003         JNZ     $+5
   \   00000D   02....       LJMP    ??MT_ProcessEvent_0 & 0xFFFF
    108            {
    109              uint8 *msg_ptr = osal_msg_receive(task_id);
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   12....       LCALL   ??osal_msg_receive?relay
   \   000013   8A..         MOV     ?V0 + 2,R2
   \   000015   8B..         MOV     ?V0 + 3,R3
    110          
    111              if (msg_ptr != NULL)
   \   000017   EA           MOV     A,R2
   \   000018   45..         ORL     A,?V0 + 3
   \   00001A   7003         JNZ     $+5
   \   00001C   02....       LJMP    ??MT_ProcessEvent_1 & 0xFFFF
    112              {
    113                MT_ProcessIncomingCommand((mtOSALSerialData_t *)msg_ptr);
   \   00001F   8A82         MOV     DPL,R2
   \   000021   8B83         MOV     DPH,R3
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0 + 0,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0 + 1,A
   \   00002C   8A82         MOV     DPL,R2
   \   00002E   8B83         MOV     DPH,R3
   \   000030   E0           MOVX    A,@DPTR
   \   000031   14           DEC     A
   \   000032   7003         JNZ     $+5
   \   000034   02....       LJMP    ??MT_ProcessEvent_2 & 0xFFFF
   \   000037   14           DEC     A
   \   000038   7003         JNZ     $+5
   \   00003A   02....       LJMP    ??MT_ProcessEvent_3 & 0xFFFF
   \   00003D   24FE         ADD     A,#-0x2
   \   00003F   6026         JZ      ??MT_ProcessEvent_4
   \   000041   24FE         ADD     A,#-0x2
   \   000043   601D         JZ      ??MT_ProcessEvent_5
   \   000045   24E2         ADD     A,#-0x1e
   \   000047   6003         JZ      $+5
   \   000049   02....       LJMP    ??MT_ProcessEvent_6 & 0xFFFF
   \   00004C                ; Setup parameters for call to function MTProcessAppRspMsg
   \   00004C   85..82       MOV     DPL,?V0 + 0
   \   00004F   85..83       MOV     DPH,?V0 + 1
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   2405         ADD     A,#0x5
   \   000058   F9           MOV     R1,A
   \   000059   AA..         MOV     R2,?V0 + 0
   \   00005B   AB..         MOV     R3,?V0 + 1
   \   00005D   12....       LCALL   ??MTProcessAppRspMsg?relay
   \   000060   806B         SJMP    ??MT_ProcessEvent_6
   \                     ??MT_ProcessEvent_5:
   \   000062                ; Setup parameters for call to function MT_ProcessDebugStr
   \   000062   12....       LCALL   ??MT_ProcessDebugStr?relay
   \   000065   8066         SJMP    ??MT_ProcessEvent_6
   \                     ??MT_ProcessEvent_4:
   \   000067   85..82       MOV     DPL,?V0 + 0
   \   00006A   85..83       MOV     DPH,?V0 + 1
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   2405         ADD     A,#0x5
   \   000073   F5..         MOV     ?V0 + 6,A
   \   000075                ; Setup parameters for call to function MT_UartCalcFCS
   \   000075   74FE         MOV     A,#-0x2
   \   000077   25..         ADD     A,?V0 + 6
   \   000079   F9           MOV     R1,A
   \   00007A   85..82       MOV     DPL,?V0 + 0
   \   00007D   85..83       MOV     DPH,?V0 + 1
   \   000080   A3           INC     DPTR
   \   000081   AA82         MOV     R2,DPL
   \   000083   AB83         MOV     R3,DPH
   \   000085   12....       LCALL   ??MT_UartCalcFCS?relay
   \   000088   E9           MOV     A,R1
   \   000089   C0E0         PUSH    A
   \   00008B   85....       MOV     ?V0 + 8,?V0 + 6
   \   00008E   E5..         MOV     A,?V0 + 0
   \   000090   25..         ADD     A,?V0 + 8
   \   000092   F8           MOV     R0,A
   \   000093   E5..         MOV     A,?V0 + 1
   \   000095   3400         ADDC    A,#0x0
   \   000097   F9           MOV     R1,A
   \   000098   E8           MOV     A,R0
   \   000099   24FF         ADD     A,#-0x1
   \   00009B   F582         MOV     DPL,A
   \   00009D   E9           MOV     A,R1
   \   00009E   34FF         ADDC    A,#-0x1
   \   0000A0   F583         MOV     DPH,A
   \   0000A2   D0E0         POP     A
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5                ; Setup parameters for call to function HalUARTWrite
   \   0000A5   7C04         MOV     R4,#0x4
   \   0000A7   7D00         MOV     R5,#0x0
   \   0000A9   7A..         MOV     R2,#`?<Constant "Rxa:">` & 0xff
   \   0000AB   7B..         MOV     R3,#(`?<Constant "Rxa:">` >> 8) & 0xff
   \   0000AD   7900         MOV     R1,#0x0
   \   0000AF   12....       LCALL   ??HalUARTWrite?relay
   \   0000B2                ; Setup parameters for call to function HalUARTWrite
   \   0000B2   AC..         MOV     R4,?V0 + 6
   \   0000B4   7D00         MOV     R5,#0x0
   \   0000B6   AA..         MOV     R2,?V0 + 0
   \   0000B8   AB..         MOV     R3,?V0 + 1
   \   0000BA   7900         MOV     R1,#0x0
   \   0000BC   12....       LCALL   ??HalUARTWrite?relay
   \   0000BF   800C         SJMP    ??MT_ProcessEvent_6
   \                     ??MT_ProcessEvent_3:
   \   0000C1                ; Setup parameters for call to function MT_ProcessDebugMsg
   \   0000C1   12....       LCALL   ??MT_ProcessDebugMsg?relay
   \   0000C4   8007         SJMP    ??MT_ProcessEvent_6
   \                     ??MT_ProcessEvent_2:
   \   0000C6                ; Setup parameters for call to function MT_ProcessIncoming
   \   0000C6   AA..         MOV     R2,?V0 + 0
   \   0000C8   AB..         MOV     R3,?V0 + 1
   \   0000CA   12....       LCALL   ??MT_ProcessIncoming?relay
    114          
    115                osal_msg_deallocate(msg_ptr);
   \                     ??MT_ProcessEvent_6:
   \   0000CD                ; Setup parameters for call to function osal_msg_deallocate
   \   0000CD   AA..         MOV     R2,?V0 + 2
   \   0000CF   AB..         MOV     R3,?V0 + 3
   \   0000D1   12....       LCALL   ??osal_msg_deallocate?relay
    116              }
    117          
    118              /* Return unproccessed events */
    119              return (events ^ SYS_EVENT_MSG);
   \                     ??MT_ProcessEvent_1:
   \   0000D4   EE           MOV     A,R6
   \   0000D5   FA           MOV     R2,A
   \   0000D6   EF           MOV     A,R7
   \   0000D7   6480         XRL     A,#0x80
   \                     ??MT_ProcessEvent_7:
   \   0000D9   FB           MOV     R3,A
   \   0000DA   806B         SJMP    ??MT_ProcessEvent_8
    120            }
    121          
    122            if ( events & MT_SECONDARY_INIT_EVENT )
   \                     ??MT_ProcessEvent_0:
   \   0000DC   EE           MOV     A,R6
   \   0000DD   5410         ANL     A,#0x10
   \   0000DF   600A         JZ      ??MT_ProcessEvent_9
    123            {
    124              MT_Init();
   \   0000E1                ; Setup parameters for call to function MT_Init
   \   0000E1   12....       LCALL   ??MT_Init?relay
    125              /* Return unproccessed events */
    126              return (events ^ MT_SECONDARY_INIT_EVENT);
   \   0000E4   EE           MOV     A,R6
   \   0000E5   6410         XRL     A,#0x10
   \                     ??MT_ProcessEvent_10:
   \   0000E7   FA           MOV     R2,A
   \   0000E8   EF           MOV     A,R7
   \   0000E9   80EE         SJMP    ??MT_ProcessEvent_7
    127            }
    128          
    129            if ( events & MT_ZTOOL_SERIAL_RCV_BUFFER_FULL )
   \                     ??MT_ProcessEvent_9:
   \   0000EB   EE           MOV     A,R6
   \   0000EC   5402         ANL     A,#0x2
   \   0000EE   6006         JZ      ??MT_ProcessEvent_11
    130            {
    131              /* Return unproccessed events */
    132              return (events ^ MT_ZTOOL_SERIAL_RCV_BUFFER_FULL);
   \   0000F0   EE           MOV     A,R6
   \   0000F1   6402         XRL     A,#0x2
   \   0000F3   FA           MOV     R2,A
   \   0000F4   8051         SJMP    ??MT_ProcessEvent_8
    133            }
    134          
    135          #if !defined( NONWK )
    136            if ( events & MT_AF_EXEC_EVT )
   \                     ??MT_ProcessEvent_11:
   \   0000F6   EE           MOV     A,R6
   \   0000F7   5408         ANL     A,#0x8
   \   0000F9   6008         JZ      ??MT_ProcessEvent_12
    137            {
    138              MT_AfExec();
   \   0000FB                ; Setup parameters for call to function MT_AfExec
   \   0000FB   12....       LCALL   ??MT_AfExec?relay
    139              return (events ^ MT_AF_EXEC_EVT);
   \   0000FE   EE           MOV     A,R6
   \   0000FF   6408         XRL     A,#0x8
   \   000101   80E4         SJMP    ??MT_ProcessEvent_10
    140            }
    141          #endif  /* NONWK */
    142          
    143            /* Handle MT_SYS_OSAL_START_TIMER callbacks */
    144          #if defined MT_SYS_FUNC
    145            if ( events & (MT_SYS_OSAL_EVENT_MASK))
   \                     ??MT_ProcessEvent_12:
   \   000103   EF           MOV     A,R7
   \   000104   540F         ANL     A,#0xf
   \   000106   603B         JZ      ??MT_ProcessEvent_13
    146            {
    147              if (events & MT_SYS_OSAL_EVENT_0)
   \   000108   EF           MOV     A,R7
   \   000109   5408         ANL     A,#0x8
   \   00010B   6009         JZ      ??MT_ProcessEvent_14
    148              {
    149                MT_SysOsalTimerExpired(0x00);
   \   00010D                ; Setup parameters for call to function MT_SysOsalTimerExpired
   \   00010D   7900         MOV     R1,#0x0
   \   00010F   12....       LCALL   ??MT_SysOsalTimerExpired?relay
    150                events ^= MT_SYS_OSAL_EVENT_0;
   \   000112   7408         MOV     A,#0x8
   \   000114   6F           XRL     A,R7
   \   000115   FF           MOV     R7,A
    151              }
    152          
    153              if (events & MT_SYS_OSAL_EVENT_1)
   \                     ??MT_ProcessEvent_14:
   \   000116   EF           MOV     A,R7
   \   000117   5404         ANL     A,#0x4
   \   000119   6009         JZ      ??MT_ProcessEvent_15
    154              {
    155                MT_SysOsalTimerExpired(0x01);
   \   00011B                ; Setup parameters for call to function MT_SysOsalTimerExpired
   \   00011B   7901         MOV     R1,#0x1
   \   00011D   12....       LCALL   ??MT_SysOsalTimerExpired?relay
    156                events ^= MT_SYS_OSAL_EVENT_1;
   \   000120   7404         MOV     A,#0x4
   \   000122   6F           XRL     A,R7
   \   000123   FF           MOV     R7,A
    157              }
    158          
    159              if (events & MT_SYS_OSAL_EVENT_2)
   \                     ??MT_ProcessEvent_15:
   \   000124   EF           MOV     A,R7
   \   000125   5402         ANL     A,#0x2
   \   000127   6009         JZ      ??MT_ProcessEvent_16
    160              {
    161                MT_SysOsalTimerExpired(0x02);
   \   000129                ; Setup parameters for call to function MT_SysOsalTimerExpired
   \   000129   7902         MOV     R1,#0x2
   \   00012B   12....       LCALL   ??MT_SysOsalTimerExpired?relay
    162                events ^= MT_SYS_OSAL_EVENT_2;
   \   00012E   7402         MOV     A,#0x2
   \   000130   6F           XRL     A,R7
   \   000131   FF           MOV     R7,A
    163              }
    164          
    165              if (events & MT_SYS_OSAL_EVENT_3)
   \                     ??MT_ProcessEvent_16:
   \   000132   EF           MOV     A,R7
   \   000133   5401         ANL     A,#0x1
   \   000135   6009         JZ      ??MT_ProcessEvent_17
    166              {
    167                MT_SysOsalTimerExpired(0x03);
   \   000137                ; Setup parameters for call to function MT_SysOsalTimerExpired
   \   000137   7903         MOV     R1,#0x3
   \   000139   12....       LCALL   ??MT_SysOsalTimerExpired?relay
    168                events ^= MT_SYS_OSAL_EVENT_3;
   \   00013C   7401         MOV     A,#0x1
   \   00013E   6F           XRL     A,R7
   \   00013F   FF           MOV     R7,A
    169              }
    170          
    171              return events;
   \                     ??MT_ProcessEvent_17:
   \   000140   EE           MOV     A,R6
   \   000141   80A4         SJMP    ??MT_ProcessEvent_10
    172            }
    173          #endif
    174          
    175            /* Discard or make more handlers */
    176            return 0;
   \                     ??MT_ProcessEvent_13:
   \   000143   7A00         MOV     R2,#0x0
   \   000145   7B00         MOV     R3,#0x0
   \                     ??MT_ProcessEvent_8:
   \   000147   7F0A         MOV     R7,#0xa
   \   000149   02....       LJMP    ?BANKED_LEAVE_XDATA
    177          
    178          } /* MT_ProcessEvent() */
    179          
    180          /***************************************************************************************************
    181           * @fn      MT_ProcessIncomingCommand
    182           *
    183           * @brief
    184           *
    185           *   Process Event Messages.
    186           *
    187           * @param   *msg - pointer to event message
    188           *
    189           * @return
    190           ***************************************************************************************************/
    191          static void MT_ProcessIncomingCommand( mtOSALSerialData_t *msg )
    192          {
    193            uint8 len, *msg_ptr = msg->msg;
    194          
    195            /* Use the first byte of the message as the command ID */
    196            switch ( msg->hdr.event )
    197            {
    198              case CMD_SERIAL_MSG:
    199                MT_ProcessIncoming(msg_ptr);
    200                break;
    201          
    202              case CMD_DEBUG_MSG:
    203                MT_ProcessDebugMsg( (mtDebugMsg_t *)msg );
    204                break;
    205          
    206              case CB_FUNC:
    207                /*
    208                  Build SPI message here instead of redundantly calling MT_BuildSPIMsg
    209                  because we have copied data already in the allocated message
    210                */
    211          
    212                /* msg_ptr is the beginning of the intended SPI message */
    213                len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
    214          
    215                /*
    216                  FCS goes to the last byte in the message and is calculated over all
    217                  the bytes except FCS and SOP
    218                */
    219                msg_ptr[len-1] = MT_UartCalcFCS(msg_ptr + 1, (uint8)(len-2));
    220          
    221          #ifdef MT_UART_DEFAULT_PORT
    222          	HalUARTWrite(0, "Rxa:", 4); 
    223                HalUARTWrite ( MT_UART_DEFAULT_PORT, msg_ptr, len );
    224          #endif
    225                break;
    226          
    227              case CMD_DEBUG_STR:
    228                MT_ProcessDebugStr( (mtDebugStr_t *)msg );
    229                break;
    230          
    231          #if !defined ( NONWK )
    232              case MT_SYS_APP_RSP_MSG:
    233                len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
    234                MTProcessAppRspMsg( msg_ptr, len );
    235                break;
    236          #endif  // NONWK
    237          
    238          #if defined (MT_UTIL_FUNC)
    239          #if defined ZCL_KEY_ESTABLISH
    240              case ZCL_KEY_ESTABLISH_IND:
    241                MT_UtilKeyEstablishInd((keyEstablishmentInd_t *)msg);
    242                break;
    243          #endif
    244          #endif
    245          #ifdef MT_ZDO_CB_FUNC
    246              case ZDO_STATE_CHANGE:
    247                MT_ZdoStateChangeCB((osal_event_hdr_t *)msg);
    248                break;
    249          #endif
    250          
    251              default:
    252                break;
    253            }
    254          }
    255          
    256          #ifdef MT_TASK
    257          /***************************************************************************************************
    258           * @fn      MT_TransportAlloc
    259           *
    260           * @brief   Allocate memory for transport msg
    261           *
    262           * @param   uint8 cmd0 - The first byte of the MT command id containing the command type and subsystem.
    263           *          uint8 len - length
    264           *
    265           * @return  pointer the allocated memory or NULL if fail to allocate the memory
    266           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    267          uint8 *MT_TransportAlloc(uint8 cmd0, uint8 len)
   \                     MT_TransportAlloc:
    268          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    269            uint8 *p;
    270          
    271            (void)cmd0;  // Intentionally unreferenced parameter
    272          
    273            /* Allocate a buffer of data length + SOP+CMD+FCS (5 bytes) */
    274            p = osal_msg_allocate(len + SPI_0DATA_MSG_LEN);
   \   000006                ; Setup parameters for call to function osal_msg_allocate
   \   000006   2405         ADD     A,#0x5
   \   000008   FA           MOV     R2,A
   \   000009   E4           CLR     A
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   FB           MOV     R3,A
   \   00000D   12....       LCALL   ??osal_msg_allocate?relay
   \   000010   8A82         MOV     DPL,R2
   \   000012   8B83         MOV     DPH,R3
    275          
    276            if (p)
   \   000014   E582         MOV     A,DPL
   \   000016   4583         ORL     A,DPH
   \   000018   6007         JZ      ??MT_TransportAlloc_0
    277            {
    278              p++; /* Save space for SOP_VALUE, msg structure */
    279              return p;
   \   00001A   A3           INC     DPTR
   \   00001B   AA82         MOV     R2,DPL
   \   00001D   AB83         MOV     R3,DPH
   \   00001F   8004         SJMP    ??MT_TransportAlloc_1
    280            }
    281            else
    282            {
    283              return NULL;
   \                     ??MT_TransportAlloc_0:
   \   000021   7A00         MOV     R2,#0x0
   \   000023   7B00         MOV     R3,#0x0
    284            }
   \                     ??MT_TransportAlloc_1:
   \   000025                REQUIRE ?Subroutine0
   \   000025                ; // Fall through to label ?Subroutine0
    285          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    286          
    287          /***************************************************************************************************
    288           * @fn      MT_TransportSend
    289           *
    290           * @brief   Fill in SOP and FCS then send out the msg
    291           *
    292           * @param   uint8 *pBuf - pointer to the message that contains CMD, length, data and FCS
    293           *
    294           * @return  None
    295           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    296          void MT_TransportSend(uint8 *pBuf)
   \                     MT_TransportSend:
    297          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    298            uint8 *msgPtr;
    299            uint8 dataLen = pBuf[0]; /* Data length is on byte #1 from the pointer */
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F5..         MOV     ?V0 + 0,A
    300          
    301            /* Move back to the SOP */
    302            msgPtr = pBuf-1;
   \   00000C   EA           MOV     A,R2
   \   00000D   24FF         ADD     A,#-0x1
   \   00000F   FE           MOV     R6,A
   \   000010   EB           MOV     A,R3
   \   000011   34FF         ADDC    A,#-0x1
   \   000013   FF           MOV     R7,A
    303          
    304            /* Insert SOP */
    305            msgPtr[0] = MT_UART_SOF;
   \   000014   8E82         MOV     DPL,R6
   \   000016   8F83         MOV     DPH,R7
   \   000018   74FE         MOV     A,#-0x2
   \   00001A   F0           MOVX    @DPTR,A
    306          
    307            /* Insert FCS */
    308            msgPtr[SPI_0DATA_MSG_LEN - 1 + dataLen] = MT_UartCalcFCS (pBuf, (3 + dataLen));
   \   00001B                ; Setup parameters for call to function MT_UartCalcFCS
   \   00001B   7403         MOV     A,#0x3
   \   00001D   25..         ADD     A,?V0 + 0
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   ??MT_UartCalcFCS?relay
   \   000023   EE           MOV     A,R6
   \   000024   25..         ADD     A,?V0 + 0
   \   000026   F582         MOV     DPL,A
   \   000028   EF           MOV     A,R7
   \   000029   3400         ADDC    A,#0x0
   \   00002B   F583         MOV     DPH,A
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E9           MOV     A,R1
   \   000032   F0           MOVX    @DPTR,A
    309          
    310            /* Send to UART */
    311          #ifdef MT_UART_DEFAULT_PORT
    312            //HalUARTWrite(0, "Rxb:", 4); 
    313            //HalUARTWrite(MT_UART_DEFAULT_PORT, msgPtr, dataLen + SPI_0DATA_MSG_LEN);
    314          #endif
    315          
    316            /* Deallocate */
    317            osal_msg_deallocate(msgPtr);
   \   000033                ; Setup parameters for call to function osal_msg_deallocate
   \   000033   EE           MOV     A,R6
   \   000034   FA           MOV     R2,A
   \   000035   EF           MOV     A,R7
   \   000036   FB           MOV     R3,A
   \   000037   12....       LCALL   ??osal_msg_deallocate?relay
    318          }
   \   00003A   80..         SJMP    ?Subroutine0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_TaskInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_TaskInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_TransportAlloc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_TransportAlloc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_TransportSend?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_TransportSend

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Rxa:">`:
   \   000000   5278613A     DB "Rxa:"
   \            00      
    319          #endif /* MT_TASK */
    320          /***************************************************************************************************
    321           ***************************************************************************************************/

   Maximum stack usage in bytes:

     Function                    ISTACK PSTACK XSTACK
     --------                    ------ ------ ------
     MT_ProcessEvent                 1      0     18
       -> osal_msg_receive           0      0     36
       -> MTProcessAppRspMsg         0      0     36
       -> MT_ProcessDebugStr         0      0     36
       -> MT_UartCalcFCS             0      0     36
       -> HalUARTWrite               0      0     36
       -> HalUARTWrite               0      0     36
       -> MT_ProcessDebugMsg         0      0     36
       -> MT_ProcessIncoming         0      0     36
       -> osal_msg_deallocate        0      0     36
       -> MT_Init                    0      0     36
       -> MT_AfExec                  0      0     36
       -> MT_SysOsalTimerExpired     0      0     36
       -> MT_SysOsalTimerExpired     0      0     36
       -> MT_SysOsalTimerExpired     0      0     36
       -> MT_SysOsalTimerExpired     0      0     36
     MT_TaskInit                     0      0      9
       -> MT_UartInit                0      0     18
       -> MT_UartRegisterTaskID      0      0     18
       -> osal_set_event             0      0     18
     MT_TransportAlloc               0      0     10
       -> osal_msg_allocate          0      0     20
     MT_TransportSend                1      0     10
       -> MT_UartCalcFCS             0      0     20
       -> osal_msg_deallocate        0      0     20


   Segment part sizes:

     Function/Label            Bytes
     --------------            -----
     MT_TaskID                    1
     MT_TaskInit                 33
     MT_ProcessEvent            332
     MT_TransportAlloc           37
     ?Subroutine0                 5
     MT_TransportSend            60
     ??MT_TaskInit?relay          6
     ??MT_ProcessEvent?relay      6
     ??MT_TransportAlloc?relay    6
     ??MT_TransportSend?relay     6
     ?<Constant "Rxa:">           5

 
 467 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   5 bytes in segment XDATA_ROM_C
   1 byte  in segment XDATA_Z
 
 491 bytes of CODE  memory
   5 bytes of CONST memory
   1 byte  of XDATA memory

Errors: none
Warnings: none
